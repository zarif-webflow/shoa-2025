{
  "version": 3,
  "sources": ["../src/custom-scrollbar.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/cache.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/compatibility/isBrowser.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/alias.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/compatibility/apis.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/types.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/animation.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/array.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/strings.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/equal.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/function.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/object.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/noop.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/utils/math.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/attribute.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/class.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/traversal.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/manipulation.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/trustedTypePolicy.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/create.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/style.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/dimensions.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/events.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/scroll.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/dom/focus.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/support/eventListeners.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/plugins/plugins.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/classnames.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/structureSetup.utils.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/options.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/nonce.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/environment.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/observers/domObserver.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/observers/sizeObserver.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/observers/trinsicObserver.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/observersSetup/observersSetup.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/initialization.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/structureSetup.elements.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/structureSetup/structureSetup.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/setups/setups.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/instances.ts", "../node_modules/.pnpm/overlayscrollbars@2.11.4/node_modules/src/overlayscrollbars.ts"],
  "sourcesContent": ["import \"overlayscrollbars/overlayscrollbars.css\";\r\n\r\nimport { afterWebflowReady, getMultipleHtmlElements } from \"@taj-wf/utils\";\r\nimport { ClickScrollPlugin, OverlayScrollbars, SizeObserverPlugin } from \"overlayscrollbars\";\r\n\r\nconst initCustomScrollbar = () => {\r\n  const scrollTargetElements = getMultipleHtmlElements({ selector: \"[data-custom-scrollbar]\" });\r\n\r\n  if (!scrollTargetElements) return;\r\n\r\n  OverlayScrollbars.plugin([ClickScrollPlugin, SizeObserverPlugin]);\r\n\r\n  for (const element of scrollTargetElements) {\r\n    OverlayScrollbars(element, {});\r\n  }\r\n};\r\n\r\nafterWebflowReady(() => {\r\n  initCustomScrollbar();\r\n});\r\n", "export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\ntype CreateCache = {\r\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\r\n  <Value>(\r\n    options: CacheOptions<Value>,\r\n    update?: CacheUpdater<Value>\r\n  ): CacheContextual<Value> | Cache<Value>;\r\n};\r\n\r\nexport const createCache: CreateCache = <Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> => {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n", "export const isBrowser =\r\n  // deno has the global `window` defined\r\n  typeof window !== 'undefined' &&\r\n  // make sure HTML element is available\r\n  typeof HTMLElement !== 'undefined' &&\r\n  // make sure document is defined\r\n  !!window.document;\r\n", "import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n", "import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { PlainObject } from '../../typings';\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : Object.prototype.toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0;\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> =>\r\n  !!obj && obj.constructor === Object;\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => obj instanceof HTMLElement;\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => obj instanceof Element;\r\n", "import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    if (onFrame) {\r\n      onFrame(progress, percent, animationCompleted);\r\n    }\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    if (complete) {\r\n      frame(complete);\r\n    }\r\n  };\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { PlainObject } from '../../typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  if (!arrayIsSingleItem && !isString(items) && isArrayLike(items)) {\r\n    Array.prototype.push.apply(array, items as T[]);\r\n  } else {\r\n    array.push(items as T);\r\n  }\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * If the passed value is an array like structure and not a string it will be converted into an array.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[] | ArrayLike<T>): T[] => {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n  return !isString(value) && isArrayLike(value) ? from(value) : [value];\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => (fn ? fn.apply(undefined, args || []) : true); // return true when fn is falsy to not break the loop\r\n  each(arr, runFn);\r\n  if (!keep) {\r\n    (arr as any[]).length = 0;\r\n  }\r\n};\r\n", "export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n", "import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '../../typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\n\r\ntype DebouncerFn = (task: () => void) => () => void;\r\n\r\nexport type DebounceTiming = { _debouncer: DebouncerFn } | number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timing for debouncing. If false, null or undefined, no debounce is applied.\r\n   */\r\n  _debounceTiming?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * The timing which determines when the debounced will be called even when the debounce timing did not call it yet.\r\n   */\r\n  _maxDebounceTiming?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\nconst getDebouncer = (\r\n  debounceTiming: DebounceTiming | (() => DebounceTiming)\r\n): DebouncerFn | false | null | undefined | void => {\r\n  const debounceTimingResult = isFunction(debounceTiming) ? debounceTiming() : debounceTiming;\r\n  if (isNumber(debounceTimingResult)) {\r\n    const schedule = debounceTimingResult ? setT! : rAF!;\r\n    const clear = debounceTimingResult ? clearT : cAF;\r\n    return (task) => {\r\n      const timeoutId = schedule!(\r\n        () => task(),\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        debounceTimingResult\r\n      );\r\n      return () => {\r\n        clear!(timeoutId);\r\n      };\r\n    };\r\n  }\r\n\r\n  return debounceTimingResult && debounceTimingResult._debouncer;\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const {\r\n    _debounceTiming: _timeout,\r\n    _maxDebounceTiming: _maxDelay,\r\n    _leading,\r\n    _mergeParams,\r\n  } = options || {};\r\n  let cancelMaxTimeoutDebouncer: (() => void) | undefined;\r\n  let cancelTimeoutDebounder: (() => void) | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    if (cancelTimeoutDebounder) {\r\n      cancelTimeoutDebounder();\r\n    }\r\n    if (cancelMaxTimeoutDebouncer) {\r\n      cancelMaxTimeoutDebouncer();\r\n    }\r\n\r\n    leadingInvoked = cancelTimeoutDebounder = cancelMaxTimeoutDebouncer = prevArguments = undefined;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (cancelTimeoutDebounder) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const timeoutDebouncer = getDebouncer(_timeout);\r\n\r\n    if (timeoutDebouncer) {\r\n      const maxDelayDebouncer = getDebouncer(_maxDelay);\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      if (cancelTimeoutDebounder) {\r\n        cancelTimeoutDebounder();\r\n      }\r\n\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        cancelTimeoutDebounder = timeoutDebouncer(() => (leadingInvoked = undefined));\r\n      } else {\r\n        cancelTimeoutDebounder = timeoutDebouncer(boundInvoke);\r\n\r\n        if (maxDelayDebouncer && !cancelMaxTimeoutDebouncer) {\r\n          cancelMaxTimeoutDebouncer = maxDelayDebouncer(flush);\r\n        }\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { PlainObject } from '../../typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(\r\n    target: T,\r\n    object1: U,\r\n    object2: V,\r\n    object3: W,\r\n    object4: X,\r\n    object5: Y\r\n  ): T & U & V & W & X & Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => !keys(obj).length;\r\n", "export const noop = () => {};\r\n", "import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { bind, deduplicateArray, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  deduplicateArray((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    if (elm) {\r\n      elm.setAttribute(attrName, String(value || ''));\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n", "import type { AttributeElementTarget, DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set[set.has(className) ? 'delete' : 'add'](className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n", "import type { NodeElementTarget } from './types';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const find = (selector: string, elm?: NodeElementTarget): Element[] => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm ? from(rootElm.querySelectorAll(selector)) : [];\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const findFirst = (selector: string, elm?: NodeElementTarget): NodeElementTarget => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm && rootElm.querySelector(selector);\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nexport const is = (elm: NodeElementTarget, selector: string): boolean =>\r\n  isElement(elm) && elm.matches(selector);\r\n\r\nexport const isBodyElement = (elm: NodeElementTarget) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nexport const children = (elm: NodeElementTarget, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nexport const contents = (elm: NodeElementTarget): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nexport const parent = (elm: NodeElementTarget): NodeElementTarget => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nexport const closest = (elm: NodeElementTarget, selector: string): NodeElementTarget =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nexport const getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nexport const liesBetween = (\r\n  elm: NodeElementTarget,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n", "import type { NodeElementTarget, NodeElementTargetCollection } from './types';\r\nimport { createOrKeepArray, each } from '../utils/array';\r\nimport { parent } from './traversal';\r\nimport { bind } from '../utils';\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeElementTargetCollection): void => {\r\n  each(createOrKeepArray(nodes), (node) => {\r\n    const parentElm = parent(node);\r\n    if (node && parentElm) {\r\n      parentElm.removeChild(node);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: NodeElementTarget, children: NodeElementTargetCollection) =>\r\n  bind(\r\n    removeElements,\r\n    node &&\r\n      children &&\r\n      each(createOrKeepArray(children), (child) => {\r\n        if (child) {\r\n          node.appendChild(child);\r\n        }\r\n      })\r\n  );\r\n", "// at the time of implementation TypeScript doesn't offer any TrustedTypes typescript definitions\r\n// https://github.com/microsoft/TypeScript/issues/30024\r\nlet trustedTypePolicy: unknown | undefined;\r\n\r\nexport const getTrustedTypePolicy = () => trustedTypePolicy;\r\nexport const setTrustedTypePolicy = (newTrustedTypePolicy: unknown | undefined) => {\r\n  trustedTypePolicy = newTrustedTypePolicy;\r\n};\r\n", "import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\nimport { getTrustedTypePolicy } from '../../trustedTypePolicy';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  const trustedTypesPolicy = getTrustedTypePolicy();\r\n  const trimmedHtml = html.trim();\r\n  createdDiv.innerHTML = trustedTypesPolicy\r\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (trustedTypesPolicy as any).createHTML(trimmedHtml)\r\n    : trimmedHtml;\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n", "import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '../../typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject, isNull, isBoolean } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const roundCssNumber = (value: number) => Math.round(value * 10000) / 10000;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${roundCssNumber(validFiniteNumber(ratio) * 100)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${roundCssNumber(validFiniteNumber(number))}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value =\r\n          isNull(rawValue) || isBoolean(rawValue)\r\n            ? ''\r\n            : isNumber(rawValue)\r\n              ? numberToCssPx(rawValue)\r\n              : rawValue;\r\n\r\n        if (name.indexOf('--') === 0) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          elmStyle[name as any] = value;\r\n        }\r\n        // eslint-disable-next-line no-empty\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        w: (elm as any)[`${property}Width`],\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    if (target) {\r\n      target.removeEventListener(eventName, listener as EventListener, capture);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              if (listener) {\r\n                listener(evt);\r\n              }\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      if (target) {\r\n        target.addEventListener(eventName, finalListener, nativeOptions);\r\n      }\r\n\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n", "import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n", "import type { NodeElementTarget } from './types';\r\n\r\nexport const focusElement = (element: NodeElementTarget) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>,\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener(\r\n        (currListener) => {\r\n          if (isFunction(currListener)) {\r\n            eventSet.add(currListener);\r\n          }\r\n        },\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      if (eventListener) {\r\n        push(offFns, addEvent(key, eventListener));\r\n      }\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '../overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '../eventListeners';\r\nimport { each, keys } from '../support';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance,\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance,\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> =\r\n  T extends StaticPlugin<infer Name>\r\n    ? T[Name]['static'] extends (...args: any[]) => any\r\n      ? ReturnType<T[Name]['static']>\r\n      : void\r\n    : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> =\r\n  T extends InstancePlugin<infer Name>\r\n    ? T[Name]['instance'] extends (...args: any[]) => any\r\n      ? ReturnType<T[Name]['instance']>\r\n      : void\r\n    : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>,\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n", "import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n  ScrollbarsClickScrollBehavior,\r\n} from '../../options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '../plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n      const scrollbarsClickScrollAllowedValues: OptionsTemplateValue<ScrollbarsClickScrollBehavior> =\r\n        [booleanAllowedValues, oTypes.string];\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: scrollbarsClickScrollAllowedValues, // true || false || instant\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n", "import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrolling = 'scrolling';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { StaticPlugin } from '../plugins';\r\nimport {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '../../support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '../../classnames';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n", "import type { Env } from '../../environment';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '../../options';\r\nimport type { OverflowStyle } from '../../typings';\r\nimport {\r\n  getStyles,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  strScroll,\r\n  strVisible,\r\n  XY,\r\n} from '../../support';\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflow: string) => overflow.indexOf(strVisible) === 0;\r\n\r\nexport const overflowBehaviorToOverflowStyle = (\r\n  overflowBehavior: OverflowBehavior\r\n): OverflowStyle => overflowBehavior.replace(`${strVisible}-`, '') as OverflowStyle;\r\n\r\nexport const overflowCssValueToOverflowStyle = (\r\n  cssValue: string | undefined,\r\n  hasOverflow?: boolean\r\n): OverflowStyle => {\r\n  if (cssValue === 'auto') {\r\n    return hasOverflow ? strScroll : strHidden;\r\n  }\r\n\r\n  const finalCssValue = cssValue || strHidden;\r\n  return [strHidden, strScroll, strVisible].includes(finalCssValue)\r\n    ? (finalCssValue as OverflowStyle)\r\n    : strHidden;\r\n};\r\n\r\nexport const getElementOverflowStyle = (\r\n  element: HTMLElement,\r\n  hasOverflow: Partial<XY<boolean>>\r\n): XY<OverflowStyle> => {\r\n  const { overflowX, overflowY } = getStyles(element, [strOverflowX, strOverflowY]);\r\n\r\n  return {\r\n    x: overflowCssValueToOverflowStyle(overflowX, hasOverflow.x),\r\n    y: overflowCssValueToOverflowStyle(overflowY, hasOverflow.y),\r\n  };\r\n};\r\n", "import type { ObserversSetupState } from '../../setups';\r\nimport type { Options, OptionsCheckFn } from '../../options';\r\nimport type { StructureSetupElementsObj } from '../../setups/structureSetup/structureSetup.elements';\r\nimport type { Env } from '../../environment';\r\nimport type { WH, XY } from '../../support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '../../typings';\r\nimport type { StructureSetupState } from '../../setups/structureSetup';\r\nimport type { StaticPlugin } from '../plugins';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getElementOverflowStyle,\r\n} from '../../setups/structureSetup/structureSetup.utils';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '../../classnames';\r\nimport {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strScroll,\r\n  addAttrClass,\r\n} from '../../support';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            viewportOverflowStyle.x === strScroll,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            viewportOverflowStyle.y === strScroll,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowStyle The viewport overflow style.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowStyle: XY<OverflowStyle>\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowStyle);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (doViewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowStyle The viewport overflow style according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowStyle: XY<OverflowStyle>,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowStyle);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         */\r\n        const _undoViewportArrange = () => {\r\n          if (doViewportArrange) {\r\n            const { _hasOverflow, _viewportPaddingStyle: viewportPaddingStyle } =\r\n              structureSetupState;\r\n            const viewportOverflowStyle = getElementOverflowStyle(_viewport, _hasOverflow);\r\n            const { _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowStyle);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return () => {\r\n              setStyles(\r\n                _viewport,\r\n                assignDeep({}, prevStyle, _hideNativeScrollbars(viewportOverflowStyle))\r\n              );\r\n              addArrange();\r\n            };\r\n          }\r\n          return noop;\r\n        };\r\n\r\n        return {\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n", "import type { StaticPlugin } from '../plugins';\r\nimport { animateNumber, noop, selfClearTimeout } from '../../support';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        targetOffset: number,\r\n        handleLength: number,\r\n        onClickScrollCompleted: (stopped: boolean) => void\r\n      ) => {\r\n        // click scroll animation has 2 main parts:\r\n        // 1. the \"click\" which scrolls 100% of the viewport in a certain amount of time\r\n        // 2. the \"press\" which scrolls to the point where the cursor is located, the \"press\" always waits for the \"click\" to finish\r\n        // The \"click\" should not be canceled by a \"pointerup\" event because very fast clicks or taps would cancel it too fast\r\n        // The \"click\" should only be canceled by a subsequent \"pointerdown\" event because otherwise 2 animations would run\r\n        // The \"press\" should be canceld by the next \"pointerup\" event\r\n\r\n        let stopped = false;\r\n        let stopPressAnimation = noop;\r\n        const linearScrollMs = 133;\r\n        const easedScrollMs = 222;\r\n        const [setPressAnimationTimeout, clearPressAnimationTimeout] =\r\n          selfClearTimeout(linearScrollMs);\r\n        const targetOffsetSign = Math.sign(targetOffset);\r\n        const handleLengthWithTargetSign = handleLength * targetOffsetSign;\r\n        const handleLengthWithTargetSignHalf = handleLengthWithTargetSign / 2;\r\n        const easing = (x: number) => 1 - (1 - x) * (1 - x); // easeOutQuad;\r\n        const easedEndPressAnimation = (from: number, to: number) =>\r\n          animateNumber(from, to, easedScrollMs, moveHandleRelative, easing);\r\n        const linearPressAnimation = (linearFrom: number, msFactor: number) =>\r\n          animateNumber(\r\n            linearFrom,\r\n            targetOffset - handleLengthWithTargetSign,\r\n            linearScrollMs * msFactor,\r\n            (progress, _, completed) => {\r\n              moveHandleRelative(progress);\r\n\r\n              if (completed) {\r\n                stopPressAnimation = easedEndPressAnimation(progress, targetOffset);\r\n              }\r\n            }\r\n          );\r\n        const stopClickAnimation = animateNumber(\r\n          0,\r\n          handleLengthWithTargetSign,\r\n          easedScrollMs,\r\n          (clickAnimationProgress, _, clickAnimationCompleted) => {\r\n            moveHandleRelative(clickAnimationProgress);\r\n\r\n            if (clickAnimationCompleted) {\r\n              onClickScrollCompleted(stopped);\r\n\r\n              if (!stopped) {\r\n                const remainingScrollDistance = targetOffset - clickAnimationProgress;\r\n                const continueWithPress =\r\n                  Math.sign(remainingScrollDistance - handleLengthWithTargetSignHalf) ===\r\n                  targetOffsetSign;\r\n\r\n                if (continueWithPress) {\r\n                  setPressAnimationTimeout(() => {\r\n                    const remainingLinearScrollDistance =\r\n                      remainingScrollDistance - handleLengthWithTargetSign;\r\n                    const linearBridge =\r\n                      Math.sign(remainingLinearScrollDistance) === targetOffsetSign;\r\n\r\n                    stopPressAnimation = linearBridge\r\n                      ? linearPressAnimation(\r\n                          clickAnimationProgress,\r\n                          Math.abs(remainingLinearScrollDistance) / handleLength\r\n                        )\r\n                      : easedEndPressAnimation(clickAnimationProgress, targetOffset);\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          },\r\n          easing\r\n        );\r\n\r\n        return (stopClick?: boolean) => {\r\n          stopped = true;\r\n\r\n          if (stopClick) {\r\n            stopClickAnimation();\r\n          }\r\n\r\n          clearPressAnimationTimeout();\r\n          stopPressAnimation();\r\n        };\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DeepPartial, DeepReadonly } from './typings';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from './support';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false,\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n    ? F extends OptionsField\r\n      ?\r\n          | (IncompletePath extends true ? F : never)\r\n          | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n      : never\r\n    : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n    ? []\r\n    : S extends `${infer T}.${infer U}`\r\n      ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n      : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n    ? F extends keyof O\r\n      ? O[F] extends OptionsPrimitiveValue\r\n        ? O[F]\r\n        : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n      : never\r\n    : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string,\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The scrollbar click scroll behavior.\r\n */\r\nexport type ScrollbarsClickScrollBehavior = boolean | 'instant';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether it is possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether it is possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: ScrollbarsClickScrollBehavior;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n          // eslint-disable-next-line no-empty\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) => [\r\n    getPropByPath(options, path),\r\n    force || getPropByPath(changedOptions, path) !== undefined,\r\n  ];\r\n", "let nonce: string | undefined;\r\n\r\nexport const getNonce = () => nonce;\r\nexport const setNonce = (newNonce: string | undefined) => {\r\n  nonce = newNonce;\r\n};\r\n", "import type { XY, EventListener } from './support';\r\nimport type { Options, PartialOptions } from './options';\r\nimport type { Initialization, PartialInitialization } from './initialization';\r\nimport type { StyleObjectKey } from './typings';\r\nimport { defaultOptions } from './options';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from './classnames';\r\nimport {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from './support';\r\nimport { getNonce } from './nonce';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    if (clear) {\r\n      removeElements(measureElm);\r\n    }\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n      // eslint-disable-next-line no-empty\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const styleElm = envElm.lastChild as HTMLStyleElement;\r\n  const nonce = getNonce();\r\n\r\n  if (nonce) {\r\n    styleElm.nonce = nonce;\r\n  }\r\n\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nexport const getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '../support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>,\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _debounceTiming: 33, _maxDebounceTiming: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        if (!fromRecords && contentChanged) {\r\n          (callback as DOMContentObserverCallback)(false);\r\n        }\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n\r\n        if (!fromRecords) {\r\n          (callback as DOMTargetObserverCallback).apply(0, args);\r\n        }\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import type { SizeObserverPlugin } from '../plugins';\r\nimport {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n  debounce,\r\n  isBoolean,\r\n  isArray,\r\n  isEmptyArray,\r\n} from '../support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '../classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '../plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\nlet resizeObserverBoxSupport: boolean | null = null;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const polyfillElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const polyfillRootElement = polyfillElements[0] as HTMLElement;\r\n    const polyfillTargetElement = polyfillRootElement.firstChild as HTMLElement;\r\n\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry[] | boolean) => {\r\n      const isResizeObserverCall = isArray(sizeChangedContext) && !isEmptyArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const resizeObserverEntry = sizeChangedContext[0];\r\n        const [currContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          resizeObserverEntry.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currContentRect);\r\n        appear = domRectAppeared(currContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      if (!isBoolean(resizeObserverBoxSupport)) {\r\n        const detectSupportResizeObserver = new ResizeObserverConstructor(noop);\r\n        detectSupportResizeObserver.observe(target, {\r\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n          // @ts-ignore -> void === undefined\r\n          get box() {\r\n            resizeObserverBoxSupport = true;\r\n          },\r\n        });\r\n        resizeObserverBoxSupport = resizeObserverBoxSupport || false;\r\n        detectSupportResizeObserver.disconnect();\r\n      }\r\n\r\n      /*\r\n      const { port1, port2 } = new MessageChannel();\r\n      const tasks: Set<() => void> = new Set();\r\n      const debounceTiming: DebounceTiming = {\r\n        _debouncer: (task) => {\r\n          tasks.add(task);\r\n          port2.postMessage(0);\r\n          return () => {\r\n            tasks.delete(task);\r\n          };\r\n        },\r\n      };\r\n      port1.onmessage = () => {\r\n        tasks.forEach((task) => task());\r\n      };\r\n      */\r\n      const debouncedOnSizeChangedCallbackProxy = debounce(onSizeChangedCallbackProxy, {\r\n        _debounceTiming: 0,\r\n        _maxDebounceTiming: 0,\r\n      });\r\n      const resizeObserverCallback = (entries: ResizeObserverEntry[]) =>\r\n        debouncedOnSizeChangedCallbackProxy(entries);\r\n      const contentBoxResizeObserver = new ResizeObserverConstructor(resizeObserverCallback);\r\n      contentBoxResizeObserver.observe(resizeObserverBoxSupport ? target : polyfillTargetElement);\r\n\r\n      push(destroyFns, [\r\n        () => {\r\n          contentBoxResizeObserver.disconnect();\r\n          /*\r\n          port1.close();\r\n          port2.close();\r\n          tasks.clear();\r\n          */\r\n        },\r\n        !resizeObserverBoxSupport && appendChildren(target, polyfillRootElement),\r\n      ]);\r\n\r\n      if (resizeObserverBoxSupport) {\r\n        const borderBoxResizeObserver = new ResizeObserverConstructor(resizeObserverCallback);\r\n        borderBoxResizeObserver.observe(target, {\r\n          box: 'border-box',\r\n        });\r\n        push(destroyFns, () => borderBoxResizeObserver.disconnect());\r\n      }\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        polyfillTargetElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(polyfillRootElement, classNameSizeObserverAppear),\r\n            addEventListener(polyfillRootElement, 'animationstart', pluginAppearCallback),\r\n            appendChildren(target, polyfillRootElement),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n};\r\n", "import type { WH, CacheValues } from '../support';\r\nimport { createSizeObserver } from './sizeObserver';\r\nimport { classNameTrinsicObserver } from '../classnames';\r\nimport {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '../support';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>,\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n", "import type { Options, OptionsCheckFn } from '../../options';\r\nimport type { ScrollbarsHidingPlugin } from '../../plugins';\r\nimport type { SizeObserverCallbackParams } from '../../observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '../../setups';\r\nimport type { CacheValues, WH } from '../../support';\r\nimport type { PlainObject } from '../../typings';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '../../plugins';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '../../classnames';\r\nimport { getEnvironment } from '../../environment';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '../../observers';\r\nimport {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '../../support';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open', 'wrap', 'cols', 'rows'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n    _removeScrollObscuringStyles,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && undoViewportArrange && undoViewportArrange();\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      if (redoViewportArrange) {\r\n        redoViewportArrange();\r\n      }\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      if (revertScrollObscuringStyles) {\r\n        revertScrollObscuringStyles();\r\n      }\r\n      if (noClipping) {\r\n        revertMeasuring();\r\n      }\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _debounceTiming: () => debounceTimeout,\r\n    _maxDebounceTiming: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n\r\n    if (!fromRecords) {\r\n      onObserversUpdated(updateHints);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    if (_contentMutation && !fromRecords) {\r\n      updateFn(updateHints);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs,\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _debounceTiming: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      if (viewportIsTargetResizeObserver) {\r\n        viewportIsTargetResizeObserver.observe(_host);\r\n      }\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        if (viewportIsTargetResizeObserver) {\r\n          viewportIsTargetResizeObserver.disconnect();\r\n        }\r\n        if (destroySizeObserver) {\r\n          destroySizeObserver();\r\n        }\r\n        if (destroyTrinsicObserver) {\r\n          destroyTrinsicObserver();\r\n        }\r\n        if (destroyContentMutationObserver) {\r\n          destroyContentMutationObserver();\r\n        }\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        if (updateContentMutationObserver) {\r\n          updateContentMutationObserver();\r\n        }\r\n        if (destroyContentMutationObserver) {\r\n          destroyContentMutationObserver();\r\n        }\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(baseStyleChangingAttrs, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        if (hostUpdateResult) {\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n        }\r\n\r\n        if (trinsicUpdateResult) {\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n        }\r\n\r\n        if (contentUpdateResult) {\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n        }\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DeepPartial } from './typings';\r\nimport { isFunction, isHTMLElement, isNull, isUndefined } from './support';\r\nimport { getEnvironment } from './environment';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> =\r\n  Extract<StaticInitializationElement<Args>, (...args: Args) => any> extends (\r\n    ...args: infer P\r\n  ) => any\r\n    ? (...args: P) => HTMLElement\r\n    : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> =\r\n  Extract<DynamicInitializationElement<Args>, (...args: Args) => any> extends (\r\n    ...args: infer P\r\n  ) => any\r\n    ? (...args: P) => HTMLElement\r\n    : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n", "import type { XY } from '../../support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '../../initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '../../typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '../../initialization';\r\nimport { getEnvironment } from '../../environment';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '../../classnames';\r\nimport {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  numberToCssPx,\r\n  setStyles,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n  roundCssNumber,\r\n} from '../../support';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _refreshScrollbarsScrollCoordinates: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void,\r\n];\r\n\r\ntype ScrollbarStyleFn = (\r\n  scrollbarStructure: ScrollbarStructure\r\n) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const cssCustomPropViewportPercent = '--os-viewport-percent';\r\n  const cssCustomPropScrollPercent = '--os-scroll-percent';\r\n  const cssCustomPropScrollDirection = '--os-scroll-direction';\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) => {\r\n    if (scrollT) {\r\n      let currAnimation: Animation | null = null;\r\n      let currAnimationTransform: string[] = [];\r\n      const timeline = new scrollT({\r\n        source: _scrollOffsetElement,\r\n        axis,\r\n      });\r\n      const cancelAnimation = () => {\r\n        if (currAnimation) {\r\n          currAnimation.cancel();\r\n        }\r\n        currAnimation = null;\r\n      };\r\n      const _setScrollPercentAnimation = (structure: ScrollbarStructure) => {\r\n        const { _scrollCoordinates } = structureSetupState;\r\n        const defaultDirectionScroll =\r\n          isDefaultDirectionScrollCoordinates(_scrollCoordinates)[axis];\r\n        const isHorizontal = axis === 'x';\r\n        const transformArray = [\r\n          getTrasformTranslateValue(0, isHorizontal),\r\n          getTrasformTranslateValue(`calc(100cq${isHorizontal ? 'w' : 'h'} + -100%)`, isHorizontal),\r\n        ];\r\n        const transform = defaultDirectionScroll ? transformArray : transformArray.reverse();\r\n\r\n        if (\r\n          currAnimationTransform[0] === transform[0] &&\r\n          currAnimationTransform[1] === transform[1]\r\n        ) {\r\n          return cancelAnimation;\r\n        }\r\n\r\n        cancelAnimation();\r\n        currAnimationTransform = transform;\r\n        currAnimation = structure._handle.animate(\r\n          {\r\n            // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n            clear: ['left'],\r\n            // transform is a temporary fix for: https://github.com/KingSora/OverlayScrollbars/issues/705\r\n            // can be reverted to just animate \"cssCustomPropScrollPercent\" when browsers implement an optimization possibility\r\n            transform,\r\n            // [cssCustomPropScrollPercent]: [0, 1],\r\n          },\r\n          {\r\n            timeline,\r\n          }\r\n        );\r\n\r\n        return cancelAnimation;\r\n      };\r\n\r\n      return {\r\n        _setScrollPercentAnimation,\r\n      };\r\n    }\r\n  };\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const getViewportPercent = () => {\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n    const getAxisValue = (axisViewportSize: number, axisOverflowAmount: number) =>\r\n      capNumber(0, 1, axisViewportSize / (axisViewportSize + axisOverflowAmount) || 0);\r\n\r\n    return {\r\n      x: getAxisValue(_overflowEdge.x, _overflowAmount.x),\r\n      y: getAxisValue(_overflowEdge.y, _overflowAmount.y),\r\n    };\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: ScrollbarStyleFn\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    if (runHorizontal) {\r\n      scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    }\r\n    if (runVertical) {\r\n      scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n    }\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    const viewportPercent = getViewportPercent();\r\n    const createScrollbarStyleFn =\r\n      (axisViewportPercent: number): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) => [\r\n        structure._scrollbar,\r\n        {\r\n          [cssCustomPropViewportPercent]: roundCssNumber(axisViewportPercent) + '',\r\n        },\r\n      ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(viewportPercent.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(viewportPercent.y));\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    if (!scrollT) {\r\n      const { _scrollCoordinates } = structureSetupState;\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const createScrollbarStyleFn =\r\n        (axisScrollPercent: number): ScrollbarStyleFn =>\r\n        (structure: ScrollbarStructure) => [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropScrollPercent]: roundCssNumber(axisScrollPercent) + '',\r\n          },\r\n        ];\r\n\r\n      scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(scrollPercent.x));\r\n      scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(scrollPercent.y));\r\n    }\r\n  };\r\n  const refreshScrollbarsScrollCoordinates = () => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const defaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n    const createScrollbarStyleFn =\r\n      (axisIsDefaultDirectionScrollCoordinates: boolean): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) => [\r\n        structure._scrollbar,\r\n        {\r\n          [cssCustomPropScrollDirection]: axisIsDefaultDirectionScrollCoordinates ? '0' : '1',\r\n        },\r\n      ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.y));\r\n\r\n    // temporary fix for: https://github.com/KingSora/OverlayScrollbars/issues/705\r\n    if (scrollT) {\r\n      horizontalScrollbars.forEach(scrollTimeline.x!._setScrollPercentAnimation);\r\n      verticalScrollbars.forEach(scrollTimeline.y!._setScrollPercentAnimation);\r\n    }\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget && !_isBody) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const styleScrollbarPosition: ScrollbarStyleFn = (structure: ScrollbarStructure) => {\r\n        const { _scrollbar } = structure;\r\n        const elm = parent(_scrollbar) === _viewport && _scrollbar;\r\n        const getTranslateValue = (\r\n          axisScrollPercent: number,\r\n          axisOverflowAmount: number,\r\n          axisIsDefaultCoordinates: boolean\r\n        ) => {\r\n          const px = axisOverflowAmount * axisScrollPercent;\r\n          return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n        };\r\n\r\n        return [\r\n          elm,\r\n          elm && {\r\n            transform: getTrasformTranslateValue({\r\n              x: getTranslateValue(scrollPercent.x, _overflowAmount.x, isDefaultDirectionScroll.x),\r\n              y: getTranslateValue(scrollPercent.y, _overflowAmount.y, isDefaultDirectionScroll.y),\r\n            }),\r\n          },\r\n        ];\r\n      };\r\n\r\n      scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n      scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n    const timeline = scrollTimeline[xyKey];\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      timeline && timeline._setScrollPercentAnimation(result),\r\n      scrollbarsSetupEvents(result, scrollbarsAddRemoveClass, isHorizontal),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollCoordinates: refreshScrollbarsScrollCoordinates,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n", "import type { XY } from '../../support';\r\nimport type { ClickScrollPlugin } from '../../plugins';\r\nimport type { ReadonlyOptions } from '../../options';\r\nimport type { StructureSetupState } from '../../setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n} from '../../classnames';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '../../plugins';\r\nimport {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '../../support';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (scrollbarStructure, scrollbarsAddRemoveClass, isHorizontal) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _removeScrollObscuringStyles,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      if (isFunction(_scrollOffsetElement.scrollBy)) {\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n      }\r\n    };\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n      const pointerdownCleanupFns: Array<() => void> = [];\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const dragClickScrollOption = scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'];\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          dragClickScrollOption &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          runEachAndClear(pointerdownCleanupFns);\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll =\r\n            !isDragScroll && (pointerDownEvent.shiftKey || dragClickScrollOption === 'instant');\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            runEachAndClear(pointerupCleanupFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const nonAnimatedScroll = isDragScroll || instantClickScroll;\r\n          const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n          const pointerupCleanupFns = [\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            nonAnimatedScroll &&\r\n              addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) =>\r\n                moveHandleRelative(\r\n                  startOffset + (pointerMoveEvent[clientXYKey] - pointerDownOffset)\r\n                )\r\n              ),\r\n            nonAnimatedScroll &&\r\n              (() => {\r\n                const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                revertScrollObscuringStyles();\r\n                const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                const snapScrollDiff = {\r\n                  x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                  y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n                };\r\n\r\n                if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                  _removeScrollObscuringStyles();\r\n                  scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                  scrollOffsetElementScrollBy(snapScrollDiff);\r\n                  scrollSnapScrollTransitionTimeout(revertScrollObscuringStyles);\r\n                }\r\n              }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n            if (animateClickScroll) {\r\n              const stopClickScrollAnimation = animateClickScroll(\r\n                moveHandleRelative,\r\n                startOffset,\r\n                handleLength,\r\n                (stopped) => {\r\n                  // if the scroll animation doesn't continue with a press\r\n                  if (stopped) {\r\n                    revertScrollObscuringStyles();\r\n                  } else {\r\n                    push(pointerupCleanupFns, revertScrollObscuringStyles);\r\n                  }\r\n                }\r\n              );\r\n\r\n              push(pointerupCleanupFns, stopClickScrollAnimation);\r\n              push(pointerdownCleanupFns, bind(stopClickScrollAnimation, true));\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // solve problem of interaction causing `click` events (https://github.com/KingSora/OverlayScrollbars/issues/251)\r\n      // 1. on `scrollbar` pointer down register a `document` click event which gets prevented and propagation is stopped\r\n      // 2. on `document` pointerup / pointercancel remove that click event after a timeout (in case the click is never triggered)\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        () => {\r\n          const removeClickEvent = addEventListener(\r\n            _documentElm,\r\n            'click',\r\n            (clickEvent: Event) => {\r\n              removePointerEvents();\r\n              stopAndPrevent(clickEvent);\r\n            },\r\n            {\r\n              _once: true,\r\n              _capture: true,\r\n              _passive: false,\r\n            }\r\n          );\r\n          const removePointerEvents = addEventListener(\r\n            _documentElm,\r\n            'pointerup pointercancel',\r\n            () => {\r\n              removePointerEvents();\r\n              setTimeout(removeClickEvent, 150);\r\n            },\r\n            {\r\n              _capture: true,\r\n              _passive: true,\r\n            }\r\n          );\r\n        },\r\n        { _capture: true, _passive: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n", "import type { OverflowBehavior, ReadonlyOptions } from '../../options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '../../setups';\r\nimport type { InitializationTarget } from '../../initialization';\r\nimport type { OverflowStyle } from '../../typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '../../classnames';\r\nimport { getEnvironment } from '../../environment';\r\nimport {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '../../support';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj,\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n  const hoverablePointerTypes = ['mouse', 'pen'];\r\n\r\n  // needed to not fire unnecessary operations for pointer events on ios safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) =>\r\n    hoverablePointerTypes.includes(event.pointerType);\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) => isHoverablePointerType(event) && manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollCoordinates,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      if (autoHideIsLeave) {\r\n        manageScrollbarsAutoHide(true);\r\n      }\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        if (autoHideIsLeave) {\r\n          manageScrollbarsAutoHide(false);\r\n        }\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event) && autoHideIsMove) {\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      }\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, !!clickScroll);\r\n      }\r\n\r\n      // always update scrollbar visibility before scrollbar size\r\n      // the scrollbar size is influenced whether both or just one scrollbar is visible (because of the corner element)\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      // always update scrollbar sizes after the visibility\r\n      if (updateScrollbars) {\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsScrollbarOffset();\r\n        if (_scrollCoordinatesChanged) {\r\n          _refreshScrollbarsScrollCoordinates();\r\n        }\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n", "import type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '../../initialization';\r\nimport {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  contents,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n  getOffsetSize,\r\n  getScrollSize,\r\n  getStyles,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '../../support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n  dataValueViewportScrolling,\r\n} from '../../classnames';\r\nimport { getEnvironment } from '../../environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '../../initialization';\r\nimport { overflowIsVisible } from './structureSetup.utils';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void,\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n  _removeScrollObscuringStyles: () => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const elementHasOverflow = (elm: HTMLElement) => {\r\n    const offsetSize = getOffsetSize(elm);\r\n    const scrollSize = getScrollSize(elm);\r\n    const overflowX = getStyles(elm, strOverflowX);\r\n    const overflowY = getStyles(elm, strOverflowY);\r\n\r\n    return (\r\n      (scrollSize.w - offsetSize.w > 0 && !overflowIsVisible(overflowX)) ||\r\n      (scrollSize.h - offsetSize.h > 0 && !overflowIsVisible(overflowY))\r\n    );\r\n  };\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const hostElement = viewportIsTargetBody ? viewportElement : targetElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement =\r\n    !elementIsGenerated(viewportElement) && elementHasOverflow(viewportElement)\r\n      ? viewportElement\r\n      : targetElement;\r\n  const scrollOffsetElement = viewportIsTargetBody ? docElement : viewportElement;\r\n  const scrollEventElement = viewportIsTargetBody ? ownerDocument : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: scrollOffsetElement,\r\n    _scrollEventElement: scrollEventElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n    _removeScrollObscuringStyles: () =>\r\n      addRemoveAttrClass(\r\n        scrollOffsetElement,\r\n        dataAttributeViewport,\r\n        dataValueViewportScrolling,\r\n        true\r\n      ),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => void)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  let targetContents = contents(\r\n    [_content, _viewport, _padding, _host, _target].find((elm) => elm && !elementIsGenerated(elm))\r\n  );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      if (isBody) {\r\n        setAttrs(docElement, dataAttributeHtmlBody, '');\r\n      }\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        if (isBody) {\r\n          removeAttrs(docElement, dataAttributeHtmlBody);\r\n        }\r\n        if (originalViewportTabIndex) {\r\n          setAttrs(_viewport, tabIndexStr, originalViewportTabIndex);\r\n        } else {\r\n          removeAttrs(_viewport, tabIndexStr);\r\n        }\r\n\r\n        if (elementIsGenerated(_content)) {\r\n          unwrap(_content);\r\n        }\r\n        if (viewportIsGenerated) {\r\n          unwrap(_viewport);\r\n        }\r\n        if (elementIsGenerated(_padding)) {\r\n          unwrap(_padding);\r\n        }\r\n\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n", "import type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport { setStyles, strHeight } from '../../../support';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n", "import type { StyleObject } from '../../../typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '../../../support';\r\nimport { getEnvironment } from '../../../environment';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n", "import type { ScrollCoordinates, WH, XY } from '../../../support';\r\nimport type { ScrollbarsHidingPlugin } from '../../../plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '../../../typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '../../../support';\r\nimport { getEnvironment } from '../../../environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '../../../classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '../../../plugins';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getElementOverflowStyle,\r\n  overflowBehaviorToOverflowStyle,\r\n  overflowCssValueToOverflowStyle,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\nimport { OverflowBehavior } from '../../../options';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionCanBeNonDefaultMap: Record<\r\n    keyof FlowDirectionStyles,\r\n    (styleValue: string) => boolean\r\n  > = {\r\n    display: () => false,\r\n    direction: (directionStyle) => directionStyle !== 'ltr',\r\n    flexDirection: (flexDirectionStyle) => flexDirectionStyle.endsWith('-reverse'),\r\n    writingMode: (writingModeStyle) => writingModeStyle !== 'horizontal-tb',\r\n  };\r\n  const flowDirectionStyleArr = keys(flowDirectionCanBeNonDefaultMap) as Array<\r\n    keyof FlowDirectionStyles\r\n  >;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getMeasuredScrollCoordinates = (flowDirectionStyles: FlowDirectionStyles) => {\r\n    const flowDirectionCanBeNonDefault = flowDirectionStyleArr.some((styleName) => {\r\n      const styleValue = flowDirectionStyles[styleName];\r\n      return styleValue && flowDirectionCanBeNonDefaultMap[styleName](styleValue);\r\n    });\r\n\r\n    // if the direction can not be non-default return default scroll coordinates (only the sign of the numbers matters)\r\n    if (!flowDirectionCanBeNonDefault) {\r\n      return {\r\n        _start: { x: 0, y: 0 },\r\n        _end: { x: 1, y: 1 },\r\n      };\r\n    }\r\n\r\n    setMeasuringMode(true);\r\n\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(\r\n      _scrollEventElement,\r\n      strScroll,\r\n      (event) => {\r\n        const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        // if scroll offset didnt change\r\n        if (\r\n          event.isTrusted &&\r\n          scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n          scrollEventScrollOffset.y === originalScrollOffset.y\r\n        ) {\r\n          stopPropagation(event);\r\n        }\r\n      },\r\n      {\r\n        _capture: true,\r\n        _once: true,\r\n      }\r\n    );\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    rAF(() => removeScrollBlock());\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const getViewportOverflowStyle = (\r\n    hasOverflow: Partial<XY<boolean>>,\r\n    overflowBehavior: XY<OverflowBehavior>\r\n  ): XY<OverflowStyle> => {\r\n    const getAxisOverflowStyle = (\r\n      axisBehavior: OverflowBehavior,\r\n      axisHasOverflow: boolean | undefined,\r\n      perpendicularBehavior: OverflowBehavior,\r\n      perpendicularOverflow: boolean | undefined\r\n    ): OverflowStyle => {\r\n      // convert behavior to style:\r\n      // 'visible'        -> 'hidden'\r\n      // 'hidden'         -> 'hidden'\r\n      // 'scroll'         -> 'scroll'\r\n      // 'visible-hidden' -> 'hidden'\r\n      // 'visible-scroll' -> 'scroll'\r\n      const behaviorStyle =\r\n        axisBehavior === strVisible ? strHidden : overflowBehaviorToOverflowStyle(axisBehavior);\r\n      const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n      const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n      // if no axis has overflow set 'hidden'\r\n      if (!axisHasOverflow && !perpendicularOverflow) {\r\n        return strHidden;\r\n      }\r\n\r\n      // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n      if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n        return strVisible;\r\n      }\r\n\r\n      // this this axis has a visible behavior\r\n      if (axisOverflowVisible) {\r\n        const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n        return axisHasOverflow && perpendicularOverflow\r\n          ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n          : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n      }\r\n\r\n      const nonOverflow =\r\n        perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow\r\n        ? behaviorStyle // if this axis has an overflow\r\n        : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n    };\r\n\r\n    return {\r\n      x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n      y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n    };\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      [strVisible, strHidden, strScroll].map((style) =>\r\n        createViewportOverflowStyleClassName(overflowCssValueToOverflowStyle(style), isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _directionChanged,\r\n      _appear,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const redoViewportArrange = _undoViewportArrange && _undoViewportArrange();\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      if (redoViewportArrange) {\r\n        redoViewportArrange();\r\n      }\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged ||\r\n      (_hostMutation && viewportIsTargetBody);\r\n    const [flowDirectionStyles, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(getMeasuredScrollCoordinates(flowDirectionStyles), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    let viewportOverflowStyle = getViewportOverflowStyle(hasOverflow, overflow);\r\n\r\n    setMeasuringMode(false);\r\n\r\n    if (adjustViewportStyle) {\r\n      setViewportOverflowStyle(viewportOverflowStyle);\r\n\r\n      viewportOverflowStyle = getElementOverflowStyle(_viewport, hasOverflow);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        _arrangeViewport(viewportOverflowStyle, viewportScrollSize, sizeFraction);\r\n\r\n        setStyles(_viewport, _hideNativeScrollbars(viewportOverflowStyle));\r\n      }\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(viewportOverflowStyle);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n", "import type { TRBL, XY, ScrollCoordinates } from '../../support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '../../setups';\r\nimport type { InitializationTarget } from '../../initialization';\r\nimport type { StyleObject, OverflowStyle } from '../../typings';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n} from '../../support';\r\nimport { getEnvironment } from '../../environment';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void,\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _removeScrollObscuringStyles } =\r\n    elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      if (revertScrollObscuringStyles) {\r\n        revertScrollObscuringStyles();\r\n      }\r\n      if (!_viewportIsTarget) {\r\n        scrollElementTo(_target, 0);\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n", "import type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '../options';\r\nimport type { DeepReadonly } from '../typings';\r\nimport type { InitializationTarget } from '../initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createOptionCheck } from '../options';\r\nimport {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '../support';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void,\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S,\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void,\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  let cacheAndOptionsInitialized = false;\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce || !cacheAndOptionsInitialized;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    cacheAndOptionsInitialized = true;\r\n\r\n    if (changed) {\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n    }\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _removeScrollObscuringStyles } =\r\n        structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n      const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertScrollObscuringStyles();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n", "import type { OverlayScrollbars } from './overlayscrollbars';\r\n\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { XY, TRBL } from './support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from './options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from './plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from './initialization';\r\nimport type { OverflowStyle } from './typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from './eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from './setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from './plugins';\r\nimport { createSetups } from './setups';\r\nimport { addInstance, getInstance, removeInstance } from './instances';\r\nimport { cancelInitialization } from './initialization';\r\nimport { getEnvironment } from './environment';\r\nimport { getOptionsDiff } from './options';\r\nimport {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from './support';\r\nimport { setNonce } from './nonce';\r\nimport { setTrustedTypePolicy } from './trustedTypePolicy';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n  /**\r\n   * Sets the nonce attribute for inline styles.\r\n   */\r\n  nonce(newNonce: string | undefined): void;\r\n  /**\r\n   * Sets the trusted type policy used for DOM operations.\r\n   */\r\n  trustedTypePolicy(newTrustedTypePolicy: unknown | undefined): void;\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        if (name && listener) {\r\n          removeInstanceEvents(name, listener);\r\n        }\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update();\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\nOverlayScrollbars.nonce = setNonce;\r\nOverlayScrollbars.trustedTypePolicy = setTrustedTypePolicy;\r\n"],
  "mappings": ";;;;;;;AAAA;;;;ACkCO,IAAMA,cAA2BA,CACtCC,IACAC,OAAAA;AAEA,QAAA,EAAMC,GAAEC,IAAaC,GAAEC,IAAMC,GAAEC,GAAAA,IAAwBP;AACvD,MAAIQ,KAAgBL;AACpB,MAAIM;AAEJ,QAAMC,wBAAsDA,CAACC,IAAUC,OAAAA;AACrE,UAAMC,KAAOL;AAEb,UAAMM,KAASH;AACf,UAAMI,KAAUH,OAAUP,KAAAA,CAAUA,GAAOQ,IAAMC,EAAAA,IAAUD,OAASC;AAEpE,QAAIC,MAAWR,IAAqB;AAClCC,MAAAA,KAASM;AACTL,MAAAA,KAAYI;IACd;AAEA,WAAO,CAACL,IAAQO,IAASN,EAAAA;EAAU;AAErC,QAAMO,sBAA2CJ,CAAAA,OAC/CF,sBAAsBT,GAAQO,IAAQC,EAAAA,GAAYG,EAAAA;AAEpD,QAAMK,kBAA2CL,CAAAA,OAAoB,CACnEJ,IAAAA,CAAAA,CACEI,IACFH,EAAAA;AAGF,SAAO,CAACR,KAASe,sBAAsBN,uBAAuBO,eAAAA;AAE9C;AClEX,IAAMC,IAAAA,OAEJC,WAAW,eAAA,OAEXC,gBAAgB,eAAA,CAAA,CAErBD,OAAOE;ACJJ,IAAMC,IAAOJ,IAAYC,SAAS,CAAoB;AACtD,IAAMI,IAAUC,KAAKC;AACrB,IAAMC,IAAUF,KAAKG;AACrB,IAAMC,IAAYJ,KAAKK;AAGvB,IAAMC,IAAUN,KAAKO;AACrB,IAAMC,IAAWR,KAAKS;AACtB,IAAMC,IAAMZ,EAAIa;AAChB,IAAMC,IAAMd,EAAIe;AAChB,IAAMC,IAAOhB,EAAIiB;AACjB,IAAMC,IAASlB,EAAImB;ACX1B,IAAMC,SAAaC,CAAAA,OAAAA,OACTrB,EAAIqB,EAAAA,MAA8B,cACtCrB,EAAIqB,EAAAA,IAAAA;AAGH,IAAMC,IAA8BF,OAAgC,kBAAA;AACpE,IAAMG,IACXH,OAAoC,sBAAA;AAC/B,IAAMI,KAA4BJ,OAA8B,gBAAA;AAChE,IAAMK,IAAUL,OAAwD,gBAAA;ACRxE,IAAMM,cAAeC,CAAAA,OAA+BA,OAAAA;AAEpD,IAAMC,SAAUD,CAAAA,OAA0BA,OAAQ;AAUlD,IAAME,WAAYF,CAAAA,OAAAA,OAAmCA,OAAQ;AAE7D,IAAMG,WAAYH,CAAAA,OAAAA,OAAmCA,OAAQ;AAE7D,IAAMI,YAAaJ,CAAAA,OAAAA,OAAoCA,OAAQ;AAE/D,IAAMK,aAAcL,CAAAA,OAAAA,OAAoDA,OAAQ;AAEhF,IAAMM,UAAoBN,CAAAA,OAA8BO,MAAMD,QAAQN,EAAAA;AAEtE,IAAMQ,WAAYR,CAAAA,OAAAA,OAChBA,OAAQ,YAAA,CAAaM,QAAQN,EAAAA,KAAAA,CAASC,OAAOD,EAAAA;AAM/C,IAAMS,cAA4CT,CAAAA,OAAAA;AACvD,QAAMU,KAAAA,CAAAA,CAAWV,MAAOA,GAAIU;AAC5B,QAAMC,KAAsBT,SAASQ,EAAAA,KAAWA,KAAAA,MAAeA,KAAS,KAAK;AAE7E,SAAOJ,QAAQN,EAAAA,KAAAA,CAAUK,WAAWL,EAAAA,KAAQW,KACxCD,KAAS,KAAKF,SAASR,EAAAA,IACrBU,KAAS,KAAKV,KACd,OACF;AAAK;AAOJ,IAAMY,gBAA0BZ,CAAAA,OAAAA,CAAAA,CACnCA,MAAOA,GAAIa,gBAAgBC;AAMxB,IAAMC,gBAAiBf,CAAAA,OAAiCA,cAAe7B;AAMvE,IAAM6C,YAAahB,CAAAA,OAA6BA,cAAeiB;AC1CtE,IAAMC,uBAAuBA,MAAMC,YAAYC,IAAAA;AAExC,IAAMC,gBAAgBA,CAC3BC,IACAC,IACAC,IAEAC,IACAC,OAAAA;AAEA,MAAIC,KAAmB;AACvB,QAAMC,KAAYV,qBAAAA;AAClB,QAAMW,KAAgBvD,EAAQ,GAAGkD,EAAAA;AACjC,QAAMM,QAASC,CAAAA,OAAAA;AACb,UAAMC,KAAUd,qBAAAA;AAChB,UAAMe,KAAcD,KAAUJ;AAC9B,UAAMM,KAAgBD,MAAeJ;AACrC,UAAMM,KAAUJ,KACZ,IACA,KAAKzD,EAAQ,GAAGsD,KAAYC,KAAgBG,EAAAA,IAAWH,MAAiB;AAC5E,UAAMO,MACHb,KAAKD,OACHjB,WAAWqB,EAAAA,IACRA,GAAOS,IAASA,KAAUN,IAAe,GAAG,GAAGA,EAAAA,IAC/CM,MACNb;AACF,UAAMe,KAAqBH,MAAiBC,OAAY;AAExD,QAAIV,IAAAA;AACFA,MAAAA,GAAQW,IAAUD,IAASE,EAAAA;;AAG7BV,IAAAA,KAAmBU,KAAqB,IAAIlD,EAAK,MAAM2C,MAAAA,CAAAA;EAAQ;AAEjEA,QAAAA;AACA,SAAQC,CAAAA,OAAAA;AACN9C,MAAK0C,EAAAA;AACL,QAAII,IAAAA;AACFD,YAAMC,EAAAA;;EACR;AACD;AChCa,SAAAO,KACdC,IACAC,IAAAA;AAEA,MAAI/B,YAAY8B,EAAAA,GAAAA;AACd,aAASpF,KAAI,GAAGA,KAAIoF,GAAO7B,QAAQvD,MAAAA;AACjC,UAAIqF,GAASD,GAAOpF,EAAAA,GAAIA,IAAGoF,EAAAA,MAAY,OAAA;AACrC;;;aAGKA,IAAAA;AAETD,SAAKxB,OAAO2B,KAAKF,EAAAA,GAAUG,CAAAA,OAAQF,GAASD,GAAOG,EAAAA,GAAMA,IAAKH,EAAAA,CAAAA;;AAEhE,SAAOA;AACT;AAQO,IAAMI,UAAUA,CAAUC,IAAyBC,OACxDD,GAAIE,QAAQD,EAAAA,KAAS;AAQhB,IAAME,SAASA,CAAIC,IAA2BC,OAAmCD,GAAED,OAAOE,EAAAA;AAO1F,IAAMC,OAAOA,CAAIC,IAAYC,IAAyBC,OAAAA;AAC3D,MAAA,CAA2BlD,SAASiD,EAAAA,KAAU3C,YAAY2C,EAAAA,GAAAA;AACxD7C,UAAM+C,UAAUJ,KAAKK,MAAMJ,IAAOC,EAAAA;;AAElCD,IAAAA,GAAMD,KAAKE,EAAAA;;AAEb,SAAOD;AAAK;AAOP,IAAM7B,OAAiBsB,CAAAA,OAAgCrC,MAAMe,KAAKsB,MAAO,CAAA,CAAA;AAQzE,IAAMY,oBAAwBC,CAAAA,OAAAA;AACnC,MAAInD,QAAQmD,EAAAA,GAAAA;AACV,WAAOA;;AAET,SAAA,CAAQtD,SAASsD,EAAAA,KAAUhD,YAAYgD,EAAAA,IAASnC,KAAKmC,EAAAA,IAAS,CAACA,EAAAA;AAAM;AAOhE,IAAMC,eAAgBP,CAAAA,OAAAA,CAAAA,CAA+CA,MAAAA,CAAUA,GAAMzC;AAOrF,IAAMiD,mBAAqCR,CAAAA,OAAgB7B,KAAK,IAAIsC,IAAIT,EAAAA,CAAAA;AAQxE,IAAMU,kBAAkBA,CAACjB,IAAoBkB,IAAcC,OAAAA;AAEhE,QAAMC,QAASC,CAAAA,OAAqBA,KAAKA,GAAGV,MAAAA,QAAiBO,MAAQ,CAAA,CAAA,IAAM;AAC3ExB,OAAKM,IAAKoB,KAAAA;AACV,MAAA,CAAKD,IAAAA;AACFnB,IAAAA,GAAclC,SAAS;;AAC1B;ACtHK,IAAMwD,IAAgB;AACtB,IAAMC,IAAkB;AACxB,IAAMC,IAAiB;AACvB,IAAMC,IAAmB;AACzB,IAAMC,IAAgB;AACtB,IAAMC,IAAiB;AACvB,IAAMC,IAAkB;AACxB,IAAMC,KAAe;AACrB,IAAMC,IAAe;AACrB,IAAMC,IAAW;AACjB,IAAMC,IAAY;AAClB,IAAMC,IAAa;AACnB,IAAMC,IAAY;AAClB,IAAMC,IAAY;AAElB,IAAMC,wBAAyBC,CAAAA,OAAAA;AACpC,QAAMC,KAAWC,OAAOF,MAAO,EAAA;AAC/B,SAAOC,KAAWA,GAAS,CAAA,EAAGE,YAAAA,IAAgBF,GAASG,MAAM,CAAA,IAAK;AAAE;ACH/D,IAAMC,QAAQA,CACnBtC,IACAC,IACAsC,IAEAC,OAAAA;AAEA,MAAIxC,MAAKC,IAAG;AACV,QAAIwC,KAAS;AACbnD,SAAKiD,IAAQG,CAAAA,OAAAA;AACX,YAAMC,KAAkD3C,GAAE0C,EAAAA;AAC1D,YAAME,KAAkD3C,GAAEyC,EAAAA;AAC1D,UAAIC,OAAaC,IAAAA;AACfH,QAAAA,KAAS;;IACX,CAAA;AAEF,WAAOA;EACT;AACA,SAAO;AAAK;AASP,IAAMI,UAAUA,CAAI7C,IAAoBC,OAC7CqC,MAAsBtC,IAAGC,IAAG,CAAC,KAAK,GAAA,CAAA;AAQ7B,IAAM6C,UAAUA,CAAI9C,IAAoBC,OAC7CqC,MAAsBtC,IAAGC,IAAG,CAAC,KAAK,GAAA,CAAA;AAQ7B,IAAM8C,YAAYA,CAAC/C,IAAUC,OAAaqC,MAAYtC,IAAGC,IAAG,CAAC,KAAK,KAAK,KAAK,GAAA,CAAA;ACtB5E,IAAM+C,OAAOA,CAClB/B,OACGH,OACqBG,GAAG+B,KAAK,GAAA,GAAMlC,EAAAA;AAOjC,IAAMmC,mBAAoBC,CAAAA,OAAAA;AAC/B,MAAIC;AACJ,QAAMC,KAASF,KAAU7G,IAAOF;AAChC,QAAMkH,KAAWH,KAAU3G,IAASN;AACpC,SAAO,CACJuD,CAAAA,OAAAA;AACC6D,IAAAA,GAASF,EAAAA;AAGTA,IAAAA,KAAKC,GAAO,MAAM5D,GAAAA,GAAYnC,WAAW6F,EAAAA,IAAWA,GAAAA,IAAYA,EAAAA;EAAQ,GAE1E,MAAMG,GAASF,EAAAA,CAAAA;AAC+C;AAGlE,IAAMG,eACJC,CAAAA,OAAAA;AAEA,QAAMC,KAAuBnG,WAAWkG,EAAAA,IAAkBA,GAAAA,IAAmBA;AAC7E,MAAIrG,SAASsG,EAAAA,GAAuB;AAClC,UAAMC,KAAWD,KAAuBnH,IAAQF;AAChD,UAAMuH,KAAQF,KAAuBjH,IAASN;AAC9C,WAAQ0H,CAAAA,OAAAA;AACN,YAAMC,KAAYH,GAChB,MAAME,GAAAA,GAGNH,EAAAA;AAEF,aAAO,MAAA;AACLE,QAAAA,GAAOE,EAAAA;MAAU;IAClB;EAEL;AAEA,SAAOJ,MAAwBA,GAAqBK;AAAU;AAQzD,IAAMC,WAAWA,CACtBC,IACAhK,OAAAA;AAEA,QAAA,EACEiK,GAAiBC,IACjBC,GAAoBC,IAASC,GAC7BC,IAAQC,GACRC,GAAAA,IACExK,MAAW,CAAE;AACjB,MAAIyK;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AAEJ,QAAMC,KAA2B,SAA3BA,yBAAqC/D,IAAAA;AACzC,QAAI2D,IAAAA;AACFA,MAAAA,GAAAA;;AAEF,QAAID,IAAAA;AACFA,MAAAA,GAAAA;;AAGFI,IAAAA,KAAiBH,KAAyBD,KAA4BE,KAAAA;AAGtEX,IAAAA,GAAmBxD,MAAMuE,MAAMhE,EAAAA;EAChC;AAED,QAAMiE,aACJnK,CAAAA,OAEA2J,MAAgBG,KAAgBH,GAAaG,IAAe9J,EAAAA,IAAQA;AAEtE,QAAMoK,QAAQA,MAAAA;AAEZ,QAAIP,IAAAA;AACFI,MAAAA,GAAyBE,WAAWJ,EAAAA,KAAqBA,EAAAA;;EAC3D;AAGF,QAAMM,KAAc,SAAdA,cAAAA;AAEJ,UAAMnE,KAAuCxC,KAAK4G,SAAAA;AAClD,UAAMC,KAAmB7B,aAAaW,EAAAA;AAEtC,QAAIkB,IAAkB;AACpB,YAAMC,KAAoB9B,aAAaa,EAAAA;AACvC,YAAMkB,KAAoBN,WAAWjE,EAAAA;AACrC,YAAMwE,KAAcD,MAAqBvE;AACzC,YAAMyE,KAAcV,GAAyB7B,KAAK,GAAGsC,EAAAA;AAErD,UAAIb,IAAAA;AACFA,QAAAA,GAAAA;;AAGF,UAAIJ,MAAAA,CAAaO,IAAgB;AAC/BW,QAAAA,GAAAA;AACAX,QAAAA,KAAiB;AACjBH,QAAAA,KAAyBU,GAAiB,MAAOP,KAAAA,MAAiBY;MACpE,OAAO;AACLf,QAAAA,KAAyBU,GAAiBI,EAAAA;AAE1C,YAAIH,MAAAA,CAAsBZ,IAAAA;AACxBA,UAAAA,KAA4BY,GAAkBJ,KAAAA;;MAElD;AAEAN,MAAAA,KAAgBC,KAAkBW;IACpC,OAAA;AACET,MAAAA,GAAyB/D,EAAAA;;EAE5B;AACDmE,EAAAA,GAAYQ,IAAST;AAErB,SAAOC;AAA4C;AC5J9C,IAAMS,iBAAiBA,CAAC1I,IAAU0F,OACvC5E,OAAOwC,UAAUoF,eAAeC,KAAK3I,IAAK0F,EAAAA;AAMrC,IAAMjD,OAAQzC,CAAAA,OAA6BA,KAAMc,OAAO2B,KAAKzC,EAAAA,IAAO,CAAA;AA2BpE,IAAM4I,aAAyBA,CACpCC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,OAAAA;AAEA,QAAMC,KAAsB,CAACN,IAASC,IAASC,IAASC,IAASC,IAASC,EAAAA;AAG1E,OAAA,OAAYN,OAAW,YAAY5I,OAAO4I,EAAAA,MAAAA,CAAaxI,WAAWwI,EAAAA,GAAAA;AAChEA,IAAAA,KAAS,CAAO;;AAGlBvG,OAAK8G,IAAU7G,CAAAA,OAAAA;AAEbD,SAAKC,IAAQ,CAAC8G,IAAG3G,OAAAA;AACf,YAAM4G,KAAY/G,GAAOG,EAAAA;AAIzB,UAAImG,OAAWS,IAAAA;AACb,eAAO;;AAGT,YAAMC,KAAcjJ,QAAQgJ,EAAAA;AAG5B,UAAIA,MAAQ1I,cAAc0I,EAAAA,GAAO;AAC/B,cAAME,KAAMX,GAAOnG,EAAAA;AACnB,YAAI+G,KAAaD;AAGjB,YAAID,MAAAA,CAAgBjJ,QAAQkJ,EAAAA,GAAAA;AAC1BC,UAAAA,KAAQ,CAAA;mBACH,CAAKF,MAAAA,CAAgB3I,cAAc4I,EAAAA,GAAAA;AACxCC,UAAAA,KAAQ,CAAE;;AAIZZ,QAAAA,GAAOnG,EAAAA,IAAkBkG,WAAWa,IAAOH,EAAAA;MAC7C,OAAA;AACET,QAAAA,GAAOnG,EAAAA,IAAkB6G,KAAcD,GAAKjE,MAAAA,IAAUiE;;IACxD,CAAA;EACA,CAAA;AAIJ,SAAOT;AAAa;AAGf,IAAMa,4BAA4BA,CAAwBb,IAAWc,OAC1ErH,KAAKsG,WAAW,CAAA,GAAIC,EAAAA,GAAS,CAACpF,IAAOf,IAAK4G,OAAAA;AACxC,MAAI7F,OAAAA,QAAU+E;WACLc,GAAK5G,EAAAA;aACKe,MAAS7C,cAAc6C,EAAAA,GAAAA;AACxC6F,IAAAA,GAAK5G,EAAAA,IAA4BgH,0BAA0BjG,EAAAA;;AAC7D,CAAA;AAOG,IAAMmG,gBAAiB5J,CAAAA,OAAAA,CAAuByC,KAAKzC,EAAAA,EAAKU;AC9GxD,IAAMmJ,OAAOA,MAAAA;AAAAA;ACSb,IAAMC,YAAYA,CAACpL,IAAaF,IAAauL,OAClDzL,EAAQI,IAAKD,EAAQD,IAAKuL,EAAAA,CAAAA;ACHrB,IAAMC,oBAAqBC,CAAAA,OAChCtG,kBAAkBrD,QAAQ2J,EAAAA,IAAUA,MAAUA,MAAU,IAAIC,MAAM,GAAA,GAAMC,OAAQC,CAAAA,OAAUA,EAAAA,CAAAA;AAQrF,IAAMC,UAAUA,CAACC,IAA6BC,OACnDD,MAAOA,GAAIE,aAAaD,EAAAA;AAQnB,IAAME,UAAUA,CAACH,IAA6BC,OACnDD,MAAOA,GAAII,aAAaH,EAAAA;AAOnB,IAAMI,WAAWA,CACtBL,IACAM,IACAnH,OAAAA;AAEAnB,OAAK0H,kBAAkBY,EAAAA,GAAaL,CAAAA,OAAAA;AAClC,QAAID,IAAAA;AACFA,MAAAA,GAAIO,aAAaN,IAAUpF,OAAO1B,MAAS,EAAA,CAAA;;EAC7C,CAAA;AACA;AAQG,IAAMqH,cAAcA,CAACR,IAA6BM,OAAAA;AACvDtI,OAAK0H,kBAAkBY,EAAAA,GAAaL,CAAAA,OAAaD,MAAOA,GAAIS,gBAAgBR,EAAAA,CAAAA;AAAU;AAGjF,IAAMS,mBAAmBA,CAACV,IAA6BC,OAAAA;AAC5D,QAAMU,KAAajB,kBAAkBK,QAAQC,IAAKC,EAAAA,CAAAA;AAClD,QAAMW,KAAalF,KAAK2E,UAAUL,IAAKC,EAAAA;AACvC,QAAMY,wBAAwBA,CAACC,IAA4BC,OAAAA;AACzD,UAAMC,KAAgB,IAAI1H,IAAIqH,EAAAA;AAC9B3I,SAAK0H,kBAAkBoB,EAAAA,GAAmBhB,CAAAA,OAAAA;AACxCkB,MAAAA,GAAcD,EAAAA,EAAWjB,EAAAA;IAAM,CAAA;AAEjC,WAAO9I,KAAKgK,EAAAA,EAAeC,KAAK,GAAA;EAAI;AAGtC,SAAO;IACLC,GAAUC,CAAAA,OAA4BP,GAAWC,sBAAsBM,IAAc,QAAA,CAAA;IACrFC,GAAOC,CAAAA,OAAyBT,GAAWC,sBAAsBQ,IAAW,KAAA,CAAA;IAC5EC,GAAOC,CAAAA,OAAAA;AACL,YAAMC,KAAW9B,kBAAkB6B,EAAAA;AACnC,aAAOC,GAASC,OACd,CAACC,IAAS5B,OAAU4B,MAAWf,GAAWgB,SAAS7B,EAAAA,GACnD0B,GAASpL,SAAS,CAAA;IACnB;;AAEJ;AASI,IAAMwL,kBAAkBA,CAC7B5B,IACAC,IACA9G,OAAAA;AAEAuH,mBAAiBV,IAAKC,EAAAA,EAAUiB,EAAQ/H,EAAAA;AACxC,SAAOuC,KAAKmG,cAAc7B,IAAKC,IAAU9G,EAAAA;AAAM;AAS1C,IAAM0I,eAAeA,CAC1B7B,IACAC,IACA9G,OAAAA;AAEAuH,mBAAiBV,IAAKC,EAAAA,EAAUmB,EAAKjI,EAAAA;AACrC,SAAOuC,KAAKkG,iBAAiB5B,IAAKC,IAAU9G,EAAAA;AAAM;AAG7C,IAAM2I,qBAAqBA,CAChC9B,IACAC,IACA9G,IACA4I,QACIA,KAAMF,eAAeD,iBAAiB5B,IAAKC,IAAU9G,EAAAA;AASpD,IAAM6I,eAAeA,CAC1BhC,IACAC,IACA9G,OACYuH,iBAAiBV,IAAKC,EAAAA,EAAUqB,EAAKnI,EAAAA;ACzHnD,IAAM8I,0BAA2BjC,CAAAA,OAAgCU,iBAAiBV,IAAK,OAAA;AAehF,IAAMkC,cAAcA,CAAClC,IAA6BmC,OAAAA;AACvDF,0BAAwBjC,EAAAA,EAAKkB,EAAQiB,EAAAA;AAAU;AAS1C,IAAMC,WAAWA,CAACpC,IAA6BmC,OAAAA;AACpDF,0BAAwBjC,EAAAA,EAAKoB,EAAKe,EAAAA;AAClC,SAAOzG,KAAKwG,aAAalC,IAAKmC,EAAAA;AAAU;ACvBnC,IAAME,OAAOA,CAACC,IAAkBtC,OAAAA;AACrC,QAAMuC,KAAUvC,KAAMtJ,UAAUsJ,EAAAA,KAAQA,KAAMlM;AAC9C,SAAOyO,KAAUvL,KAAKuL,GAAQC,iBAAiBF,EAAAA,CAAAA,IAAa,CAAA;AAAE;AAQzD,IAAMG,YAAYA,CAACH,IAAkBtC,OAAAA;AAC1C,QAAMuC,KAAUvC,KAAMtJ,UAAUsJ,EAAAA,KAAQA,KAAMlM;AAC9C,SAAOyO,MAAWA,GAAQG,cAAcJ,EAAAA;AAAS;AAQ5C,IAAMK,KAAKA,CAAC3C,IAAwBsC,OACzC5L,UAAUsJ,EAAAA,KAAQA,GAAI4C,QAAQN,EAAAA;AAEzB,IAAMO,gBAAiB7C,CAAAA,OAA2B2C,GAAG3C,IAAK,MAAA;AAsB1D,IAAM8C,WAAY9C,CAAAA,OACvBA,KAAMhJ,KAAKgJ,GAAI+C,UAAAA,IAAc,CAAA;AAMxB,IAAMC,SAAUhD,CAAAA,OAA8CA,MAAOA,GAAIiD;AAQzE,IAAMC,UAAUA,CAAClD,IAAwBsC,OAC9C5L,UAAUsJ,EAAAA,KAAQA,GAAIkD,QAAQZ,EAAAA;AAMzB,IAAMa,oBAAqBC,CAAAA,OAAmB,SAAkBC;AAQhE,IAAMC,cAAcA,CACzBtD,IACAuD,IACAC,OAAAA;AAEA,QAAMC,KAAyBP,QAAQlD,IAAKuD,EAAAA;AAC5C,QAAMG,KAAyB1D,MAAOyC,UAAUe,IAAsBC,EAAAA;AACtE,QAAME,KACJT,QAAQQ,IAAwBH,EAAAA,MAA0BE;AAE5D,SAAOA,MAA0BC,KAC7BD,OAA2BzD,MACzB0D,OAA2B1D,MAC1B2D,MACCT,QAAQA,QAAQlD,IAAKwD,EAAAA,GAAuBD,EAAAA,MAC1CE,KACN;AAAK;AC3FJ,IAAMG,iBAAkBC,CAAAA,OAAAA;AAC7B7L,OAAKkB,kBAAkB2K,EAAAA,GAASC,CAAAA,OAAAA;AAC9B,UAAMC,KAAYf,OAAOc,EAAAA;AACzB,QAAIA,MAAQC,IAAAA;AACVA,MAAAA,GAAUC,YAAYF,EAAAA;;EACxB,CAAA;AACA;AASG,IAAMG,iBAAiBA,CAACH,IAAyBI,OACtDxI,KACEkI,gBACAE,MACEI,MACAlM,KAAKkB,kBAAkBgL,EAAAA,GAAYC,CAAAA,OAAAA;AACjC,MAAIA,IAAAA;AACFL,IAAAA,GAAKM,YAAYD,EAAAA;;AACnB,CAAA,CAAA;AC9BR,IAAIE;AAEG,IAAMC,uBAAuBA,MAAMD;AACnC,IAAME,uBAAwBC,CAAAA,OAAAA;AACnCH,MAAoBG;AAAoB;ACGnC,IAAMC,YAAaC,CAAAA,OAAAA;AACxB,QAAMC,KAAM7Q,SAAS8Q,cAAc,KAAA;AACnCvE,WAASsE,IAAK,SAASD,EAAAA;AACvB,SAAOC;AAAG;AAOL,IAAME,YAAaC,CAAAA,OAAAA;AACxB,QAAMC,KAAaN,UAAAA;AACnB,QAAMO,KAAqBV,qBAAAA;AAC3B,QAAMW,KAAcH,GAAKI,KAAAA;AACzBH,EAAAA,GAAWI,YAAYH,KAElBA,GAA2BI,WAAWH,EAAAA,IACvCA;AAEJ,SAAOjN,KAAK8K,SAASiC,EAAAA,GAAc/E,CAAAA,OAAQ4D,eAAe5D,EAAAA,CAAAA;AAAK;ACdjE,IAAMqF,YAAYA,CAACC,IAAoClK,OAErDkK,GAAcC,iBAAiBnK,EAAAA,KAASkK,GAAclK,EAAAA,KAAgB;AAExE,IAAMoK,oBAAqB/F,CAAAA,OAAAA;AACzB,QAAMgG,KAAShG,MAAU;AACzB,SAAOiG,SAASD,EAAAA,IAAUA,KAAS;AAAC;AAGtC,IAAME,sBAAuBxM,CAAAA,OAA2BqM,kBAAkBI,WAAWzM,MAAS,EAAA,CAAA;AAEvF,IAAM0M,iBAAkB1M,CAAAA,OAAkBlF,KAAKK,MAAM6E,KAAQ,GAAA,IAAS;AAKtE,IAAM2M,gBAAiBrG,CAAAA,OAAmB,GAAGoG,eAAeL,kBAAkB/F,EAAAA,CAAAA,CAAAA;AAErE,SAAAsG,UACd/F,IACAgG,IAAAA;AAGAhG,EAAAA,MACEgG,MACAhO,KAAKgO,IAAQ,CAACC,IAA4B7Q,OAAAA;AACxC,QAAA;AACE,YAAM8Q,KAAWlG,GAAImG;AACrB,YAAMhN,KACJxD,OAAOsQ,EAAAA,KAAanQ,UAAUmQ,EAAAA,IAC1B,KACArQ,SAASqQ,EAAAA,IACPH,cAAcG,EAAAA,IACdA;AAER,UAAI7Q,GAAKoD,QAAQ,IAAA,MAAU,GAAA;AACzB0N,QAAAA,GAASE,YAAYhR,IAAM+D,EAAAA;;AAG3B+M,QAAAA,GAAS9Q,EAAAA,IAAe+D;;IAG3B,SAACkN,IAAAA;IAAM;EAAA,CAAA;AAEd;SAYgBC,UACdtG,IACAgG,IACAO,IAAAA;AAEA,QAAMC,KAAiB3Q,SAASmQ,EAAAA;AAChC,MAAIS,KAAwCD,KAAiB,KAAK,CAAE;AAEpE,MAAIxG,IAAK;AACP,UAAMsF,KAAgBvR,EAAI2S,iBAAiB1G,IAAKuG,EAAAA,KAAcvG,GAAImG;AAClEM,IAAAA,KAAkBD,KACdnB,UAAUC,IAAeU,EAAAA,IACzBhP,KAAKgP,EAAAA,EAAQvE,OAAO,CAACtG,IAAQ/C,OAAAA;AAC3B+C,MAAAA,GAAO/C,EAAAA,IAAOiN,UAAUC,IAAelN,EAAAA;AACvC,aAAO+C;IAAM,GACZsL,EAAAA;EACT;AACA,SAAOA;AACT;AAQO,IAAME,qBAAqBA,CAChC3G,IACA4G,IACAC,OAAAA;AAEA,QAAMC,KAAcF,KAAiB,GAAGA,EAAAA,MAAoB;AAC5D,QAAMG,KAAcF,KAAiB,IAAIA,EAAAA,KAAmB;AAC5D,QAAMG,KAAM,GAAGF,EAAAA,MAAiBC,EAAAA;AAChC,QAAME,KAAQ,GAAGH,EAAAA,QAAmBC,EAAAA;AACpC,QAAMG,KAAS,GAAGJ,EAAAA,SAAoBC,EAAAA;AACtC,QAAMI,KAAO,GAAGL,EAAAA,OAAkBC,EAAAA;AAClC,QAAM5L,KAASmL,UAAUtG,IAAK,CAACgH,IAAKC,IAAOC,IAAQC,EAAAA,CAAAA;AACnD,SAAO;IACLC,GAAGzB,oBAAoBxK,GAAO6L,EAAAA,CAAAA;IAC9BK,GAAG1B,oBAAoBxK,GAAO8L,EAAAA,CAAAA;IAC9BtO,GAAGgN,oBAAoBxK,GAAO+L,EAAAA,CAAAA;IAC9BI,GAAG3B,oBAAoBxK,GAAOgM,EAAAA,CAAAA;;AAC/B;AAGI,IAAMI,4BAA4BA,CACvCpO,IACAqO,OAEA,YACEtR,SAASiD,EAAAA,IAAS,IAAIA,GAAMsO,CAAAA,IAAKtO,GAAMuO,CAAAA,MAAO,GAAGF,KAAe,MAAM,GAAA,IAAOrO,EAAAA,GAAAA;AC9GjF,IAAMwO,uBAAwB3H,CAAAA,OAAAA,CAAAA,EACzBA,GAAI4H,eAAe5H,GAAI6H,gBAAgB7H,GAAI8H,eAAAA,EAAiB1R;AACjE,IAAM2R,IAAc;EAClBC,GAAG;EACHC,GAAG;;AAGL,IAAMC,4BAA4BA,CAChCC,IACAnI,OAEAA,KACI;EAEEgI,GAAIhI,GAAY,GAAGmI,EAAAA,OAAAA;EAEnBF,GAAIjI,GAAY,GAAGmI,EAAAA,QAAAA;IAErBJ;AAKC,IAAMK,gBAAiBC,CAAAA,OAC5BH,0BAA0B,SAASG,MAAatU,CAAAA;AAM3C,IAAMuU,IAAgB5M,KAAKwM,2BAAwC,QAAA;AAQnE,IAAMK,IAAgB7M,KAAKwM,2BAAwC,QAAA;AAQnE,IAAMM,IAAgB9M,KAAKwM,2BAAwC,QAAA;AAQnE,IAAMO,oBAAqBzI,CAAAA,OAAAA;AAChC,QAAM0I,KAAW9C,WAAWU,UAAUtG,IAAK3F,CAAAA,CAAAA,KAAc;AACzD,QAAMsO,KAAY/C,WAAWU,UAAUtG,IAAK1F,CAAAA,CAAAA,KAAe;AAC3D,SAAO;IACL0N,GAAGU,KAAWrU,EAAUqU,EAAAA;IACxBT,GAAGU,KAAYtU,EAAUsU,EAAAA;;AAC1B;AAOI,IAAMC,wBAAyB5I,CAAAA,OAA8BA,GAAI4I,sBAAAA;AAMjE,IAAMC,gBAAiB7I,CAAAA,OAAAA,CAAAA,CAC1BA,MAAO2H,qBAAqB3H,EAAAA;AAKzB,IAAM8I,uBAAwBC,CAAAA,OAAAA,CAAAA,EAChCA,OAASA,GAAKzO,CAAAA,KAAcyO,GAAK1O,CAAAA;AAQ/B,IAAM2O,kBAAkBA,CAC7BC,IACAC,OAAAA;AAEA,QAAMC,KAAoBL,qBAAqBG,EAAAA;AAC/C,QAAMG,KAAoBN,qBAAqBI,EAAAA;AAC/C,SAAA,CAAQE,MAAqBD;AAAiB;AC/EzC,IAAME,sBAAsBA,CACjC9K,IACA+K,IACAC,IACAC,OAAAA;AAEAxR,OAAK0H,kBAAkB4J,EAAAA,GAAcG,CAAAA,OAAAA;AACnC,QAAIlL,IAAAA;AACFA,MAAAA,GAAO8K,oBAAoBI,IAAWF,IAA2BC,EAAAA;;EACnE,CAAA;AACA;AAUG,IAAME,mBAAmBA,CAC9BnL,IACA+K,IACAC,IACA9W,OAAAA;AACgB,MAAAkX;AAChB,QAAMC,MAAOD,KAAIlX,MAAWA,GAAQoX,MAAQ,OAAAF,KAAK;AACjD,QAAMH,KAAW/W,MAAWA,GAAQqX,KAAa;AACjD,QAAMC,KAAQtX,MAAWA,GAAQuX,KAAU;AAC3C,QAAMC,KAAyC;IAC7CL,SAAAA;IACAJ,SAAAA;;AAGF,SAAO9N,KACLnC,iBACAmG,kBAAkB4J,EAAAA,EAAYY,IAAKT,CAAAA,OAAAA;AACjC,UAAMU,KACJJ,KACKK,CAAAA,OAAAA;AACCf,0BAAoB9K,IAAQkL,IAAWU,IAAeX,EAAAA;AACtD,UAAID,IAAAA;AACFA,QAAAA,GAASa,EAAAA;;IACX,IAEFb;AAGN,QAAIhL,IAAAA;AACFA,MAAAA,GAAOmL,iBAAiBD,IAAWU,IAAeF,EAAAA;;AAGpD,WAAOvO,KAAK2N,qBAAqB9K,IAAQkL,IAAWU,IAAeX,EAAAA;EAAQ,CAAA,CAAA;AAE9E;AAyBI,IAAMa,kBAAmBD,CAAAA,OAAqBA,GAAIC,gBAAAA;AAMlD,IAAMC,iBAAkBF,CAAAA,OAAqBA,GAAIE,eAAAA;AAMjD,IAAMC,iBAAkBH,CAAAA,OAC5BC,gBAAgBD,EAAAA,KAAuBE,eAAeF,EAAAA;ACtGlD,IAAMI,kBAAkBA,CAC7BxK,IACAyK,OAAAA;AAEA,QAAA,EAAMhD,GAAEA,IAACC,GAAEA,GAAAA,IAAM9R,SAAS6U,EAAAA,IAAY;IAAEhD,GAAGgD;IAAU/C,GAAG+C;MAAaA,MAAY,CAAE;AAEnF7U,WAAS6R,EAAAA,MAAOzH,GAAI0K,aAAajD;AAEjC7R,WAAS8R,EAAAA,MAAO1H,GAAI2K,YAAYjD;AAAE;AAQ7B,IAAMkD,mBAAoB5K,CAAAA,QAAoC;EACnEyH,GAAGzH,GAAI0K;EACPhD,GAAG1H,GAAI2K;;AAMF,IAAME,2BAA2BA,OAA0B;EAChEC,GAAQ;IAAErD,GAAG;IAAGC,GAAG;;EACnBqD,GAAM;IAAEtD,GAAG;IAAGC,GAAG;;;AAWZ,IAAMsD,4BAA4BA,CACvCC,IACAC,OAAAA;AAEA,QAAA,EAAMC,GAAEL,IAAMM,GAAEL,GAAAA,IAASE;AACzB,QAAA,EAAMjD,GAAEA,IAACC,GAAEA,GAAAA,IAAMiD;AACjB,QAAMG,eAAeA,CAACC,IAAeC,IAAaC,OAAAA;AAChD,QAAIC,KAAWhX,EAAS6W,EAAAA,IAASE;AACjC,QAAIE,KAASjX,EAAS8W,EAAAA,IAAOC;AAE7B,QAAIC,OAAaC,IAAQ;AACvB,YAAMC,KAAWpX,EAAQ+W,EAAAA;AACzB,YAAMM,KAASrX,EAAQgX,EAAAA;AAEvBG,MAAAA,KAASC,KAAWC,KAAS,IAAIF;AACjCD,MAAAA,KAAWE,KAAWC,KAAS,IAAIH;IACrC;AAGAA,IAAAA,KAAWA,OAAaC,KAAS,IAAID;AAErC,WAAO,CAACA,KAAW,GAAGC,KAAS,CAAA;EAAW;AAG5C,QAAA,CAAOG,IAAQC,EAAAA,IAAQT,aAAaP,GAAOrD,GAAGsD,GAAKtD,GAAGO,EAAAA;AACtD,QAAA,CAAO+D,IAAQC,EAAAA,IAAQX,aAAaP,GAAOpD,GAAGqD,GAAKrD,GAAGO,EAAAA;AAEtD,SAAO;IACL6C,GAAQ;MACNrD,GAAGoE;MACHnE,GAAGqE;;IAELhB,GAAM;MACJtD,GAAGqE;MACHpE,GAAGsE;;;AAEN;AAUI,IAAMC,sCAAsCA,CAAAA,EACjDnB,GAAAA,IACAC,GAAAA,GAAAA,MAAAA;AAEA,QAAMmB,UAAUA,CAACZ,IAAeC,OAAgBD,OAAU,KAAKA,MAASC;AAExE,SAAO;IACL9D,GAAGyE,QAAQpB,GAAOrD,GAAGsD,GAAKtD,CAAAA;IAC1BC,GAAGwE,QAAQpB,GAAOpD,GAAGqD,GAAKrD,CAAAA;;AAC3B;AAQI,IAAMyE,8BAA8BA,CAAAA,EACvCrB,GAAAA,IAAQC,GAAAA,GAAAA,GACVqB,OAAAA;AAEA,QAAMF,UAAUA,CAACZ,IAAeC,IAAac,OAC3C7M,UAAU,GAAG,IAAI8L,KAAQe,OAAYf,KAAQC,OAAQ,CAAA;AAEvD,SAAO;IACL9D,GAAGyE,QAAQpB,GAAOrD,GAAGsD,GAAKtD,GAAG2E,GAAc3E,CAAAA;IAC3CC,GAAGwE,QAAQpB,GAAOpD,GAAGqD,GAAKrD,GAAG0E,GAAc1E,CAAAA;;AAC5C;AC5HI,IAAM4E,eAAgBC,CAAAA,OAAAA;AAC3B,MAAIA,MAAYA,GAAwBC,OAAAA;AACrCD,IAAAA,GAAwBC,MAAM;MAAEC,eAAe;;;AAClD;ACsCF,IAAMC,iBAAiBA,CACrBxU,IACAqR,OAAAA;AAEAvR,OAAKkB,kBAAkBqQ,EAAAA,GAAWrR,EAAAA;AAAS;AAGtC,IAAMyU,yBACXC,CAAAA,OAAAA;AAEA,QAAMC,KAAS,oBAAIC;AAEnB,QAAMC,cAAsCA,CAAC3X,IAAMmU,OAAAA;AACjD,QAAInU,IAAM;AACR,YAAM4X,KAAWH,GAAOI,IAAI7X,EAAAA;AAC5BsX,qBAAgBQ,CAAAA,OAAAA;AACd,YAAIF,IAAAA;AACFA,UAAAA,GAASE,KAAe,WAAW,OAAA,EAASA,EAAAA;;MAC9C,GACC3D,EAAAA;IACL,OAAO;AACLsD,MAAAA,GAAOM,QAASH,CAAAA,OAAAA;AACdA,QAAAA,GAAS5Q,MAAAA;MAAO,CAAA;AAElByQ,MAAAA,GAAOzQ,MAAAA;IACT;EAAA;AAGF,QAAMgR,WAAgCA,CACpCC,IACAC,OAAAA;AAKA,QAAIzX,SAASwX,EAAAA,GAAuB;AAClC,YAAML,KAAWH,GAAOI,IAAII,EAAAA,KAAyB,oBAAI/T;AACzDuT,MAAAA,GAAOU,IAAIF,IAAsBL,EAAAA;AAEjCN,qBACGQ,CAAAA,OAAAA;AACC,YAAInX,WAAWmX,EAAAA,GAAAA;AACbF,UAAAA,GAASjL,IAAImL,EAAAA;;MACf,GAEFI,EAAAA;AAGF,aAAO5R,KACLqR,aACAM,IACAC,EAAAA;IAEJ;AACA,QAAIxX,UAAUwX,EAAAA,KAAmBA,IAAAA;AAC/BP,kBAAAA;;AAGF,UAAMS,KAAoBrV,KAAKkV,EAAAA;AAC/B,UAAMI,KAAyB,CAAA;AAC/BzV,SAAKwV,IAAoBpV,CAAAA,OAAAA;AACvB,YAAMsV,KAAiBL,GAAmDjV,EAAAA;AAC1E,UAAIsV,IAAAA;AACF9U,aAAK6U,IAAQL,SAAShV,IAAKsV,EAAAA,CAAAA;;IAC7B,CAAA;AAGF,WAAOhS,KAAKnC,iBAAiBkU,EAAAA;EAAO;AAGtC,QAAME,eAAwCA,CAACvY,IAAMoE,OAAAA;AACnDxB,SAAKhB,KAAK6V,GAAOI,IAAI7X,EAAAA,CAAAA,GAASwY,CAAAA,OAAAA;AAC5B,UAAIpU,MAAAA,CAASJ,aAAaI,EAAAA,GAAAA;AACvBoU,QAAAA,GAA6D3U,MAAM,GAAGO,EAAAA;;AAEtEoU,QAAAA,GAAAA;;IACH,CAAA;EACA;AAGJR,WAASR,MAAyB,CAAA,CAAA;AAElC,SAAO,CAACQ,UAAUL,aAAaY,YAAAA;AAAa;ACRvC,IAAME,IAA8C,CAAE;AAGtD,IAAMC,IAA2E,CAAE;AAOnF,IAAMC,aAAcC,CAAAA,OAAAA;AACzBhW,OAAKgW,IAAcC,CAAAA,OACjBjW,KAAKiW,IAAQ,CAAClP,IAAG3G,OAAAA;AACfyV,MAAczV,EAAAA,IAAO6V,GAAO7V,EAAAA;EAAI,CAAA,CAAA;AAEnC;AAGI,IAAM8V,gCAAgCA,CAC3CD,IACAE,IACAC,OAMAjW,KAAK8V,EAAAA,EAAQ/D,IAAK9U,CAAAA,OAAAA;AAChB,QAAA,EAAQiZ,QAAQC,IAAUC,UAAUC,GAAAA,IAClCP,GACA7Y,EAAAA;AACF,QAAA,CAAOqZ,IAAab,IAAOc,EAAAA,IAAqBN,MAAgB,CAAA;AAChE,QAAMO,KAAOP,KAAeI,KAAaF;AACzC,MAAIK,IAAM;AACR,UAAMJ,KAAWH,KAEXO,GAQAF,IAAcb,IAAQO,EAAAA,IAEtBQ,GAIAR,EAAAA;AACN,YAASO,MAAqBZ,GAA6B1Y,EAAAA,IAAQmZ;EACrE;AAAA,CAAA;AAGG,IAAMK,gCACXC,CAAAA,OAEAf,EAA4Be,EAAAA;ACnKvB,IAAMC,IAAoC;ACVjD,IAAMC,IAAsB;AAGrB,IAAMC,IAAuB;AAC7B,IAAMC,IAAsC,GAAGD,CAAAA;AAG/C,IAAME,IAA0B,GAAGH,CAAAA;AAGnC,IAAMI,IAAsB;AAG5B,IAAMC,IAAwB,GAAGL,CAAAA;AAGjC,IAAMM,IAAoBN;AAC1B,IAAMO,IAAsB;AAG5B,IAAMC,IAAwB,GAAGR,CAAAA;AACjC,IAAMS,IAAmCrV;AACzC,IAAMsV,IAAmCrV;AACzC,IAAMsV,IAA2B;AACjC,IAAMC,IAA6B;AACnC,IAAMC,IAA6B;AACnC,IAAMC,IAAmC;AACzC,IAAMC,IAA6B;AAGnC,IAAMC,IAAuB,GAAGhB,CAAAA;AAGhC,IAAMiB,KAAuB,GAAGjB,CAAAA;AAGhC,IAAMkB,KAAwB;AAC9B,IAAMC,KAA8B,GAAGD,EAAAA;AACvC,IAAME,KAAgC,GAAGF,EAAAA;AACzC,IAAMG,KAAsC,GAAGD,EAAAA;AAC/C,IAAME,KAAoC,GAAGF,EAAAA;AAC7C,IAAMG,KAAyC,GAAGD,EAAAA;AAGlD,IAAME,KAA2B;AAGjC,IAAMC,KAA8B;AACpC,IAAMC,KAAqB;AAC3B,IAAMC,KAAwB,GAAGD,EAAAA;AACjC,IAAME,KAA+B,GAAGF,EAAAA;AACxC,IAAMG,KAA6B,GAAGH,EAAAA;AACtC,IAAMI,KAA0B,GAAGJ,EAAAA;AACnC,IAAMK,KAA2B,GAAGL,EAAAA;AACpC,IAAMM,KAA4B,GAAGN,EAAAA;AACrC,IAAMO,KAA+B,GAAGP,EAAAA;AAExC,IAAMQ,KAAgC,GAAGR,EAAAA;AACzC,IAAMS,KAA6B,GAAGT,EAAAA;AACtC,IAAMU,KAA6B,GAAGV,EAAAA;AACtC,IAAMW,KAAmC,GAAGD,EAAAA;AAC5C,IAAME,KAA0B,GAAGZ,EAAAA;AACnC,IAAMa,KAAqC,GAAGT,EAAAA;AAC9C,IAAMU,KAAsC,GAAGT,EAAAA;ACzC/C,IAAMU,KAAyB;AAEzBC,IAAAA,KAAqC,wBAAQ;EACxDD,CAACA,EAAAA,GAAyB;IACxBnD,QACEA,MACA,CACEqD,IACAC,IACAC,OAAAA;AAEA,YAAMC,KAAe;AACrB,YAAMC,KAAkB;AACxB,YAAMC,KAA0BlN,UAC9B,eAAewL,EAAAA,2BAA4DA,EAAAA,iBAAkDC,EAAAA,6BAAmED,EAAAA,iBAAkDC,EAAAA,wDAAAA;AAEpP,YAAM0B,KAA8BD,GAAwB,CAAA;AAC5D,YAAME,KAAgBD,GAA4BE;AAClD,YAAMC,KAAgBH,GAA4BI;AAClD,YAAMC,KAAqBF,MAAAA,OAAAA,SAAAA,GAAeC;AAE1C,UAAIE,KAAYhK,EAAc0J,EAAAA;AAC9B,UAAIO,KAAWD;AACf,UAAIE,KAAU;AACd,UAAIC;AAEJ,YAAMC,QAAQA,MAAAA;AACZlI,wBAAgB2H,IAAeN,EAAAA;AAC/BrH,wBAAgByH,IAAeJ,EAAAA;MAAa;AAE9C,YAAMc,YAAaC,CAAAA,OAAAA;AACjBH,QAAAA,KAAQ;AACR,YAAID,IAAS;AACXF,UAAAA,KAAYC;AACZZ,UAAAA,GAAsBiB,OAAW,IAAA;QACnC;MAAA;AAEF,YAAMC,WAAYC,CAAAA,OAAAA;AAChBP,QAAAA,KAAWjK,EAAc0J,EAAAA;AACzBQ,QAAAA,KAAAA,CAAWM,MAAAA,CAAgBvX,QAAQgX,IAAUD,EAAAA;AAE7C,YAAIQ,IAAa;AACfzI,0BAAgByI,EAAAA;AAEhB,cAAIN,MAAAA,CAAYC,IAAO;AACrB9d,cAAK8d,EAAAA;AACLA,YAAAA,KAAQ5d,EAAK8d,SAAAA;UACf;QACF,OAAA;AACEA,oBAAUG,OAAgB,KAAA;;AAG5BJ,cAAAA;MAAO;AAET,YAAMK,KAAa,CACjB9O,eAAeyN,IAAiBK,EAAAA,GAChCrI,iBAAiByI,IAAeL,IAAiBe,QAAAA,GACjDnJ,iBAAiBuI,IAAeH,IAAiBe,QAAAA,CAAAA;AAGnDzQ,eAASsP,IAAiBtB,EAAAA;AAG1BrK,gBAAUsM,IAAoB;QAC5BhY,CAACA,CAAAA,GAAWwX;QACZvX,CAACA,CAAAA,GAAYuX;;AAGfhd,QAAK6d,KAAAA;AAEL,aAAO,CAACd,KAAsBlW,KAAKmX,UAAU,KAAA,IAASH,OAAOK,EAAAA;IAAW;;IApE9B;ACb3C,IAAMC,kCAAkCA,CAACC,IAAsCC,OAAAA;AACpF,QAAA,EAAMC,GAAEC,GAAAA,IAA8BF;AACtC,QAAA,CAAOG,IAAoCC,EAAAA,IAAuCL,GAChF,8BAAA;AAGF,SAAO,CACLI,MACED,GAA0B3L,KAC1B2L,GAA0B1L,GAC5B4L,EAAAA;AACQ;AAGL,IAAMC,oBAAqBC,CAAAA,OAAqBA,GAAShb,QAAQ+B,CAAAA,MAAgB;AAEjF,IAAMkZ,kCACXC,CAAAA,OACkBA,GAAiBC,QAAQ,GAAGpZ,CAAAA,KAAe,EAAA;AAExD,IAAMqZ,kCAAkCA,CAC7CC,IACAC,OAAAA;AAEA,MAAID,OAAa,QAAA;AACf,WAAOC,KAAcrZ,IAAYD;;AAGnC,QAAMuZ,KAAgBF,MAAYrZ;AAClC,SAAO,CAACA,GAAWC,GAAWF,CAAAA,EAAYoH,SAASoS,EAAAA,IAC9CA,KACDvZ;AAAS;AAGR,IAAMwZ,0BAA0BA,CACrCzH,IACAuH,OAAAA;AAEA,QAAA,EAAMG,WAAEA,IAASC,WAAEA,GAAAA,IAAc5N,UAAUiG,IAAS,CAACpS,IAAcC,CAAAA,CAAAA;AAEnE,SAAO;IACLqN,GAAGmM,gCAAgCK,IAAWH,GAAYrM,CAAAA;IAC1DC,GAAGkM,gCAAgCM,IAAWJ,GAAYpM,CAAAA;;AAC3D;ACvBI,IAAMyM,KAA6B;AC9BnC,IAAMC,KAA8B;AAE9BC,IAAAA,KAAoC,wBAAQ;EACvDD,CAACA,EAAAA,GAA8B;IAC7BE,QACEA,MACA,CACEC,IACAC,IACAC,IACAC,OAAAA;AASA,UAAIC,KAAU;AACd,UAAIC,KAAqBC;AACzB,YAAMC,KAAiB;AACvB,YAAMC,KAAgB;AACtB,YAAA,CAAOC,IAA0BC,EAAAA,IAC/BC,iBAAiBJ,EAAAA;AACnB,YAAMK,KAAmBC,KAAKC,KAAKb,EAAAA;AACnC,YAAMc,KAA6Bb,KAAeU;AAClD,YAAMI,KAAiCD,KAA6B;AACpE,YAAME,SAAUC,CAAAA,OAAc,KAAK,IAAIA,OAAM,IAAIA;AACjD,YAAMC,yBAAyBA,CAACC,IAAcC,OAC5CC,cAAcF,IAAMC,IAAIb,IAAeR,IAAoBiB,MAAAA;AAC7D,YAAMM,uBAAuBA,CAACC,IAAoBC,OAChDH,cACEE,IACAvB,KAAec,IACfR,KAAiBkB,IACjB,CAACC,IAAUC,IAAGC,OAAAA;AACZ5B,QAAAA,GAAmB0B,EAAAA;AAEnB,YAAIE,IAAAA;AACFvB,UAAAA,KAAqBc,uBAAuBO,IAAUzB,EAAAA;;MACxD,CAAA;AAGN,YAAM4B,KAAqBP,cACzB,GACAP,IACAP,IACA,CAACsB,IAAwBH,IAAGI,OAAAA;AAC1B/B,QAAAA,GAAmB8B,EAAAA;AAEnB,YAAIC,IAAyB;AAC3B5B,UAAAA,GAAuBC,EAAAA;AAEvB,cAAA,CAAKA,IAAS;AACZ,kBAAM4B,KAA0B/B,KAAe6B;AAC/C,kBAAMG,KACJpB,KAAKC,KAAKkB,KAA0BhB,EAAAA,MACpCJ;AAEF,gBAAIqB,IAAAA;AACFxB,cAAAA,GAAyB,MAAA;AACvB,sBAAMyB,KACJF,KAA0BjB;AAC5B,sBAAMoB,KACJtB,KAAKC,KAAKoB,EAAAA,MAAmCtB;AAE/CP,gBAAAA,KAAqB8B,KACjBZ,qBACEO,IACAjB,KAAKuB,IAAIF,EAAAA,IAAiChC,EAAAA,IAE5CiB,uBAAuBW,IAAwB7B,EAAAA;cAAa,CAAA;;UAGtE;QACF;MAAA,GAEFgB,MAAAA;AAGF,aAAQoB,CAAAA,OAAAA;AACNjC,QAAAA,KAAU;AAEV,YAAIiC,IAAAA;AACFR,UAAAA,GAAAA;;AAGFnB,QAAAA,GAAAA;AACAL,QAAAA,GAAAA;MAAoB;IACrB;;IAxFwC;AC2EjD,IAAMiC,eAAgBC,CAAAA,OACpBC,KAAKC,UAAUF,IAAO,CAACZ,IAAGe,OAAAA;AACxB,MAAIC,WAAWD,EAAAA,GAAAA;AACb,UAAM;;AAER,SAAOA;AAAG,CAAA;AAGd,IAAME,gBAAgBA,CAAIC,IAAUC,OAClCD,KACI,GAAGC,EAAAA,GACAC,MAAM,GAAA,EACNC,OAAO,CAACC,IAAGC,OAAUD,MAAKE,eAAeF,IAAGC,EAAAA,IAAQD,GAAEC,EAAAA,IAAAA,QAAoBL,EAAAA,IAAAA;AAoI5E,IAAMO,KAAkC;EAC7CC,iBAAiB;EACjBC,8BAA8B;EAC9BC,QAAQ;IACNC,eAAe,CAAC,CAAC,OAAO,MAAA,CAAA;IACxBC,UAAU,CAAC,GAAG,EAAA;IACdC,YAAY;IACZC,gBAAgB;;EAElBC,UAAU;IACR1C,GAAG;IACH2C,GAAG;;EAELC,YAAY;IACVC,OAAO;IACPC,YAAY;IACZC,UAAU;IACVC,eAAe;IACfC,iBAAiB;IACjBC,YAAY;IACZC,aAAa;IACbC,UAAU,CAAC,SAAS,SAAS,KAAA;;;AAI1B,IAAMC,iBAAiBA,CAAIC,IAAgBC,OAAAA;AAChD,QAAMC,KAAuB,CAAE;AAC/B,QAAMC,KAAcC,OAAOC,KAAKJ,EAAAA,GAAaI,KAAKL,EAAAA,CAAAA;AAIlDM,OAAKH,IAAcI,CAAAA,OAAAA;AACjB,UAAMC,KAAkBR,GAAYO,EAAAA;AACpC,UAAME,KAAiBR,GAAWM,EAAAA;AAElC,QAAIG,SAASF,EAAAA,KAAoBE,SAASD,EAAAA,GAAiB;AACzDE,iBAAYT,GAAKK,EAAAA,IAAa,CAAS,GAAGR,eAAeS,IAAiBC,EAAAA,CAAAA;AAE1E,UAAIG,cAAcV,GAAKK,EAAAA,CAAAA,GAAAA;eACdL,GAAKK,EAAAA;;IAEhB,WAAW5B,eAAesB,IAAYM,EAAAA,KAAcE,OAAmBD,IAAiB;AACtF,UAAIK,KAAS;AAEb,UAAIC,QAAQN,EAAAA,KAAoBM,QAAQL,EAAAA,GAAAA;AACtC,YAAA;AACE,cAAI3C,aAAa0C,EAAAA,MAAqB1C,aAAa2C,EAAAA,GAAAA;AACjDI,YAAAA,KAAS;;QAGZ,SAACE,IAAAA;QAAM;;AAGV,UAAIF,IAAAA;AAGFX,QAAAA,GAAKK,EAAAA,IAAaE;;IAEtB;EAAA,CAAA;AAGF,SAAOP;AAAI;AAGN,IAAMc,oBACXA,CACEC,IACAC,IACAC,OAED7C,CAAAA,OAAS,CACRF,cAAc6C,IAAS3C,EAAAA,GACvB6C,MAAS/C,cAAc8C,IAAgB5C,EAAAA,MAAAA,MAAU8C;ACxSrD,IAAIC;AAEG,IAAMC,WAAWA,MAAMD;AACvB,IAAME,WAAYC,CAAAA,OAAAA;AACvBH,OAAQG;AAAQ;AC2ClB,IAAIC;AAEJ,IAAMC,oBAAoBA,MAAAA;AACxB,QAAMC,yBAAyBA,CAC7BC,IACAC,IACAC,OAAAA;AAGAC,mBAAeC,SAASC,MAAML,EAAAA;AAC9BG,mBAAeC,SAASC,MAAML,EAAAA;AAE9B,UAAMM,KAAQC,EAAcP,EAAAA;AAC5B,UAAMQ,KAAQC,EAAcT,EAAAA;AAC5B,UAAMU,KAAQC,kBAAkBV,EAAAA;AAEhC,QAAIC,IAAAA;AACFU,qBAAeZ,EAAAA;;AAGjB,WAAO;MACLlF,GAAG0F,GAAMK,IAAIP,GAAMO,IAAIH,GAAMG;MAC7BpD,GAAG+C,GAAMM,IAAIR,GAAMQ,IAAIJ,GAAMI;;EAC9B;AAGH,QAAMC,4BAA6BC,CAAAA,OAAAA;AACjC,QAAIC,KAAS;AACb,UAAMC,KAAcC,SAASH,IAASI,CAAAA;AACtC,QAAA;AACEH,MAAAA,KACEI,UAAUL,IAAS,iBAAA,MAAyC,UAC5DK,UAAUL,IAAS,WAAW,qBAAA,MAA2B;IAE5D,SAAC7B,IAAAA;IAAM;AACR+B,IAAAA,GAAAA;AACA,WAAOD;EAAM;AAIf,QAAMK,KAAW,IAAIC,CAAAA,mIAAuJA,CAAAA,8CAAkEH,CAAAA,oCAAuEA,CAAAA,wBAA2DA,CAAAA;AAChX,QAAMI,KAASC,UACb,eAAeF,CAAAA,uBAA2CD,EAAAA,gBAAAA;AAE5D,QAAMI,KAASF,GAAO,CAAA;AACtB,QAAMG,KAAcD,GAAOE;AAC3B,QAAMC,KAAWH,GAAOI;AACxB,QAAMrC,KAAQC,SAAAA;AAEd,MAAID,IAAAA;AACFoC,IAAAA,GAASpC,QAAQA;;AAGnB,QAAA,CAAOsC,IAAQ,EAAIC,EAAAA,IAAgBC,uBAAAA;AACnC,QAAA,CAAOC,IAAgCC,EAAAA,IAA+BC,YACpE;IACEC,GAAetC,uBAAuB2B,IAAQC,EAAAA;IAC9CW,GAAQC;KAEVC,KAAKzC,wBAAwB2B,IAAQC,IAAa,IAAA,CAAA;AAEpD,QAAA,CAAOc,EAAAA,IAAwBN,GAAAA;AAC/B,QAAMO,KAAyB3B,0BAA0BW,EAAAA;AACzD,QAAMiB,KAA2B;IAC/B7H,GAAG2H,GAAqB3H,MAAM;IAC9B2C,GAAGgF,GAAqBhF,MAAM;;AAEhC,QAAMmF,KAA8C;IAClDC,UAAU;MACRC,MAAM;MACNC,SAAAA,CAAUL;MACVM,UAAWC,CAAAA,OAAWP,MAA0BQ,cAAcD,EAAAA,KAAWA;MACzEE,SAAS;;IAEXzF,YAAY;MACV0F,MAAM;;IAERC,QAAQ;MACNV,0BAA0B;MAC1BtC,MAAM;;;AAGV,QAAMiD,KAAuBvE,WAAW,CAAE,GAAE/B,EAAAA;AAC5C,QAAMuG,KAAoBf,KACxBzD,YACA,CAAA,GACAuE,EAAAA;AAEF,QAAME,KAA2BhB,KAC/BzD,YACA,CAAA,GACA6D,EAAAA;AAGF,QAAMa,KAAW;IACfC,GAAuBjB;IACvBkB,GAA2BhB;IAC3BiB,GAAyBlB;IACzBmB,GAAAA,CAAAA,CAAmBC;IACnBC,GAAoBvB,KAAKT,IAAU,GAAA;IACnCiC,GAA2BR;IAC3BS,GAA4BC,CAAAA,OAC1BnF,WAAW6D,IAA6BsB,EAAAA,KACxCV,GAAAA;IACFW,IAAoBZ;IACpBa,IAAqBC,CAAAA,OACnBtF,WAAWuE,IAAsBe,EAAAA,KAAsBd,GAAAA;IACzDe,IAA8BvF,WAAW,CAAE,GAAE6D,EAAAA;IAC7C2B,IAAuBxF,WAAW,CAAA,GAAIuE,EAAAA;;AAGxCkB,cAAY9C,IAAQ,OAAA;AACpBd,iBAAec,EAAAA;AAGf+C,mBAAiBC,GAAK,UAAU,MAAA;AAC9B1C,IAAAA,GAAa,KAAK,CAAA,CAAA;EAAG,CAAA;AAGvB,MACEzF,WAAWmI,EAAIC,UAAAA,KAAAA,CACdjC,OAAAA,CACCC,GAAyB7H,KAAAA,CAAM6H,GAAyBlF,IAC1D;AACA,UAAMmH,kBAAmBC,CAAAA,OAAAA;AACvB,YAAMC,KAAQJ,EAAIC,WAAW,gBAAgBD,EAAIK,gBAAAA,OAAAA;AACjDN,uBACEK,IACA,UACA,MAAA;AACED,QAAAA,GAAAA;AACAD,wBAAgBC,EAAAA;MAAO,GAEzB;QACEG,GAAO;;IAEV;AAEHJ,oBAAgB,MAAA;AACd,YAAA,CAAOK,IAA4BC,EAAAA,IACjChD,GAAAA;AAEFnD,iBAAW0E,GAAIC,GAAuBuB,EAAAA;AACtCjD,MAAAA,GAAa,KAAK,CAACkD,EAAAA,CAAAA;IAA4B,CAAA;EAEnD;AAEA,SAAOzB;AAAG;AAGL,IAAM0B,iBAAiBA,MAAAA;AAC5B,MAAA,CAAKtF,IAAAA;AACHA,SAAsBC,kBAAAA;;AAExB,SAAOD;AAAmB;ACzG5B,IAAMuF,2BAA2BA,CAC/BnC,IACAoC,IACAC,OAAAA;AAEA,MAAIC,KAAY;AAChB,QAAMC,KAAMF,KAAqB,oBAAIG,YAAiC;AACtE,QAAMC,UAAUA,MAAAA;AACdH,IAAAA,KAAY;EAAI;AAElB,QAAMI,iBAAmDC,CAAAA,OAAAA;AACvD,QAAIJ,MAAOF,IAAoB;AAC7B,YAAMO,KAAeP,GAAmBE,IAAKM,CAAAA,OAAAA;AAC3C,cAAA,CAAOC,IAAUC,EAAAA,IAAcF,MAAQ,CAAA;AACvC,cAAMjD,KAAWmD,MAAcD,MAAYH,MAAeK,MAAMF,IAAU9C,EAAAA,IAAU,CAAA;AACpF,eAAO,CAACJ,IAAUmD,EAAAA;MAAoB,CAAA;AAGxCtH,WAAKmH,IAAeC,CAAAA,OAClBpH,KAAKoH,GAAK,CAAA,GAAKI,CAAAA,OAAAA;AACb,cAAMF,KAAaF,GAAK,CAAA;AACxB,cAAMK,KAAUX,GAAIY,IAAIF,EAAAA,KAAQ,CAAA;AAChC,cAAMG,KAAgBpD,GAAOqD,SAASJ,EAAAA;AAEtC,YAAIG,MAAiBL,IAAY;AAC/B,gBAAMO,KAAiB9B,iBAAiByB,IAAKF,IAAaQ,CAAAA,OAAAA;AACxD,gBAAIjB,IAAW;AACbgB,cAAAA,GAAAA;AACAf,cAAAA,GAAIiB,OAAOP,EAAAA;YACb,OAAA;AACEb,cAAAA,GAASmB,EAAAA;;UACX,CAAA;AAEFhB,UAAAA,GAAIkB,IAAIR,IAAKS,KAAKR,IAASI,EAAAA,CAAAA;QAC7B,OAAO;AACLK,0BAAgBT,EAAAA;AAChBX,UAAAA,GAAIiB,OAAOP,EAAAA;QACb;MAAA,CAAA,CAAA;IAGN;EAAA;AAGFP,iBAAAA;AAEA,SAAO,CAACD,SAASC,cAAAA;AAAe;AAW3B,IAAMkB,oBAAoBA,CAC/B5D,IACA6D,IACAzB,IACAhG,OAAAA;AAEA,MAAI0H,KAAc;AAClB,QAAA,EAAMC,IACJC,IAAWC,IACXC,IAAwBC,IACxBC,IAAmBC,IACnBC,IAAqBC,IACrBC,IAAmBC,IACnBC,GAAAA,IACGtI,MAAoE,CAAE;AAC3E,QAAMuI,KAA8BvK,SAClC,MAAM0J,MAAgB1B,GAAwC,IAAA,GAC9D;IAAEwC,GAAiB;IAAIC,GAAoB;;AAE7C,QAAA,CAAOC,IAA2BC,EAAAA,IAAoC5C,yBACpEnC,IACA2E,IACAP,EAAAA;AAIF,QAAMY,KAAkBhB,MAAe,CAAA;AACvC,QAAMiB,KAA+Bf,MAA4B,CAAA;AACjE,QAAMgB,KAAqB3J,OAAOyJ,IAAiBC,EAAAA;AACnD,QAAME,mBAAmBA,CACvBC,IACAC,OAAAA;AAEA,QAAA,CAAKC,aAAaD,EAAAA,GAAY;AAC5B,YAAME,KAAqBf,MAAuBvN;AAClD,YAAMuO,KAAsBd,MAAwBzN;AACpD,YAAMwO,KAA4B,CAAA;AAClC,YAAMC,KAA+B,CAAA;AACrC,UAAIC,KAAsD;AAC1D,UAAIC,KAAkD;AAGtDnK,WAAK4J,IAAYQ,CAAAA,OAAAA;AACf,cAAA,EAAMC,eACJA,IACA9F,QAAQ+F,IAAcC,MACtBA,IAAIC,UACJA,IAAQC,YACRA,IAAUC,cACVA,GAAAA,IACEN;AACJ,cAAMO,KAAmBJ,OAAS;AAClC,cAAMK,KAAkBL,OAAS;AACjC,cAAMM,KAAyBtG,OAAW+F;AAC1C,cAAMQ,KAAeH,MAAoBN;AACzC,cAAMU,KACJD,MAAgBE,QAAQV,IAA+BD,MAAiB,EAAA;AAE1E,cAAMY,KAAiBC,SAASH,EAAAA,IAAYA,KAAW;AACvD,cAAMI,KAAmBL,MAAgBN,OAAaS;AACtD,cAAMG,KACJC,QAAQ7B,IAA8Ba,EAAAA,KAAkBc;AAG1D,YAAI/C,OAAsBwC,MAAAA,CAAoBC,KAAyB;AACrE,gBAAMS,KAAqBX,MAAoBQ;AAC/C,gBAAMI,KACJD,MACAzC,MACA2C,GAAGlB,IAAgBzB,EAAAA;AACrB,gBAAM4C,KAAgBF,KAAAA,CACjBzB,GAAmBQ,IAAgBD,IAAeG,IAAUS,EAAAA,IAAAA,CAC5DN,MAAoBW;AACzB,gBAAMI,KACJD,MAAAA,CAAkB1B,GAAoBK,IAAAA,CAAAA,CAAYmB,IAAgBhH,IAAQ5D,EAAAA;AAE5EX,eAAKyK,IAAakB,CAAAA,OAAS1D,KAAK+B,IAAmB2B,EAAAA,CAAAA;AACnD3L,eAAK0K,IAAeiB,CAAAA,OAAS1D,KAAK+B,IAAmB2B,EAAAA,CAAAA;AAErDxB,UAAAA,KAAiBA,MAAkBuB;QAErC;AAEA,YAAA,CACGtD,MACDyC,MACAM,MAAAA,CACCrB,GAAmBQ,IAAgBD,IAAgBG,IAAUS,EAAAA,GAC9D;AACAhD,eAAKgC,IAAoBI,EAAAA;AACzBH,UAAAA,KAAqBA,MAAsBkB;QAC7C;MAAA,CAAA;AAIF9B,MAAAA,GAAkCjC,CAAAA,OAChCuE,iBAAiB5B,EAAAA,EAAmB9L,OAAe,CAAC2N,IAAKF,OAAAA;AACvD1D,aAAK4D,IAAKtE,KAAKF,IAAUsE,EAAAA,CAAAA;AACzB,eAAOH,GAAGG,IAAMtE,EAAAA,IAAYY,KAAK4D,IAAKF,EAAAA,IAAQE;MAAG,GAChD,CAAA,CAAA,CAAA;AAGL,UAAIzD,IAAmB;AACrB,YAAA,CAAKuB,MAAeQ,IAAAA;AACjBxD,UAAAA,GAAwC,KAAA;;AAE3C,eAAO,CAAC,KAAA;MAGV;AAEA,UAAA,CAAKkD,aAAaI,EAAAA,KAAuBC,IAAoB;AAC3D,cAAM4B,KAAO,CACXF,iBAAiB3B,EAAAA,GACjBC,EAAAA;AAGF,YAAA,CAAKP,IAAAA;AACFhD,UAAAA,GAAuCoF,MAAM,GAAGD,EAAAA;;AAGnD,eAAOA;MACT;IACF;EAAA;AAEF,QAAME,KAAqC,IAAIC,EAC7CnI,KAAK4F,kBAAkB,KAAA,CAAA;AAGzB,SAAO,CACL,MAAA;AACEsC,IAAAA,GAAiBE,QAAQ3H,IAAQ;MAC/B3F,YAAY;MACZuN,mBAAmB;MACnBC,iBAAiB3C;MACjB4C,SAASjE;MACTkE,WAAWlE;MACXmE,eAAenE;;AAEjBC,IAAAA,KAAc;AAEd,WAAO,MAAA;AACL,UAAIA,IAAa;AACfgB,QAAAA,GAAAA;AACA2C,QAAAA,GAAiBQ,WAAAA;AACjBnE,QAAAA,KAAc;MAChB;IAAA;EACD,GAEH,MAAA;AACE,QAAIA,IAAa;AACfa,MAAAA,GAA4BuD,EAAAA;AAC5B,aAAO/C,iBAAiB,MAAMsC,GAAiBU,YAAAA,CAAAA;IACjD;EAAA,CAAA;AAEH;AC5QH,IAAIC,KAA2C;AASxC,IAAMC,qBAAqBA,CAChCrI,IAEAsI,IACAlM,OAAAA;AAEA,QAAA,EAAQmM,IAASC,GAAAA,IAAwBpM,MAAW,CAAE;AACtD,QAAMqM,KACJC,8BAAyDC,EAAAA;AAC3D,QAAA,CAAOC,EAAAA,IAAwCzJ,YAAqC;IAClFC,GAAe;IACfyJ,GAAqB;;AAGvB,SAAO,MAAA;AACL,UAAMC,KAA6B,CAAA;AACnC,UAAMC,KAAmBvK,UACvB,eAAewK,EAAAA,iBAAsCC,EAAAA,gBAAAA;AAEvD,UAAMC,KAAsBH,GAAiB,CAAA;AAC7C,UAAMI,KAAwBD,GAAoBvK;AAElD,UAAMyK,6BAA8BC,CAAAA,OAAAA;AAClC,YAAMC,KAAuBrN,QAAQoN,EAAAA,KAAAA,CAAwB/D,aAAa+D,EAAAA;AAE1E,UAAIE,KAAO;AACX,UAAIC,KAAS;AAGb,UAAIF,IAAsB;AACxB,cAAMG,KAAsBJ,GAAmB,CAAA;AAC/C,cAAA,CAAOK,IAAe,EAAIC,EAAAA,IAAmBf,GAC3Ca,GAAoBG,WAAAA;AAEtB,cAAMC,KAAgBC,qBAAqBJ,EAAAA;AAC3CF,QAAAA,KAASO,gBAAgBL,IAAiBC,EAAAA;AAC1CJ,QAAAA,KAAAA,CAAQC,MAAAA,CAAWK;MACrB,OAAA;AAGEL,QAAAA,KAASH,OAAuB;;AAGlC,UAAA,CAAKE,IAAAA;AACHjB,QAAAA,GAAsB;UACpB0B,IAAc;UACdzB,IAASiB;;;IAEb;AAGF,QAAIS,IAA2B;AAC7B,UAAA,CAAKC,UAAU9B,EAAAA,GAA2B;AACxC,cAAM+B,KAA8B,IAAIF,GAA0BhT,IAAAA;AAClEkT,QAAAA,GAA4BxC,QAAQ3H,IAAQ;UAG1C,IAAA,MAAIoK;AACFhC,iBAA2B;UAC7B;;AAEFA,aAA2BA,MAA4B;AACvD+B,QAAAA,GAA4BlC,WAAAA;MAC9B;AAkBA,YAAMoC,KAAsCjQ,SAASgP,4BAA4B;QAC/ExE,GAAiB;QACjBC,GAAoB;;AAEtB,YAAMyF,yBAA0BpH,CAAAA,OAC9BmH,GAAoCnH,EAAAA;AACtC,YAAMqH,KAA2B,IAAIN,GAA0BK,sBAAAA;AAC/DC,MAAAA,GAAyB5C,QAAQS,KAA2BpI,KAASmJ,EAAAA;AAErEzF,WAAKoF,IAAY,CACf,MAAA;AACEyB,QAAAA,GAAyBtC,WAAAA;MAAY,GAAA,CAOtCG,MAA4BlL,eAAe8C,IAAQkJ,EAAAA,CAAAA,CAAAA;AAGtD,UAAId,IAA0B;AAC5B,cAAMoC,KAA0B,IAAIP,GAA0BK,sBAAAA;AAC9DE,QAAAA,GAAwB7C,QAAQ3H,IAAQ;UACtCoK,KAAK;;AAEP1G,aAAKoF,IAAY,MAAM0B,GAAwBvC,WAAAA,CAAAA;MACjD;IACD,WAAUQ,IAAoB;AAC7B,YAAA,CAAOgC,IAAsBC,EAAAA,IAAoBjC,GAC/CU,IACAC,4BACAZ,EAAAA;AAEF9E,WACEoF,IACAvN,OACE,CACE2C,SAASgL,IAAqByB,EAAAA,GAC9BnJ,iBAAiB0H,IAAqB,kBAAkBuB,EAAAA,GACxDvN,eAAe8C,IAAQkJ,EAAAA,CAAAA,GAEzBwB,EAAAA,CAAAA;IAGN,OAAA;AACE,aAAOzT;;AAGT,WAAOsI,KAAKoE,iBAAiBmF,EAAAA;EAAW;AACzC;ACxJI,IAAM8B,wBAAwBA,CACnC5K,IACA6K,OAAAA;AAEA,MAAIC;AACJ,QAAMC,oBAAqBC,CAAAA,OACxBA,GAA6BpN,MAAM,KACnCoN,GAA4CC,kBAC5CD,GAA4CE,oBAAoB;AACnE,QAAMC,KAAkBC,UAAUC,EAAAA;AAClC,QAAA,CAAOC,EAAAA,IAA8BnM,YAAY;IAC/CC,GAAe;;AAEjB,QAAMmM,kCAAkCA,CACtCC,IACApG,OAAAA;AAEA,QAAIoG,IAAa;AACf,YAAMC,KAAkBH,GAA2BP,kBAAkBS,EAAAA,CAAAA;AACrE,YAAA,CAAM,EAAGE,EAAAA,IAA0BD;AACnC,aACEC,MAAAA,CACCtG,MACDyF,GAAyBY,EAAAA,KAAoB,CAACA,EAAAA;IAElD;EAAA;AAEF,QAAME,+BAA+BA,CACnCvG,IACAlC,OACGqI,gCAAgCrI,GAAQ0I,IAAAA,GAAOxG,EAAAA;AAEpD,SAAO,CACL,MAAA;AACE,UAAM0D,KAA6B,CAAA;AAEnC,QAAI+C,GAAiC;AACnCf,MAAAA,KAA+B,IAAIe,EACjCtM,KAAKoM,8BAA8B,KAAA,GACnC;QAAEG,MAAM9L;;AAEV8K,MAAAA,GAA6BnD,QAAQwD,EAAAA;AACrCzH,WAAKoF,IAAY,MAAA;AACfgC,QAAAA,GAA8B7C,WAAAA;MAAY,CAAA;IAE9C,OAAO;AACL,YAAM8D,gBAAgBA,MAAAA;AACpB,cAAMC,KAAUxO,EAAc2N,EAAAA;AAC9BI,wCAAgCS,EAAAA;MAAQ;AAE1CtI,WAAKoF,IAAYT,mBAAmB8C,IAAiBY,aAAAA,EAApC1D,CAAAA;AACjB0D,oBAAAA;IACF;AAEA,WAAOxM,KAAKoE,iBAAiBD,KAAKoF,IAAY5L,eAAe8C,IAAQmL,EAAAA,CAAAA,CAAAA;EAAkB,GAEzF,MACEL,MACAa,6BAA6B,MAAMb,GAA6B3C,YAAAA,CAAAA,CAAAA;AACnE;ACrBI,IAAM8D,uBAAuBA,CAClCC,IACAC,IACAC,IACAC,OAAAA;AAEA,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAI9C;AACJ,MAAI+C;AACJ,QAAMC,KAAe,IAAIC,CAAAA;AAIzB,QAAMC,KAAmB,IAAIC,CAAAA;AAC7B,QAAMC,KAAyB,CAAC,MAAM,SAAS,SAAS,QAAQ,QAAQ,QAAQ,MAAA;AAChF,QAAA,EAAMC,IACJC,IAAOC,IACPC,IAAKC,GACLC,IAASC,IACTC,IAAoBC,IACpBC,IAAQC,GACRC,IAAiBC,IACjBC,IAAOC,IACPC,IAAiBC,IACjBC,IAAuBC,IACvBC,GAAAA,IACEjC;AAEJ,QAAMkC,oBAAqBnL,CAAAA,OAA8B7E,UAAU6E,IAAK,WAAA,MAAiB;AAEzF,QAAMoL,KAA6B;IACjCC,IAAkB;IAClBC,GAAiBH,kBAAkBnB,EAAAA;;AAErC,QAAMzM,KAAM0B,eAAAA;AACZ,QAAMsM,KAAyB9F,8BAC7B+F,EAAAA;AAGF,QAAA,CAAOC,EAAAA,IAA0BvP,YAC/B;IACEE,GAAQsP;IACRvP,GAAe;MAAEvB,GAAG;MAAGD,GAAG;;KAE5B,MAAA;AACE,UAAMgR,KACJJ,MACAA,GAAuBK,EACrB3C,IACAC,IACAkC,IACA7N,IACA4L,EAAAA,EACA0C;AAEJ,UAAMC,KAAuBlB,MAAWF;AACxC,UAAMqB,KAAAA,CACHD,MAAwBE,aAAa9B,IAAOP,GAAmBsC,CAAAA;AAClE,UAAMC,KAAAA,CAAcxB,MAAqBI,GAAkBqB,CAAAA;AAC3D,UAAMC,KAAeF,MAAcG,iBAAiB/B,EAAAA;AACpD,UAAMgC,KAA8BF,MAAgBlB,GAAAA;AAEpD,UAAMqB,KAAkBvB,GAAwBwB,GAA4BT,EAAAA;AAC5E,UAAMU,KAAsBP,MAAcP,MAAuBA,GAAAA;AACjE,UAAMe,KAAiBC,EAAcvC,EAAAA;AACrC,UAAMwC,KAAanS,kBAAkB2P,EAAAA;AAErC,QAAIqC,IAAAA;AACFA,MAAAA,GAAAA;;AAGFI,oBAAgBvC,IAAsB8B,EAAAA;AACtC,QAAIE,IAAAA;AACFA,MAAAA,GAAAA;;AAEF,QAAIP,IAAAA;AACFQ,MAAAA,GAAAA;;AAGF,WAAO;MACL3R,GAAG8R,GAAe9R,IAAIgS,GAAWhS;MACjCD,GAAG+R,GAAe/R,IAAIiS,GAAWjS;;EAClC,CAAA;AAIL,QAAMmS,KAA8B3V,SAASiS,IAAoB;IAC/DzH,GAAiBA,MAAM0H;IACvBzH,GAAoBA,MAAM0H;IAC1ByD,EAAaC,IAAMC,IAAAA;AACjB,YAAA,CAAOC,EAAAA,IAAWF;AAClB,YAAA,CAAOG,EAAAA,IAAWF;AAClB,aAAO,CACL3U,OAAOC,KAAK2U,EAAAA,GAAU3U,KAAK4U,EAAAA,CAAAA,EAAUzW,OAAO,CAACH,IAAK6W,OAAAA;AAChD7W,QAAAA,GAAI6W,EAAAA,IAAOF,GAAQE,EAAAA,KAAgCD,GAAQC,EAAAA;AAC3D,eAAO7W;MAAG,GACT,CAAiB,CAAA,CAAA;IAExB;;AAGF,QAAM8W,eAAgBC,CAAAA,OAAAA;AACpB,UAAMC,KAAoBpC,kBAAkBnB,EAAAA;AAC5CnR,eAAWyU,IAAa;MAAEE,IAAmB/D,OAAuB8D;;AACpE1U,eAAWuS,IAAO;MAAEE,GAAiBiC;;AACrC9D,IAAAA,KAAqB8D;EAAiB;AAGxC,QAAME,mBAAmBA,CACvBC,IACAvL,OAAAA;AAEA,UAAA,CAAOqG,IAAiBC,EAAAA,IAA0BiF;AAClD,UAAMJ,KAAyC;MAC7CK,IAAyBlF;;AAG3B5P,eAAWuS,IAAO;MAAEC,IAAkB7C;;AAEtC,QAAA,CAAKrG,IAAAA;AACHiH,MAAAA,GAAmBkE,EAAAA;;AAGrB,WAAOA;EAAW;AAGpB,QAAMxE,gBAAgBA,CAAAA,EAAG/B,IAAAA,IAAczB,IAAAA,GAAAA,MAAAA;AACrC,UAAMsI,KAAsB7G,MAAAA,CAAiBzB;AAC7C,UAAMuI,KAAAA,CAIHD,MAAuBrQ,GAAIG,IACxBoP,KACA1D;AAEN,UAAMkE,KAAyC;MAC7CvG,IAAcA,MAAgBzB;MAC9BA,IAAAA;;AAGF+H,iBAAaC,EAAAA;AAEbO,IAAAA,GAASP,EAAAA;EAAY;AAGvB,QAAMQ,oBAAoBA,CACxBC,IACA5L,OAAAA;AAEA,UAAA,CAAS6L,EAAAA,EAAAA,IAAoBvC,GAAAA;AAC7B,UAAM6B,KAAyC;MAC7CU,IAAAA;;AAGFX,iBAAaC,EAAAA;AAGb,UAAMO,KAAWE,KAA6B3E,KAAqB0D;AAEnE,QAAIkB,MAAAA,CAAqB7L,IAAAA;AACvB0L,MAAAA,GAASP,EAAAA;;AAGX,WAAOA;EAAW;AAGpB,QAAMW,iBAAiBA,CACrBxL,IACAC,IACAP,OAAAA;AAEA,UAAMmL,KAAyC;MAC7CY,IAAexL;;AAGjB2K,iBAAaC,EAAAA;AAEb,QAAI5K,MAAAA,CAAuBP,IAAAA;AACzB2K,MAAAA,GAA4BQ,EAAAA;;AAQ9B,WAAOA;EAAW;AAGpB,QAAA,CAAOa,IAA0BC,EAAAA,IAAyB5D,KACtD7C,sBAAsBuC,IAAOuD,gBAAAA,IAC7B,CAAA;AAEJ,QAAMY,KAAAA,CACH3D,MACDtF,mBAAmB8E,IAAOpB,eAAe;IACvCxD,IAAS;;AAGb,QAAA,CAAOgJ,IAA+BC,EAAAA,IAA8B5N,kBAClEuJ,IACA,OACA+D,gBACA;IACEhN,IAA0B6I;IAC1B/I,IAAa+I;;AAIjB,QAAM0E,KACJ9D,MACA1D,MACA,IAAIA,GAA2B/G,CAAAA,OAAAA;AAC7B,UAAMwG,KAAkBxG,GAAQA,GAAQwO,SAAS,CAAA,EAAG9H;AACpDmC,kBAAc;MACZ/B,IAAc;MACdzB,IAASwB,gBAAgBL,IAAiBC,EAAAA;;AAE5CA,IAAAA,KAAkBD;EAAe,CAAA;AAErC,QAAMiI,KAA0BvX,SAC9B,MAAA;AACE,UAAA,CAAS6W,EAAAA,EAAAA,IAAoBvC,GAAAA;AAC7BrC,IAAAA,GAAmB;MAAE4E,IAAAA;;EAAmB,GAE1C;IACErM,GAAiB;IACjBgN,GAAU;;AAId,SAAO,CACL,MAAA;AAGE,QAAIH,IAAAA;AACFA,MAAAA,GAA+B9J,QAAQwF,EAAAA;;AAEzC,UAAM0E,KAAsBP,MAAyBA,GAAAA;AACrD,UAAMQ,KAAyBV,MAA4BA,GAAAA;AAC3D,UAAMW,KAA8BR,GAAAA;AACpC,UAAMS,KAAuBxR,GAAIM,EAAoBmR,CAAAA,OAAAA;AACnD,UAAIA,IAAAA;AACFlC,QAAAA,GAA4B;UAAEkC,IAAAA;;;AAE9BN,QAAAA,GAAAA;;IACF,CAAA;AAGF,WAAO,MAAA;AACL,UAAIF,IAAAA;AACFA,QAAAA,GAA+BxJ,WAAAA;;AAEjC,UAAI4J,IAAAA;AACFA,QAAAA,GAAAA;;AAEF,UAAIC,IAAAA;AACFA,QAAAA,GAAAA;;AAEF,UAAIrF,IAAAA;AACFA,QAAAA,GAAAA;;AAEFsF,MAAAA,GAAAA;AACAC,MAAAA,GAAAA;IAAsB;EACvB,GAEH,CAAA,EAAGE,IAAAA,IAAcC,IAAAA,IAAcC,IAAAA,GAAAA,MAAAA;AAC7B,UAAM7B,KAAyC,CAAE;AAEjD,UAAA,CAAOjW,EAAAA,IAAkB4X,GAAa,uBAAA;AACtC,UAAA,CAAO7X,IAAYgY,EAAAA,IAAqBH,GAAa,mBAAA;AACrD,UAAA,CAAO/X,IAAemY,EAAAA,IAAwBJ,GAAa,sBAAA;AAC3D,UAAA,CAAOK,IAAeC,EAAAA,IAAmBN,GAAa,iBAAA;AACtD,UAAMO,KAAiCH,MAAwBD;AAC/D,UAAMlK,KAAcgK,MAAgBC;AACpC,UAAMM,4BAA6B7M,CAAAA,OACjCvM,WAAWgB,EAAAA,KAAmBA,GAAeuL,EAAAA;AAE/C,QAAI4M,IAAgC;AAClC,UAAIjG,IAAAA;AACFA,QAAAA,GAAAA;;AAEF,UAAIC,IAAAA;AACFA,QAAAA,GAAAA;;AAGF,YAAA,CAAOkG,IAAWzY,EAAAA,IAAU0J,kBAC1B6J,MAAYJ,IACZ,MACA0D,mBACA;QACE/M,IAAazI,OAAOwR,IAAwB1S,MAAc,CAAA,CAAA;QAC1D+J,IAAqBjK;QACrBmK,IAAuBqI;QACvBjI,IAAsBA,CAACmB,IAAUmB,OAAAA;AAC/B,gBAAA,EAAQhH,QAAQ+F,IAAcD,eAAEA,GAAAA,IAAkBD;AAClD,gBAAM+M,KAAAA,CACH5L,MAAkBlB,MAAAA,CAAkB6H,KACjCkF,YAAY9M,IAAgB4G,IAAcE,EAAAA,IAC1C;AACN,iBACE+F,MAAAA,CAAAA,CACEE,QAAQ/M,IAAgB,IAAIgN,EAAAA,EAAAA,KAAAA,CAAAA,CAC5BL,0BAA0B7M,EAAAA;QAAS;;AAM7C4G,MAAAA,KAAiCkG,GAAAA;AACjCnG,MAAAA,KAAgCtS;IAClC;AAEA,QAAIsY,IAAiB;AACnBzC,MAAAA,GAA4B7H,EAAAA;AAC5B,UAAIjM,QAAQsW,EAAAA,GAAgB;AAC1B,cAAMS,KAAUT,GAAc,CAAA;AAC9B,cAAMU,KAAUV,GAAc,CAAA;AAC9BjG,QAAAA,KAAkB4G,SAASF,EAAAA,KAAYA;AACvCzG,QAAAA,KAAmB2G,SAASD,EAAAA,KAAYA;MAC1C,WAAWC,SAASX,EAAAA,GAAgB;AAClCjG,QAAAA,KAAkBiG;AAClBhG,QAAAA,KAAmB;MACrB,OAAO;AACLD,QAAAA,KAAkB;AAClBC,QAAAA,KAAmB;MACrB;IACF;AAEA,QAAIpE,IAAa;AACf,YAAMgL,KAAmB3B,GAAAA;AACzB,YAAM4B,KAAsB/B,MAAyBA,GAAAA;AACrD,YAAMgC,KACJ7G,MAAiCA,GAAAA;AAEnC,UAAI2G,IAAAA;AACFrX,mBACEyU,IACAW,eAAeiC,GAAiB,CAAA,GAAIA,GAAiB,CAAA,GAAIhL,EAAAA,CAAAA;;AAI7D,UAAIiL,IAAAA;AACFtX,mBAAWyU,IAAaG,iBAAiB0C,GAAoB,CAAA,GAAIjL,EAAAA,CAAAA;;AAGnE,UAAIkL,IAAAA;AACFvX,mBAAWyU,IAAaQ,kBAAkBsC,GAAoB,CAAA,GAAIlL,EAAAA,CAAAA;;IAEtE;AAEAmI,iBAAaC,EAAAA;AAEb,WAAOA;EAAW,GAEpBlC,EAAAA;AACD;AC/TI,IAAMiF,wBAAwBA,CACnC/L,IACArO,OACOI,WAAWJ,EAAAA,IAASA,GAAMsO,MAAM,GAAGD,EAAAA,IAAQrO;AAE7C,IAAMqa,8BAA8BA,CACzChM,IACAiM,IACAC,IACAC,OAAAA;AAEA,QAAMC,KAAuBC,YAAYF,EAAAA,IACrCD,KACAC;AACJ,QAAMG,KAAyBP,sBAC7B/L,IACAoM,EAAAA;AAEF,SAAOE,MAA0BL,GAAoChM,MAAM,GAAGD,EAAAA;AAAK;AAG9E,IAAMuM,+BAA+BA,CAC1CvM,IACAwM,IACAC,IACAC,OAAAA;AAEA,QAAMC,KAAwBN,YAAYK,EAAAA,IACtCD,KACAC;AACJ,QAAMJ,KAAyBP,sBAC7B/L,IACA2M,EAAAA;AAEF,SAAA,CAAA,CACIL,OACDM,cAAcN,EAAAA,IACXA,KACAE,GAAqCvM,MAAM,GAAGD,EAAAA;AAAM;AAIrD,IAAM6M,uBAAuBA,CAClCC,IACAC,OAAAA;AAEA,QAAA,EAAM5U,0BAAEA,IAAwBtC,MAAEA,GAAAA,IAASkX,MAA6B,CAAE;AAC1E,QAAA,EAAMC,GAAE7T,IAAyB8T,GAAE7T,IAAuB8T,GAAE1T,GAAAA,IAC1DmB,eAAAA;AACF,QAAA,EAAQxC,0BAA0BgV,IAAiCtX,MAAMuX,GAAAA,IACvE5T,GAAAA,EAA4BX;AAE9B,QAAMwU,KACJlV,MAAAA,OAAAA,KAA4BgV;AAC9B,QAAMG,KAAmCjB,YAAYxW,EAAAA,IAAQuX,KAAcvX;AAE3E,QAAM0X,MACHpU,GAA0B7I,KAAK6I,GAA0BlG,MAC1Doa;AACF,QAAMG,KACJV,OACCW,OAAOH,EAAAA,IAAAA,CACHlU,KACDkU;AAEN,SAAA,CAAA,CAASC,MAAAA,CAAAA,CAAmCC;AAA6B;AC1FpE,IAAME,gCAAgCA,CAC3CjV,IACAkM,IACAC,IACA+I,OAAAA;AAEA,QAAMC,KAA+B;AACrC,QAAMC,KAA6B;AACnC,QAAMC,KAA+B;AACrC,QAAA,EAAMZ,GAAE1T,GAAAA,IAA8BmB,eAAAA;AACtC,QAAA,EAAQzH,YAAY6a,GAAAA,IAA0BvU,GAAAA;AAC9C,QAAA,EAAQZ,MAAMoV,GAAAA,IAA8BD;AAC5C,QAAA,EAAMtI,IACJC,IAAOC,IACPC,IAAKC,GACLC,IAASmI,IACTC,IAAYnI,IACZC,IAAoBK,IACpBC,IAAOH,GACPC,GAAAA,IACEzB;AACJ,QAAA,EAAQzR,YAAYib,GAAAA,IAAoBD,KAAe,CAAA,IAAKzV;AAC5D,QAAA,EAAQG,MAAMwV,GAAAA,IAAuBD,MAAkB,CAAE;AACzD,QAAM5M,KAA6B,CAAA;AACnC,QAAM8M,KAA6C,CAAA;AACnD,QAAMC,KAA2C,CAAA;AACjD,QAAMC,KAAyBC,6BAG7B,CAAC9I,IAASE,IAAOE,EAAAA,GACjB,MAAOM,MAAqBE,KAAUZ,KAAUE,IAChDoI,IACAI,EAAAA;AAGF,QAAMK,qBAAsBC,CAAAA,OAAAA;AAC1B,QAAIpV,GAAS;AACX,UAAIqV,KAAkC;AACtC,UAAIC,KAAmC,CAAA;AACvC,YAAMC,KAAW,IAAIvV,EAAQ;QAC3BwV,QAAQ9I;QACR0I,MAAAA;;AAEF,YAAMK,kBAAkBA,MAAAA;AACtB,YAAIJ,IAAAA;AACFA,UAAAA,GAAc9V,OAAAA;;AAEhB8V,QAAAA,KAAgB;MAAI;AAEtB,YAAMK,6BAA8BC,CAAAA,OAAAA;AAClC,cAAA,EAAMC,IAAEC,GAAAA,IAAuBvK;AAC/B,cAAMwK,KACJC,oCAAoCF,EAAAA,EAAoBT,EAAAA;AAC1D,cAAMY,KAAeZ,OAAS;AAC9B,cAAMa,KAAiB,CACrBC,0BAA0B,GAAGF,EAAAA,GAC7BE,0BAA0B,aAAaF,KAAe,MAAM,GAAA,aAAgBA,EAAAA,CAAAA;AAE9E,cAAMG,KAAYL,KAAyBG,KAAiBA,GAAeG,QAAAA;AAE3E,YACEd,GAAuB,CAAA,MAAOa,GAAU,CAAA,KACxCb,GAAuB,CAAA,MAAOa,GAAU,CAAA,GAAA;AAExC,iBAAOV;;AAGTA,wBAAAA;AACAH,QAAAA,KAAyBa;AACzBd,QAAAA,KAAgBM,GAAUU,GAAQC,QAChC;UAEEla,OAAO,CAAC,MAAA;UAGR+Z,WAAAA;WAGF;UACEZ,UAAAA;;AAIJ,eAAOE;MAAe;AAGxB,aAAO;QACLC,IAAAA;;IAEJ;EAAA;AAEF,QAAMa,KAAiB;IACrBvf,GAAGme,mBAAmB,GAAA;IACtBxb,GAAGwb,mBAAmB,GAAA;;AAExB,QAAMqB,qBAAqBA,MAAAA;AACzB,UAAA,EAAMC,IAAEC,IAAeC,IAAEC,GAAAA,IAAkBtL;AAC3C,UAAMuL,eAAeA,CAACC,IAA0BC,OAC9CC,UAAU,GAAG,GAAGF,MAAoBA,KAAmBC,OAAuB,CAAA;AAEhF,WAAO;MACL/f,GAAG6f,aAAaD,GAAc5f,GAAG0f,GAAgB1f,CAAAA;MACjD2C,GAAGkd,aAAaD,GAAcjd,GAAG+c,GAAgB/c,CAAAA;;EAClD;AAEH,QAAMsd,mCAAmCA,CACvCC,IACAC,IACAC,OAAAA;AAEA,UAAMC,KAASD,KAAM/Z,WAAWia;AAChC1c,SAAKsc,IAAsBK,CAAAA,OAAAA;AACzBF,MAAAA,GAAOE,GAAmBC,IAAYL,EAAAA;IAAW,CAAA;EACjD;AAEJ,QAAMM,iBAAiBA,CACrBP,IACAQ,OAAAA;AAEA9c,SAAKsc,IAAsBK,CAAAA,OAAAA;AACzB,YAAA,CAAOnV,IAAKuV,EAAAA,IAAUD,GAASH,EAAAA;AAC/BK,gBAAUxV,IAAKuV,EAAAA;IAAO,CAAA;EACtB;AAEJ,QAAME,2BAA2BA,CAC/BC,IACAV,IACAW,OAAAA;AAEA,UAAMC,KAAa3O,UAAU0O,EAAAA;AAC7B,UAAME,KAAgBD,KAAaD,KAAiB;AACpD,UAAMG,KAAcF,KAAAA,CAAcD,KAAiB;AACnD,QAAIE,IAAAA;AACFhB,uCAAiClC,IAAsB+C,IAAWV,EAAAA;;AAEpE,QAAIc,IAAAA;AACFjB,uCAAiCjC,IAAoB8C,IAAWV,EAAAA;;EAClE;AAEF,QAAMe,gCAAgCA,MAAAA;AACpC,UAAMC,KAAkB5B,mBAAAA;AACxB,UAAM6B,yBACHC,CAAAA,OACA3C,CAAAA,OAAkC,CACjCA,GAAU6B,IACV;MACElD,CAACA,EAAAA,GAA+BiE,eAAeD,EAAAA,IAAuB;;AAI5Eb,mBAAe1C,IAAsBsD,uBAAuBD,GAAgBphB,CAAAA,CAAAA;AAC5EygB,mBAAezC,IAAoBqD,uBAAuBD,GAAgBze,CAAAA,CAAAA;EAAG;AAE/E,QAAM6e,gCAAgCA,MAAAA;AACpC,QAAA,CAAKxY,GAAS;AACZ,YAAA,EAAM4V,IAAEC,GAAAA,IAAuBvK;AAC/B,YAAMmN,KAAgBC,4BACpB7C,IACApH,iBAAiB/B,EAAAA,CAAAA;AAEnB,YAAM2L,yBACHM,CAAAA,OACAhD,CAAAA,OAAkC,CACjCA,GAAU6B,IACV;QACEjD,CAACA,EAAAA,GAA6BgE,eAAeI,EAAAA,IAAqB;;AAIxElB,qBAAe1C,IAAsBsD,uBAAuBI,GAAczhB,CAAAA,CAAAA;AAC1EygB,qBAAezC,IAAoBqD,uBAAuBI,GAAc9e,CAAAA,CAAAA;IAC1E;EAAA;AAEF,QAAMif,qCAAqCA,MAAAA;AACzC,UAAA,EAAMhD,IAAEC,GAAAA,IAAuBvK;AAC/B,UAAMwK,KAAyBC,oCAAoCF,EAAAA;AACnE,UAAMwC,yBACHQ,CAAAA,OACAlD,CAAAA,OAAkC,CACjCA,GAAU6B,IACV;MACEhD,CAACA,EAAAA,GAA+BqE,KAA0C,MAAM;;AAItFpB,mBAAe1C,IAAsBsD,uBAAuBvC,GAAuB9e,CAAAA,CAAAA;AACnFygB,mBAAezC,IAAoBqD,uBAAuBvC,GAAuBnc,CAAAA,CAAAA;AAGjF,QAAIqG,GAAS;AACX+U,MAAAA,GAAqB+D,QAAQvC,GAAevf,EAAG0e,EAAAA;AAC/CV,MAAAA,GAAmB8D,QAAQvC,GAAe5c,EAAG+b,EAAAA;IAC/C;EAAA;AAEF,QAAMqD,mCAAmCA,MAAAA;AACvC,QAAIjM,MAAAA,CAAsBE,IAAS;AACjC,YAAA,EAAMyJ,IAAEC,IAAed,IAAEC,GAAAA,IAAuBvK;AAChD,YAAM0N,KAA2BjD,oCAAoCF,EAAAA;AACrE,YAAM4C,KAAgBC,4BACpB7C,IACApH,iBAAiB/B,EAAAA,CAAAA;AAEnB,YAAMuM,yBAA4CtD,CAAAA,OAAAA;AAChD,cAAA,EAAMuD,IAAE1B,GAAAA,IAAe7B;AACvB,cAAMvT,KAAM+W,OAAO3B,EAAAA,MAAgBhL,MAAagL;AAChD,cAAM4B,oBAAoBA,CACxBT,IACA5B,IACAsC,OAAAA;AAEA,gBAAMC,KAAKvC,KAAqB4B;AAChC,iBAAOY,cAAcF,KAA2BC,KAAAA,CAAMA,EAAAA;QAAG;AAG3D,eAAO,CACLlX,IACAA,MAAO;UACL+T,WAAWD,0BAA0B;YACnClf,GAAGoiB,kBAAkBX,GAAczhB,GAAG0f,GAAgB1f,GAAGgiB,GAAyBhiB,CAAAA;YAClF2C,GAAGyf,kBAAkBX,GAAc9e,GAAG+c,GAAgB/c,GAAGqf,GAAyBrf,CAAAA;;;MAGvF;AAGH8d,qBAAe1C,IAAsBkE,sBAAAA;AACrCxB,qBAAezC,IAAoBiE,sBAAAA;IACrC;EAAA;AAEF,QAAMO,uBAAwBxD,CAAAA,OAAAA;AAC5B,UAAMyD,KAAQzD,KAAe,MAAM;AACnC,UAAM0D,KAAqB1D,KACvB2D,KACAC;AACJ,UAAMC,KAAYtP,UAAU,GAAG2H,EAAAA,IAAsBwH,EAAAA,EAAAA;AACrD,UAAMI,KAAQvP,UAAUwP,EAAAA;AACxB,UAAMC,KAASzP,UAAU0P,EAAAA;AACzB,UAAM9c,KAAS;MACbqa,IAAYqC;MACZK,IAAQJ;MACRzD,IAAS2D;;AAEX,UAAMzE,KAAWgB,GAAekD,EAAAA;AAEhC5W,SAAKmT,KAAejB,KAAuBC,IAAoB7X,EAAAA;AAC/D0F,SAAKoF,IAAY,CACf5L,eAAewd,IAAWC,EAAAA,GAC1Bzd,eAAeyd,IAAOE,EAAAA,GACtBtb,KAAK5B,gBAAgB+c,EAAAA,GACrBtE,MAAYA,GAASG,GAA2BvY,EAAAA,GAChDkX,GAAsBlX,IAAQ0a,0BAA0B7B,EAAAA,CAAAA,CAAAA;AAG1D,WAAO7Y;EAAM;AAEf,QAAMgd,KAAuCzb,KAAK8a,sBAAsB,IAAA;AACxE,QAAMY,KAAqC1b,KAAK8a,sBAAsB,KAAA;AACtE,QAAMa,iBAAiBA,MAAAA;AACrBhe,mBAAe4Y,IAAwBF,GAAqB,CAAA,EAAGyC,EAAAA;AAC/Dnb,mBAAe4Y,IAAwBD,GAAmB,CAAA,EAAGwC,EAAAA;AAE7D,WAAO9Y,KAAKoE,iBAAiBmF,EAAAA;EAAW;AAG1CkS,EAAAA,GAAAA;AACAC,EAAAA,GAAAA;AAEA,SAAO,CACL;IACEE,IAAgCnC;IAChCoC,IAAgC/B;IAChCgC,IAAqC5B;IACrC6B,IAAmC1B;IACnC2B,IAA2B7C;IAC3B8C,IAAa;MACXC,IAAsB7F;MACtB8F,IAAQV;MACRW,IAAQpc,KAAK+Y,gBAAgB1C,EAAAA;;IAE/BgG,IAAW;MACTH,IAAsB5F;MACtB6F,IAAQT;MACRU,IAAQpc,KAAK+Y,gBAAgBzC,EAAAA;;KAGjCqF,cAAAA;AACD;AClUI,IAAMW,8BAA8BA,CACzCzf,IACA8P,IACAC,IACA2P,OAEO,CAAC1D,IAAoBM,IAA0B7B,OAAAA;AACpD,QAAA,EAAM3J,IACJC,IAAKC,GACLC,IAASK,GACTC,IAAiBL,IACjBC,IAAoBwO,IACpBC,IAAY9N,IACZC,GAAAA,IACEjC;AACJ,QAAA,EAAM6N,IAAE1B,IAAU4D,IAAElB,IAAMmB,IAAEhF,GAAAA,IAAYkB;AACxC,QAAA,CAAO+D,IAAcC,EAAAA,IAAqB9kB,iBAAiB,GAAA;AAC3D,QAAA,CAAO+kB,IAAmCC,EAAAA,IACxChlB,iBAAiB,GAAA;AACnB,QAAMilB,8BAA+BC,CAAAA,OAAAA;AACnC,QAAIljB,WAAWiU,GAAqBkP,QAAAA,GAAAA;AAClClP,MAAAA,GAAqBkP,SAAS;QAC5BC,UAAU;QACVC,MAAMH,GAAY3kB;QAClB+kB,KAAKJ,GAAYhiB;;;EAErB;AAGF,QAAMqiB,gCAAgCA,MAAAA;AACpC,UAAMC,KAA8B;AACpC,UAAMC,KAAc,SAASlG,KAAe,MAAM,GAAA;AAClD,UAAMmG,KAAiBnG,KAAeoG,IAAWC;AACjD,UAAMC,KAAatG,KAAe,SAAS;AAC3C,UAAMuG,KAAQvG,KAAe,MAAM;AACnC,UAAMyD,KAAQzD,KAAe,MAAM;AAEnC,UAAMwG,2BACJA,CAACC,IAAyBC,OAA2BC,CAAAA,OAAAA;AACnD,YAAA,EAAMlG,IAAEC,GAAAA,IAAoBpL;AAC5B,YAAMsR,KAAkBjgB,EAAcud,EAAAA,EAAQqC,EAAAA,IAAS5f,EAAc0Z,EAAAA,EAASkG,EAAAA;AAC9E,YAAMM,KAAsBH,KAAgBC,KAAiBC;AAC7D,YAAME,KAAcD,KAAqBnG,GAAgB+C,EAAAA;AAEzDxK,sBAAgBvC,IAAsB;QACpC+M,CAACA,EAAAA,GAAQgD,KAAkBK;;IAC3B;AAEN,UAAMC,KAA2C,CAAA;AAEjD,WAAOpc,iBAAiBuZ,IAAQ,eAAgB8C,CAAAA,OAAAA;AAC9C,YAAMC,KACJhL,QAAQ+K,GAAiB7d,QAAgB,IAAI8a,EAAAA,EAAAA,MAAgC5D;AAC/E,YAAM6G,KAAwBD,KAAe5G,KAAU6D;AAEvD,YAAMiD,KAAmB5hB,GAAQ3B;AACjC,YAAMwjB,KAAwBD,GAAiBF,KAAe,eAAe,aAAA;AAC7E,YAAA,EAAMI,QAAEA,IAAMC,WAAEA,IAASC,aAAEA,GAAAA,IAAgBP;AAC3C,YAAA,EAAM5iB,UAAEA,GAAAA,IAAa+iB;AAErB,YAAMK,KACJH,OAAW,KACXC,MACAF,OACChjB,MAAY,CAAA,GAAIqjB,SAASF,EAAAA;AAE5B,UAAIC,IAAqB;AACvB1a,wBAAgBia,EAAAA;AAChBtB,QAAAA,GAAAA;AAEA,cAAMiC,KAAAA,CACHT,OAAiBD,GAAiBW,YAAYP,OAA0B;AAC3E,cAAMQ,KAAgBlf,KAAKmf,uBAAuBxH,EAAAA;AAClD,cAAMyH,KAAepf,KAAKmf,uBAAuB3D,EAAAA;AACjD,cAAM6D,kBAAkBA,CAACC,IAAsBC,QAC5CD,MAAcJ,GAAAA,GAAiBtB,EAAAA,KAAe2B,MAAaH,GAAAA,GAAgBxB,EAAAA;AAC9E,cAAM4B,KACJC,EAAUN,sBAAsBnR,EAAAA,EAAsByP,EAAAA,CAAAA,IACpDxf,EAAc+P,EAAAA,EAAsB6P,EAAAA,KAAU;AAClD,cAAMzmB,KAAqB0mB,yBACzB/N,iBAAiB/B,EAAAA,EAAsB+M,EAAAA,GACvC,IAAIyE,EAAAA;AAEN,cAAME,KAAoBpB,GAAiBd,EAAAA;AAC3C,cAAM8B,KAAaJ,GAAAA;AACnB,cAAMK,KAAYH,GAAAA;AAClB,cAAM9nB,KAAegoB,GAAW7B,EAAAA;AAChC,cAAMkC,KAAeN,gBAAgBC,IAAYC,EAAAA,IAAajoB,KAAe;AAC7E,cAAMsoB,KAA6BF,KAAoBH,GAAU3B,EAAAA;AACjE,cAAMiC,KAActB,KAAe,IAAIqB,KAA6BD;AACpE,cAAMG,wBAAyBC,CAAAA,OAAAA;AAC7B3b,0BAAgB4b,EAAAA;AAChBxB,UAAAA,GAAsBsB,sBAAsBC,GAAeE,SAAAA;QAAU;AAEvE,cAAMC,KAAoB3B,MAAgBS;AAC1C,cAAMhP,KAA8BpB,GAAAA;AAEpC,cAAMoR,KAAsB,CAC1B/d,iBAAiBwa,IAAcc,IAA6BuC,qBAAAA,GAC5D7d,iBAAiBwa,IAAc,eAAgBzY,CAAAA,OAAiBmc,eAAenc,EAAAA,GAAQ;UACrFoc,GAAU;YAEZne,iBAAiBuZ,IAAQ+B,IAA6BuC,qBAAAA,GACtDI,MACEje,iBAAiBuZ,IAAQ,eAAgB6E,CAAAA,OACvCjpB,GACEyoB,MAAeQ,GAAiB7C,EAAAA,IAAekC,GAAAA,CAAAA,GAGrDQ,OAAAA,MAAAA;AAEI,gBAAMI,KAA0BvQ,iBAAiB/B,EAAAA;AACjDgC,UAAAA,GAAAA;AACA,gBAAMuQ,KAAuBxQ,iBAAiB/B,EAAAA;AAC9C,gBAAMwS,KAAiB;YACrBloB,GAAGioB,GAAqBjoB,IAAIgoB,GAAwBhoB;YACpD2C,GAAGslB,GAAqBtlB,IAAIqlB,GAAwBrlB;;AAGtD,cAAIwlB,EAAQD,GAAeloB,CAAAA,IAAK,KAAKmoB,EAAQD,GAAevlB,CAAAA,IAAK,GAAG;AAClE2T,YAAAA,GAAAA;AACA2B,4BAAgBvC,IAAsBsS,EAAAA;AACtCtD,wCAA4BwD,EAAAA;AAC5B1D,YAAAA,GAAkC9M,EAAAA;UACpC;QACD,EAAA;AAGLwO,QAAAA,GAAsBkC,kBAAkBpC,GAAiB2B,SAAAA;AAEzD,YAAIjB,IAAAA;AACF5nB,UAAAA,GAAmByoB,EAAAA;mBACd,CAAKtB,IAAc;AACxB,gBAAMoC,KAAqBxX,8BACzBlS,EAAAA;AAEF,cAAI0pB,IAAoB;AACtB,kBAAMC,KAA2BD,GAC/BvpB,IACAyoB,IACAvoB,IACCE,CAAAA,OAAAA;AAEC,kBAAIA,IAAAA;AACFwY,gBAAAA,GAAAA;;AAEA7L,qBAAK6b,IAAqBhQ,EAAAA;;YAC5B,CAAA;AAIJ7L,iBAAK6b,IAAqBY,EAAAA;AAC1Bzc,iBAAKka,IAAuBre,KAAK4gB,IAA0B,IAAA,CAAA;UAC7D;QACF;MACF;IAAA,CAAA;EACA;AAGJ,MAAIC,KAAgB;AAEpB,SAAO7gB,KAAKoE,iBAAiB,CAC3BnC,iBAAiB0V,IAAS,4BAA4B4E,EAAAA,GACtDta,iBAAiB6W,IAAY,gBAAgB,MAAA;AAC3CK,IAAAA,GAAyB2H,IAA+B,IAAA;EAAK,CAAA,GAE/D7e,iBAAiB6W,IAAY,8BAA8B,MAAA;AACzDK,IAAAA,GAAyB2H,IAA+B,KAAA;EAAM,CAAA,GAAA,CAG/D1S,MACCnM,iBAAiB6W,IAAY,aAAa,MAAA;AACxC,UAAMiI,KAAiBC,kBAAAA;AACvB,QACEC,QAAQF,IAAgBxT,CAAAA,KACxB0T,QAAQF,IAAgB1T,CAAAA,KACxB0T,OAAmBnjB,SAASC,MAAAA;AAE5BqjB,QAAKlhB,KAAKmhB,cAAcrT,EAAAA,GAAY,EAAA;;EACtC,CAAA,GAGJ7L,iBACE6W,IACA,SACCsI,CAAAA,OAAAA;AACC,UAAA,EAAMC,QAAEA,IAAMC,QAAEA,IAAMC,WAAEA,GAAAA,IAAcH;AAGtC,QAAIP,MAAiBU,OAAc,KAAK9G,OAAO3B,EAAAA,MAAgBlL,IAAAA;AAC7DoP,kCAA4B;QAC1B1kB,GAAG+oB;QACHpmB,GAAGqmB;;;AAIPT,IAAAA,KAAgB;AAChB1H,IAAAA,GAAyBqI,IAAyB,IAAA;AAClD5E,IAAAA,GAAa,MAAA;AACXiE,MAAAA,KAAgB;AAChB1H,MAAAA,GAAyBqI,EAAAA;IAAwB,CAAA;AAGnDrB,mBAAeiB,EAAAA;EAAW,GAE5B;IAAEhB,GAAU;IAAOqB,GAAU;MAK/Bxf,iBACE6W,IACA,eACA,MAAA;AACE,UAAM4I,KAAmBzf,iBACvBwa,IACA,SACCkF,CAAAA,OAAAA;AACCC,MAAAA,GAAAA;AACAC,qBAAeF,EAAAA;IAAW,GAE5B;MACEnf,GAAO;MACPif,GAAU;MACVrB,GAAU;;AAGd,UAAMwB,KAAsB3f,iBAC1Bwa,IACA,2BACA,MAAA;AACEmF,MAAAA,GAAAA;AACAE,iBAAWJ,IAAkB,GAAA;IAAI,GAEnC;MACED,GAAU;MACVrB,GAAU;;EAEb,GAEH;IAAEqB,GAAU;IAAMrB,GAAU;MAE9B9C,8BAAAA,GACAT,IACAE,EAAAA,CAAAA;AACA;AC9OC,IAAMgF,wBAAwBA,CACnCthB,IACA5D,IACAmlB,IACApV,IACAD,IACAsV,OAAAA;AAEA,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC,KAAyC7qB;AAC7C,MAAI8qB,KAAwB;AAC5B,QAAMC,KAAwB,CAAC,SAAS,KAAA;AAGxC,QAAMC,yBAA0B1e,CAAAA,OAC9Bye,GAAsB1D,SAAS/a,GAAM6a,WAAAA;AAEvC,QAAA,CAAO8D,IAA6BC,EAAAA,IAA8B7qB,iBAAAA;AAClE,QAAA,CAAO8qB,IAAmCC,EAAAA,IACxC/qB,iBAAiB,GAAA;AACnB,QAAA,CAAOgrB,IAAwBC,EAAAA,IAA+BjrB,iBAAiB,GAAA;AAC/E,QAAA,CAAOkrB,IAAiBC,EAAAA,IAAwBnrB,iBAAiB,MAAMyqB,EAAAA;AACvE,QAAA,CAAOniB,IAAUsb,EAAAA,IAAkBjG,8BACjCjV,IACAkM,IACAC,IACA0P,4BACEzf,IACA8P,IACAC,IACC5I,CAAAA,OAAU0e,uBAAuB1e,EAAAA,KAAUmf,2CAAAA,CAAAA,CAAAA;AAGhD,QAAA,EAAMxV,IAAEC,IAAKwV,IAAEC,IAAmBhV,IAAEC,GAAAA,IAAY3B;AAChD,QAAA,EAAM2W,IACJtH,IAAyBuH,IACzB3H,IAA8B4H,IAC9B3H,IAA8B4H,IAC9B3H,IAAmC4H,IACnC3H,GAAAA,IACE1b;AACJ,QAAMsjB,2BAA2BA,CAACC,IAAyBC,OAAAA;AACzDX,IAAAA,GAAAA;AACA,QAAIU,IAAAA;AACF5H,MAAAA,GAA0B8H,EAAAA;WACrB;AACL,YAAMC,KAAO/jB,KAAKgc,IAA2B8H,IAAkC,IAAA;AAC/E,UAAItB,KAAwB,KAAA,CAAMqB,IAAAA;AAChCZ,QAAAA,GAAgBc,EAAAA;;AAEhBA,QAAAA,GAAAA;;IAEJ;EAAA;AAEF,QAAMZ,6CAA6CA,MAAAA;AACjD,QAAIf,KAAAA,CAAmBF,KAAAA,CAAeG,IAAiB;AACrDsB,+BAAyB,IAAA;AACzBd,MAAAA,GAAkC,MAAA;AAChCc,iCAAyB,KAAA;MAAM,CAAA;IAEnC;EAAA;AAEF,QAAMK,2BAA4BtL,CAAAA,OAAAA;AAChCsD,IAAAA,GAA0BiI,IAA4BvL,IAAK,IAAA;AAC3DsD,IAAAA,GAA0BiI,IAA4BvL,IAAK,KAAA;EAAM;AAEnE,QAAMwL,mBAAoBlgB,CAAAA,OAAAA;AACxB,QAAI0e,uBAAuB1e,EAAAA,GAAQ;AACjCke,MAAAA,KAAcE;AACd,UAAIA,IAAAA;AACFuB,iCAAyB,IAAA;;IAE7B;EAAA;AAEF,QAAMpa,KAA6B,CACjC2Z,IACAJ,IACAE,IACAJ,IACA,MAAML,GAAAA,GAENtgB,iBAAiB2L,IAAO,eAAesW,kBAAkB;IAAE1hB,GAAO;MAClEP,iBAAiB2L,IAAO,gBAAgBsW,gBAAAA,GACxCjiB,iBAAiB2L,IAAO,gBAAiB5J,CAAAA,OAAAA;AACvC,QAAI0e,uBAAuB1e,EAAAA,GAAQ;AACjCke,MAAAA,KAAc;AACd,UAAIE,IAAAA;AACFuB,iCAAyB,KAAA;;IAE7B;EAAA,CAAA,GAEF1hB,iBAAiB2L,IAAO,eAAgB5J,CAAAA,OAAAA;AACtC,QAAI0e,uBAAuB1e,EAAAA,KAAUme,IAAAA;AACnCgB,iDAAAA;;EACF,CAAA,GAEFlhB,iBAAiBohB,IAAqB,UAAWrf,CAAAA,OAAAA;AAC/C2e,IAAAA,GAA4B,MAAA;AAC1B9G,MAAAA,GAAAA;AACAsH,iDAAAA;IAA4C,CAAA;AAG9ClB,IAAAA,GAASje,EAAAA;AAET+X,IAAAA,GAAAA;EAAmC,CAAA,CAAA;AAIvC,SAAO,CACL,MAAM/b,KAAKoE,iBAAiBD,KAAKoF,IAAYoS,GAAAA,CAAAA,CAAAA,GAC7C,CAAA,EAAGhJ,IAAAA,IAAcE,IAAAA,IAAQsR,IAAAA,IAAuBC,IAAAA,GAAAA,MAAAA;AAC9C,UAAA,EAAMC,IACJC,IAAoBC,IACpBC,IAAsBC,IACtBC,IAAqBC,IACrBC,GAAAA,IACER,MAAyB,CAAE;AAC/B,UAAA,EAAMS,IAAE3T,IAAiB4T,IAAE9b,GAAAA,IAAYmb,MAAyB,CAAE;AAClE,UAAA,EAAMY,GAAE/V,GAAAA,IAAoBgT;AAC5B,UAAA,EAAMhN,GAAE7T,GAAAA,IAA8BwB,eAAAA;AACtC,UAAA,EAAMqiB,IAAEC,IAAcC,GAAEC,GAAAA,IAAiBvY;AACzC,UAAA,CAAOwY,IAAoCC,EAAAA,IACzC1S,GAAa,8BAAA;AACf,UAAA,CAAOxX,IAAOmqB,EAAAA,IAAgB3S,GAAa,kBAAA;AAC3C,UAAA,CAAOvX,IAAYmqB,EAAAA,IAAqB5S,GAAa,uBAAA;AACrD,UAAA,CAAOtX,IAAUmqB,EAAAA,IAAmB7S,GAAa,qBAAA;AACjD,UAAA,CAAOpX,IAAiBkqB,EAAAA,IAA0B9S,GAAa,4BAAA;AAC/D,UAAA,CAAOrX,EAAAA,IAAiBqX,GAAa,0BAAA;AACrC,UAAA,CAAOnX,IAAYkqB,EAAAA,IAAqB/S,GAAa,uBAAA;AACrD,UAAA,CAAOlX,IAAakqB,EAAAA,IAAsBhT,GAAa,wBAAA;AACvD,UAAA,CAAO3X,IAAU4qB,EAAAA,IAAmBjT,GAAa,UAAA;AACjD,UAAMkT,KAAgB7c,MAAAA,CAAY6J;AAClC,UAAMiT,KAAcX,GAAa7sB,KAAK6sB,GAAalqB;AACnD,UAAM8qB,KACJzB,MACAE,MACAI,MACA1T,MACA2B;AACF,UAAMmT,KAAmBtB,MAAyBa,MAAqBK;AACvE,UAAMlrB,KACJ0qB,MACAjkB,GAA0B7I,KAC1B6I,GAA0BlG;AAE5B,UAAMgrB,yBAAyBA,CAC7BC,IACAC,IACA7O,OAAAA;AAEA,YAAM8O,KACJF,GAAiBnH,SAASsH,CAAAA,MACzBjrB,OAAekrB,KAAelrB,OAAe,UAAU+qB,OAAkBE;AAE5ErK,MAAAA,GAA0BuK,IAA2BH,IAAW9O,EAAAA;AAEhE,aAAO8O;IAAS;AAGlB5D,IAAAA,KAAwBlnB;AAExB,QAAIuqB,IAAAA;AACF,UAAItqB,MAAmBuqB,IAAa;AAClC9B,iCAAyB,KAAA;AACzBzB,QAAAA,GAAAA;AACAQ,QAAAA,GAAuB,MAAA;AACrBR,UAAAA,KAAyCtgB,iBACvCohB,IACA,UACArjB,KAAKgkB,0BAA0B,IAAA,GAC/B;YACExhB,GAAO;;QAEV,CAAA;MAEL,OAAA;AACEwhB,iCAAyB,IAAA;;;AAI7B,QAAIqB,IAAAA;AACFrJ,MAAAA,GAA0BwK,IAA6B9rB,EAAAA;;AAGzD,QAAI4qB,IAAc;AAChBtJ,MAAAA,GAA0BsG,EAAAA;AAC1BtG,MAAAA,GAA0B7gB,IAAO,IAAA;AAEjCmnB,MAAAA,KAAYnnB;IACd;AAEA,QAAIsqB,MAAAA,CAA2BlqB,IAAAA;AAC7ByoB,+BAAyB,IAAA;;AAG3B,QAAIwB,IAAiB;AACnBrD,MAAAA,KAAiB9mB,OAAa;AAC9B+mB,MAAAA,KAAkB/mB,OAAa;AAC/BgnB,MAAAA,KAAkBhnB,OAAa;AAC/BsoB,+BAAyBtB,IAAiB,IAAA;IAC5C;AAEA,QAAIqD,IAAAA;AACF1J,MAAAA,GAA0ByK,IAAqCjrB,EAAAA;;AAGjE,QAAImqB,IAAAA;AACF3J,MAAAA,GAA0B0K,IAAAA,CAAAA,CAAsCjrB,EAAAA;;AAKlE,QAAIuqB,IAAkB;AACpB,YAAMW,KAAWV,uBAAuBjrB,GAAS1C,GAAG2sB,GAAe3sB,GAAG,IAAA;AACtE,YAAMsuB,KAAWX,uBAAuBjrB,GAASC,GAAGgqB,GAAehqB,GAAG,KAAA;AACtE,YAAM4rB,KAAYF,MAAYC;AAE9B5K,MAAAA,GAA0B8K,IAAAA,CAA+BD,EAAAA;IAC3D;AAGA,QAAId,IAAkB;AACpBlK,MAAAA,GAAAA;AACAD,MAAAA,GAAAA;AACAG,MAAAA,GAAAA;AACA,UAAI6I,IAAAA;AACF9I,QAAAA,GAAAA;;AAGFE,MAAAA,GAA0B+K,IAAAA,CAA6B5B,GAAa7sB,GAAG,IAAA;AACvE0jB,MAAAA,GAA0B+K,IAAAA,CAA6B5B,GAAalqB,GAAG,KAAA;AACvE+gB,MAAAA,GAA0BgL,IAAuBhY,MAAAA,CAAoBV,EAAAA;IACvE;EAAA,GAEF,CAAA,GACAjO,EAAAA;AACD;ACtNI,IAAM4mB,+BACXxmB,CAAAA,OAAAA;AAEA,QAAMQ,KAAM0B,eAAAA;AACZ,QAAA,EAAMuS,GAAE1T,IAAyByT,GAAE7T,GAAAA,IAA4BH;AAC/D,QAAA,EAAQZ,UAAU6mB,GAAAA,IAAwB1lB,GAAAA;AAC1C,QAAA,EACEjB,SAAS4mB,IACT3mB,UAAU4mB,IACVzmB,SAAS0mB,GAAAA,IACPH;AACJ,QAAMI,KAAc1S,cAAcnU,EAAAA;AAClC,QAAM8mB,KAAiCD,KAAc,CAAA,IAAK7mB;AAC1D,QAAA,EAAQJ,UAAUmnB,GAAAA,IAAiBD;AACnC,QAAA,EACEhnB,SAASknB,IACTjnB,UAAUknB,IACV/mB,SAASgnB,GAAAA,IACPH,MAAgB,CAAE;AAEtB,QAAMI,KAAgBN,KAAc7mB,KAAS8mB,GAA8B9mB;AAC3E,QAAMqU,KAASpU,cAAcknB,EAAAA;AAC7B,QAAMC,KAAgBD,GAAcC;AACpC,QAAMC,KAAaD,GAAcE;AACjC,QAAMC,oBAAoBA,MAAMH,GAAcI,eAAe/lB;AAC7D,QAAM8R,KAA8BhU,KAAKkoB,6BAAoC,CAACN,EAAAA,CAAAA;AAC9E,QAAMrT,KAA+BvU,KAAKwW,8BAAqC,CAACoR,EAAAA,CAAAA;AAChF,QAAMO,KAAenoB,KAAK6L,WAAW,EAAA;AACrC,QAAMuc,KAA0BpoB,KAC9BgU,IACAmU,IACAf,EAAAA;AAEF,QAAMiB,KAAyBroB,KAC7BuU,IACA4T,IACAd,EAAAA;AAEF,QAAMiB,qBAAsB5kB,CAAAA,OAAAA;AAC1B,UAAM6kB,KAAatqB,EAAcyF,EAAAA;AACjC,UAAM8kB,KAAanY,EAAc3M,EAAAA;AACjC,UAAM+kB,KAAY5pB,UAAU6E,IAAKglB,EAAAA;AACjC,UAAMC,KAAY9pB,UAAU6E,IAAKklB,CAAAA;AAEjC,WACGJ,GAAWlqB,IAAIiqB,GAAWjqB,IAAI,KAAA,CAAMuqB,kBAAkBJ,EAAAA,KACtDD,GAAWnqB,IAAIkqB,GAAWlqB,IAAI,KAAA,CAAMwqB,kBAAkBF,EAAAA;EAAW;AAGtE,QAAMG,KAA0BV,GAAwBV,EAAAA;AACxD,QAAMqB,KAAmBD,OAA4BlB;AACrD,QAAMpY,KAAuBuZ,MAAoBjU;AACjD,QAAMkU,KAAAA,CAA0BD,MAAoBV,GAAuBV,EAAAA;AAI3E,QAAMsB,KAAAA,CAAqBF,MAAoBD,OAA4BE;AAC3E,QAAME,KAAkB1Z,KAAuBsY,KAAagB;AAC5D,QAAMK,KAAc3Z,KAAuB0Z,KAAkBtB;AAC7D,QAAMwB,KAAAA,CACHL,MACDxU,GAA6B4T,IAAchB,IAA8BM,EAAAA;AAC3E,QAAM4B,KAAAA,CAAkBJ,MAAqBD;AAC7C,QAAMM,KAAoB,CAACD,IAAgBH,IAAiBE,IAAgBD,EAAAA,EAAanmB,IACtFU,CAAAA,OAAQkR,cAAclR,EAAAA,KAAAA,CAAS+W,OAAO/W,EAAAA,KAAQA,EAAAA;AAEjD,QAAM6lB,qBAAsB7lB,CAAAA,OAA6BA,MAAO6D,QAAQ+hB,IAAmB5lB,EAAAA;AAC3F,QAAM8lB,KAAAA,CACHD,mBAAmBL,EAAAA,KAAoBZ,mBAAmBY,EAAAA,IACvDA,KACAtB;AACN,QAAM6B,KAAsBja,KAAuBsY,KAAaoB;AAChE,QAAMQ,KAAqBla,KAAuBqY,KAAgBqB;AAElE,QAAMS,KAAgD;IACpDjc,IAASka;IACTha,IAAOub;IACPrb,GAAWob;IACXU,IAAUR;IACVlb,IAAUmb;IACVrb,IAAsByb;IACtBpG,IAAqBqG;IACrBG,IAA8B/U,KAASgT,KAAa0B;IACpD/M,IAAcoL;IACdvZ,IAASwG;IACToB,IAAcoR;IACdlZ,GAAmB2a;IACnBe,IAAY9B;IACZxZ,IAAoBub,CAAAA,OAClBra,aAAawZ,IAAiB3b,GAAuBwc,EAAAA;IACvDrb,IAAyBA,CAACqb,IAAoCrR,OAC5DsR,mBAAmBd,IAAiB3b,GAAuBwc,IAA4BrR,EAAAA;IACzF9J,IAA8BA,MAC5Bob,mBACEP,IACAlc,GACA0c,GACA,IAAA;;AAGN,QAAA,EAAMxc,IAAEC,IAAOC,IAAEC,IAAKsc,IAAEN,IAAQ/b,GAAEC,IAASG,IAAEC,IAAAA,IAAayb;AAC1D,QAAMpgB,MAA6B,CACjC,MAAA;AAEEvH,gBAAY4L,IAAO,CAACP,GAAmB8c,CAAAA,CAAAA;AACvCnoB,gBAAY0L,IAASyc,CAAAA;AACrB,QAAIrV,IAAAA;AACF9S,kBAAY8lB,IAAY,CAACqC,GAAyB9c,CAAAA,CAAAA;;EACpD,CAAA;AAGJ,MAAI+c,MAAiBC,SACnB,CAACnc,KAAUJ,IAAW8b,IAAUhc,IAAOF,EAAAA,EAASjK,KAAMC,CAAAA,OAAQA,MAAAA,CAAQ6lB,mBAAmB7lB,EAAAA,CAAAA,CAAAA;AAE3F,QAAM4mB,MAAc9a,KAAuB9B,KAAUQ,OAAYJ;AACjE,QAAM5K,MAAUlD,KAAKoE,iBAAiBmF,GAAAA;AACtC,QAAMoS,iBAAiBA,MAAAA;AACrB,UAAM4O,KAASvC,kBAAAA;AACf,UAAMwC,KAAgBxJ,kBAAAA;AACtB,UAAMyJ,SAAU/mB,CAAAA,OAAAA;AACd/F,qBAAe8c,OAAO/W,EAAAA,GAAM2mB,SAAS3mB,EAAAA,CAAAA;AACrCtF,qBAAesF,EAAAA;IAAI;AAGrB,UAAMgnB,yBAA0BC,CAAAA,OAC9B1oB,iBAAiB0oB,IAAe,+BAA+B9I,gBAAgB;MAC7EJ,GAAU;MACVrB,GAAU;;AAEd,UAAMwK,KAAc;AACpB,UAAMC,KAA2B3jB,QAAQ4G,IAAW8c,EAAAA;AACpD,UAAME,KAA2BJ,uBAAuBF,EAAAA;AACxDO,aAASnd,IAAOP,GAAmB0b,KAAmB,KAAKiC,CAAAA;AAC3DD,aAASnB,IAAUqB,GAAsB,EAAA;AACzCF,aAASjd,IAAWP,GAAuB,EAAA;AAC3Cwd,aAAS7c,KAAUgd,IAAsB,EAAA;AAEzC,QAAA,CAAKnC,IAAkB;AACrBgC,eAASjd,IAAW8c,IAAaC,MAA4B,IAAA;AAC7D,UAAI/V,IAAAA;AACFiW,iBAASjD,IAAYqD,GAAuB,EAAA;;IAEhD;AAEAxtB,mBAAe2sB,KAAaF,GAAAA;AAC5BzsB,mBAAeiQ,IAAOgc,EAAAA;AACtBjsB,mBAAeisB,MAAYhc,IAAAA,CAAQmb,MAAoBjb,EAAAA;AACvDnQ,mBAAemQ,IAAWI,GAAAA;AAE1B/J,SAAKoF,KAAY,CACfuhB,IACA,MAAA;AACE,YAAMM,KAAmBpK,kBAAAA;AACzB,YAAMqK,KAAsB9B,mBAAmBzb,EAAAA;AAG/C,YAAMwd,KACJD,MAAuBD,OAAqBtd,KAAYJ,KAAU0d;AACpE,YAAMG,KAA8Bb,uBAAuBY,EAAAA;AAC3DtpB,kBAAY4nB,IAAUqB,CAAAA;AACtBjpB,kBAAYkM,KAAUgd,EAAAA;AACtBlpB,kBAAY8L,IAAWP,CAAAA;AACvB,UAAIuH,IAAAA;AACF9S,oBAAY8lB,IAAYqD,CAAAA;;AAE1B,UAAIN,IAAAA;AACFE,iBAASjd,IAAW8c,IAAaC,EAAAA;;AAEjC7oB,oBAAY8L,IAAW8c,EAAAA;;AAGzB,UAAIrB,mBAAmBrb,GAAAA,GAAAA;AACrBuc,eAAOvc,GAAAA;;AAET,UAAImd,IAAAA;AACFZ,eAAO3c,EAAAA;;AAET,UAAIyb,mBAAmBK,EAAAA,GAAAA;AACrBa,eAAOb,EAAAA;;AAGTzI,mBAAamK,EAAAA;AACbC,MAAAA,GAAAA;IAA6B,CAAA,CAAA;AAIjC,QAAInqB,MAAAA,CAA4B2nB,IAAkB;AAChDyC,mBAAa1d,IAAWP,GAAuBke,CAAAA;AAC/CtnB,WAAKoF,KAAYvJ,KAAKgC,aAAa8L,IAAWP,CAAAA,CAAAA;IAChD;AAIA4T,iBAAAA,CACG4H,MAAoBjU,MAAU0V,OAAkB9c,MAAW6c,GAAOlN,QAAQkN,KACvEzc,KACA0c,EAAAA;AAENM,IAAAA,GAAAA;AAIAV,IAAAA,MAAiB;AAEjB,WAAOlnB;EAAO;AAGhB,SAAO,CAACymB,IAAoBhO,gBAAgBzY,GAAAA;AAAQ;ACrR/C,IAAMwoB,6BACXA,CAAAA,EAAGxd,IAAAA,GAAAA,MACH,CAAA,EAAGiW,IAAAA,IAAuBwH,IAAAA,IAAiB9Y,IAAAA,GAAAA,MAAAA;AACzC,QAAA,EAAM+Y,IAAEva,GAAAA,IAA4B8S,MAAyB,CAAE;AAC/D,QAAA,EAAM0H,IAAE9c,GAAAA,IAAqB4c;AAC7B,QAAMxf,KAAyB+B,OAAamD,MAA2BwB;AAEvE,MAAI1G,IAAAA;AACF+M,cAAUhL,IAAU;MAClByP,CAACA,CAAAA,GAAY5O,MAAoB;;;AAErC;ACMG,IAAM+c,6BAA2DA,CAAAA,EACpEle,IAAAA,IAAOgc,IAAAA,IAAU9b,GAAAA,IAAWM,GAAAA,GAAAA,GAC9BU,OAAAA;AAEA,QAAA,CAAOid,IAAoBC,EAAAA,IAAuBpsB,YAChD;IACEE,GAAQmsB;IACRpsB,GAAeqsB,mBAAAA;KAEjBlsB,KAAKksB,oBAAoBte,IAAO,WAAW,EAAA,CAAA;AAG7C,SAAO,CAAA,EAAG+E,IAAAA,IAAcwR,IAAAA,IAAuBwH,IAAAA,IAAiB9Y,IAAAA,GAAAA,MAAAA;AAC9D,QAAA,CAAKtS,IAAS4rB,EAAAA,IAAkBH,GAAoBnZ,EAAAA;AACpD,UAAA,EAAMoC,GAAE7T,GAAAA,IAA4BuB,eAAAA;AACpC,UAAA,EAAMypB,IAAE3hB,IAAY4hB,IAAE3a,IAAgBmT,IAAE3T,GAAAA,IAAsBiT,MAAyB,CAAE;AACzF,UAAA,EAAMY,GAAE/V,GAAAA,IAAoB2c;AAC5B,UAAA,CAAOlxB,IAAiB6xB,EAAAA,IAA0B3Z,GAAa,iBAAA;AAC/D,UAAM4Z,KAAkB1Z,MAAUnB;AAElC,QAAIjH,MAAgB0hB,MAAkBI,IAAAA;OACnChsB,IAAS4rB,EAAAA,IAAkBJ,GAAmBlZ,EAAAA;;AAGjD,UAAM2Z,KAAAA,CACHpe,OAAsBke,MAA0Bpb,MAAqBib;AAExE,QAAIK,IAAqB;AAEvB,YAAMC,KAAAA,CAAmBhyB,MAAAA,CAAqBmvB,MAAAA,CAAaxoB;AAC3D,YAAMsrB,KAAoBnsB,GAAQosB,IAAIpsB,GAAQqsB;AAC9C,YAAMC,KAAkBtsB,GAAQusB,IAAIvsB,GAAQwsB;AAE5C,YAAMC,KAA4B;QAChCC,CAACA,CAAAA,GAAiBR,MAAAA,CAAoBzd,KAAAA,CAAmB0d,KAAoB;QAC7EQ,CAACA,CAAAA,GAAkBT,KAAAA,CAAmBI,KAAkB;QACxDM,CAACA,CAAAA,GAAgBV,MAAmBzd,KAAAA,CAAmB0d,KAAoB;QAC3ErP,KAAKoP,KAAAA,CAAmBlsB,GAAQusB,IAAI;QACpCM,OAAOX,KAAmBzd,KAAAA,CAAmBzO,GAAQosB,IAAI,SAAU;QACnEvP,MAAMqP,KAAmBzd,KAAkB,SAAA,CAAUzO,GAAQqsB,IAAK;QAClElP,CAACA,CAAAA,GAAW+O,MAAmB,eAAeC,EAAAA;;AAEhD,YAAMW,KAA6B;QACjCC,CAACA,CAAAA,GAAgBb,KAAkBlsB,GAAQusB,IAAI;QAC/CS,CAACA,CAAAA,GAAkBd,KAAkBlsB,GAAQosB,IAAI;QACjDa,CAACA,CAAAA,GAAmBf,KAAkBlsB,GAAQwsB,IAAI;QAClDU,CAACA,CAAAA,GAAiBhB,KAAkBlsB,GAAQqsB,IAAI;;AAIlD1T,gBAAU0Q,MAAY9b,IAAWkf,EAAAA;AACjC9T,gBAAUpL,IAAWuf,EAAAA;AAErB9wB,iBAAWuS,IAAO;QAChB8a,IAAUrpB;QACVmtB,IAAAA,CAAmBjB;QACnBkB,GAAuB/D,KACnByD,KACA9wB,WAAW,CAAE,GAAEywB,IAAcK,EAAAA;;IAErC;AAEA,WAAO;MACLO,IAAsBpB;;EACvB;AACF;ACtBI,IAAMqB,8BAA4DA,CACvElhB,IACAC,OAAAA;AAEA,QAAM3L,KAAM0B,eAAAA;AACZ,QAAA,EAAMgL,IACJC,IAAKsc,IACLN,IAAQ/b,GACRC,IAASK,GACTC,IAAiBgV,IACjBC,IAAmBtV,IACnBC,IAAoBK,IACpBC,IAAOG,IACPC,IAAuBof,IACvBhE,GAAAA,IACEnd;AACJ,QAAA,EAAMsI,GAAE7T,GAAAA,IAA4BH;AACpC,QAAMuO,KAAuBlB,MAAWF;AACxC,QAAM2f,KAAO/tB,KAAKguB,GAAS,CAAA;AAC3B,QAAMC,KAGF;IACFC,SAASA,MAAM;IACfC,WAAYC,CAAAA,OAAmBA,OAAmB;IAClDC,eAAgBC,CAAAA,OAAuBA,GAAmBC,SAAS,UAAA;IACnEC,aAAcC,CAAAA,OAAqBA,OAAqB;;AAE1D,QAAMC,KAAwBzyB,KAAKgyB,EAAAA;AAGnC,QAAMU,KAAiB;IACrB7uB,GAAQsP;IACRvP,GAAe;MAAEvB,GAAG;MAAGD,GAAG;;;AAE5B,QAAMuwB,KAAmB;IACvB9uB,GAAQC;IACRF,GAAe,CAAA;;AAGjB,QAAMgvB,mBAAoBC,CAAAA,OAAAA;AAExBpgB,IAAAA,GAAwBwB,GAAAA,CAA6BV,MAAwBsf,EAAAA;EAAO;AAGtF,QAAMC,+BAAgCC,CAAAA,OAAAA;AACpC,UAAMC,KAA+BP,GAAsBQ,KAAMC,CAAAA,OAAAA;AAC/D,YAAMC,KAAaJ,GAAoBG,EAAAA;AACvC,aAAOC,MAAcnB,GAAgCkB,EAAAA,EAAWC,EAAAA;IAAW,CAAA;AAI7E,QAAA,CAAKH,IAAAA;AACH,aAAO;QACLI,GAAQ;UAAE/2B,GAAG;UAAG2C,GAAG;;QACnBq0B,GAAM;UAAEh3B,GAAG;UAAG2C,GAAG;;;;AAIrB4zB,qBAAiB,IAAA;AAEjB,UAAMU,KAAuBxf,iBAAiB/B,EAAAA;AAC9C,UAAMwhB,KAAkB9gB,GAAwB+gB,GAA4B,IAAA;AAC5E,UAAMC,KAAoBztB,iBACxBohB,IACAgD,GACCriB,CAAAA,OAAAA;AACC,YAAM2rB,KAA0B5f,iBAAiB/B,EAAAA;AAEjD,UACEhK,GAAM4rB,aACND,GAAwBr3B,MAAMi3B,GAAqBj3B,KACnDq3B,GAAwB10B,MAAMs0B,GAAqBt0B,GAAAA;AAEnD40B,wBAAgB7rB,EAAAA;;IAClB,GAEF;MACEyd,GAAU;MACVjf,GAAO;;AAIX+N,oBAAgBvC,IAAsB;MACpC1V,GAAG;MACH2C,GAAG;;AAELu0B,IAAAA,GAAAA;AAEA,UAAMH,KAAStf,iBAAiB/B,EAAAA;AAChC,UAAMwa,KAAanY,EAAcrC,EAAAA;AACjCuC,oBAAgBvC,IAAsB;MACpC1V,GAAGkwB,GAAWlqB;MACdrD,GAAGutB,GAAWnqB;;AAGhB,UAAMyxB,KAAM/f,iBAAiB/B,EAAAA;AAC7BuC,oBAAgBvC,IAAsB;MAEpC1V,GAAGw3B,GAAIx3B,IAAI+2B,GAAO/2B,IAAI,KAAA,CAAMkwB,GAAWlqB;MACvCrD,GAAG60B,GAAI70B,IAAIo0B,GAAOp0B,IAAI,KAAA,CAAMutB,GAAWnqB;;AAGzC,UAAMixB,KAAOvf,iBAAiB/B,EAAAA;AAC9BuC,oBAAgBvC,IAAsBuhB,EAAAA;AACtCQ,MAAI,MAAML,GAAAA,CAAAA;AAEV,WAAO;MACLL,GAAAA;MACAC,GAAAA;;EACD;AAEH,QAAMU,oBAAoBA,CACxBC,IACAC,OAAAA;AAEA,UAAMC,KAAajuB,EAAIK,mBAAmB,MAAM,IAAI,IAAI;AACxD,UAAM6tB,KAAS;MACb9xB,GAAGyvB,GAAKkC,GAAmB3xB,IAAI4xB,GAAmB5xB,CAAAA;MAClDD,GAAG0vB,GAAKkC,GAAmB5xB,IAAI6xB,GAAmB7xB,CAAAA;;AAGpD,WAAO;MACLC,GAAG8xB,GAAO9xB,IAAI6xB,KAAaC,GAAO9xB,IAAI;MACtCD,GAAG+xB,GAAO/xB,IAAI8xB,KAAaC,GAAO/xB,IAAI;;EACvC;AAEH,QAAMgyB,2BAA2BA,CAC/BvK,IACAI,OAAAA;AAEA,UAAMoK,uBAAuBA,CAC3BC,IACAC,IACAC,IACAC,OAAAA;AAQA,YAAMC,KACJJ,OAAiBjK,IAAasK,IAAYC,gCAAgCN,EAAAA;AAC5E,YAAMO,KAAsBjI,kBAAkB0H,EAAAA;AAC9C,YAAMQ,KAA+BlI,kBAAkB4H,EAAAA;AAGvD,UAAA,CAAKD,MAAAA,CAAoBE,IAAAA;AACvB,eAAOE;;AAIT,UAAIE,MAAuBC,IAAAA;AACzB,eAAOzK;;AAIT,UAAIwK,IAAqB;AACvB,cAAME,KAA2BR,KAAkBlK,IAAasK;AAChE,eAAOJ,MAAmBE,KACtBC,KACAK;MACN;AAEA,YAAMC,KACJF,MAAgCL,KAAwBpK,IAAasK;AACvE,aAAOJ,KACHG,KACAM;IAAW;AAGjB,WAAO;MACL34B,GAAGg4B,qBAAqBpK,GAAiB5tB,GAAGwtB,GAAYxtB,GAAG4tB,GAAiBjrB,GAAG6qB,GAAY7qB,CAAAA;MAC3FA,GAAGq1B,qBAAqBpK,GAAiBjrB,GAAG6qB,GAAY7qB,GAAGirB,GAAiB5tB,GAAGwtB,GAAYxtB,CAAAA;;EAC5F;AAEH,QAAM44B,2BAA4BC,CAAAA,OAAAA;AAEhC,UAAMC,mCAAoC9Z,CAAAA,OACxC,CAACgP,GAAYsK,GAAWvK,CAAAA,EAAWrjB,IAAKquB,CAAAA,OACtCC,qCAAqCC,gCAAgCF,EAAAA,GAAQ/Z,EAAAA,CAAAA;AAEjF,UAAMka,KAA6BJ,iCAAiC,IAAA,EACjEp1B,OAAOo1B,iCAAAA,CAAAA,EACPK,KAAK,GAAA;AAER/iB,IAAAA,GAAwB8iB,EAAAA;AACxB9iB,IAAAA,GACGzS,KAAKk1B,EAAAA,EACHnuB,IAAK0T,CAAAA,OACJ4a,qCAAqCH,GAAsBza,EAAAA,GAAOA,OAAS,GAAA,CAAA,EAE5E+a,KAAK,GAAA,GACR,IAAA;EACD;AAGH,QAAA,CAAOC,IAAoBC,EAAAA,IAA0B/xB,YACnD+uB,IACA3uB,KAAK7B,mBAAmB2P,EAAAA,CAAAA;AAE1B,QAAA,CAAO8jB,IAA+BC,EAAAA,IAAqCjyB,YAEzE+uB,IAAgB3uB,KAAKqQ,GAAevC,EAAAA,CAAAA;AACtC,QAAA,CAAOgkB,IAA2BC,EAAAA,IAChCnyB,YAAwB+uB,EAAAA;AAC1B,QAAA,CAAOqD,EAAAA,IAA0BpyB,YAAkCgvB,EAAAA;AACnE,QAAA,CAAOqD,IAAoBC,EAAAA,IAA+BtyB,YAAwB+uB,EAAAA;AAClF,QAAA,CAAOwD,EAAAA,IAA4BvyB,YAAwCgvB,EAAAA;AAC3E,QAAA,CAAOwD,EAAAA,IAA6BxyB,YAClC;IACEE,GAAQA,CAACuyB,IAASC,OAAYC,MAAMF,IAASC,IAAS5D,EAAAA;IACtD7uB,GAAe,CAAA;KAEjB,MAAOyK,cAAcwD,EAAAA,IAAajP,UAAUiP,IAAW4gB,EAAAA,IAAyB,CAAA,CAAA;AAElF,QAAA,CAAO8D,IAAiCC,EAAAA,IACtC7yB,YAA+B;IAC7BE,GAAQA,CAACuyB,IAASK,OAChB3yB,QAAQsyB,GAAQhD,GAAQqD,GAAOrD,CAAAA,KAAWtvB,QAAQsyB,GAAQ/C,GAAMoD,GAAOpD,CAAAA;IACzEzvB,GAAe8yB,yBAAAA;;AAGnB,QAAM1jB,KAAyB9F,8BAC7B+F,EAAAA;AAGF,QAAMoiB,uCAAuCA,CAC3CnL,IACA7O,OAAAA;AAEA,UAAMsb,KAAStb,KACXub,IACAC;AACJ,WAAO,GAAGF,EAAAA,GAASG,sBAAsB5M,EAAAA,CAAAA;EAAgB;AAG3D,SAAO,CAAA,EACHxT,IAAAA,IAAcwR,IAAAA,IAAuBwH,IAAAA,IAAiB9Y,IAAAA,GAAAA,GAAAA,EACtD+a,IAAAA,GAAAA,MAAAA;AAEF,UAAA,EAAMxB,IACJ3hB,IAAYuoB,IACZphB,IAAaya,IACb3a,IAAgBmT,IAChB3T,IAAiB4T,IACjB9b,IAAOiqB,IACPvgB,GAAAA,IACEyR,MAAyB,CAAE;AAC/B,UAAM+O,KACJjkB,MACAA,GAAuBK,EACrB3C,IACAC,IACA+e,IACA1qB,IACA0R,EAAAA;AAGJ,UAAA,EAAMwgB,GAAEC,IAAgBC,GAAE9jB,IAAoB+jB,GAAEC,GAAAA,IAC9CL,MAA6C,CAAE;AAEjD,UAAA,CAAOx4B,IAA8B2qB,EAAAA,IACnCmO,gCAAgC7gB,IAAc1R,EAAAA;AAChD,UAAA,CAAOjG,IAAU4qB,EAAAA,IAAmBjT,GAAa,UAAA;AACjD,UAAM8gB,KAAmB5K,kBAAkB7tB,GAAS1C,CAAAA;AACpD,UAAMo7B,KAAmB7K,kBAAkB7tB,GAASC,CAAAA;AAEpD,UAAM04B,KACJlpB,MACAmjB,MACAlc,MACAR,MACAwB,MACA2S;AAEF,QAAIuO,KAAoBjC,GAAuB9e,EAAAA;AAC/C,QAAIghB,KAA0BhC,GAAkChf,EAAAA;AAChE,QAAIihB,MAAqB/B,GAA8Blf,EAAAA;AACvD,QAAIkhB,MAAoB7B,GAA4Brf,EAAAA;AAEpD,QAAIwS,MAAuCjkB,IAAAA;AACzCsN,MAAAA,GAAwB+c,GAAAA,CAAmC/wB,EAAAA;;AAG7D,QAAIi5B,IAAiB;AACnB,UAAIjkB,aAAa9B,IAAOP,GAAmBsC,CAAAA,GAAAA;AACzCkf,yBAAiB,IAAA;;AAGnB,YAAM1e,KAAsBZ,MAAwBA,GAAAA;AAEpD,YAAA,CAAOykB,EAAAA,IAAiBJ,KAAoBlC,GAAmB7e,EAAAA;AAC/D,YAAA,CAAOod,EAAAA,IAAuB4D,KAC5BjC,GAA8B/e,EAAAA;AAChC,YAAMqd,KAAqBnyB,EAAc+P,EAAAA;AACzC,YAAMmmB,KAAkBzkB,MAAwB0kB,cAAcpK,GAAAA,CAAAA;AAC9D,YAAMqK,KAA2B;QAC/B71B,GAAGyvB,GAAKkC,GAAmB3xB,IAAI01B,GAAa11B,CAAAA;QAC5CD,GAAG0vB,GAAKkC,GAAmB5xB,IAAI21B,GAAa31B,CAAAA;;AAG9C,YAAM+1B,KAA2B;QAC/B91B,GAAGyvB,IACAkG,KACGA,GAAgB31B,IAChB4xB,GAAmB5xB,IAAIyvB,GAAKmC,GAAmB5xB,IAAI2xB,GAAmB3xB,CAAAA,KACxE01B,GAAa11B,CAAAA;QAEjBD,GAAG0vB,IACAkG,KACGA,GAAgB51B,IAChB6xB,GAAmB7xB,IAAI0vB,GAAKmC,GAAmB7xB,IAAI4xB,GAAmB5xB,CAAAA,KACxE21B,GAAa31B,CAAAA;;AAInB,UAAI8R,IAAAA;AACFA,QAAAA,GAAAA;;AAGF4jB,MAAAA,MAAoB9B,GAAmBmC,EAAAA;AACvCN,MAAAA,MAAqBhC,GACnB9B,kBAAkBmE,IAA0BC,EAAAA,GAC5CvhB,EAAAA;IAEJ;AAEA,UAAA,CAAOwhB,KAAcC,GAAAA,IAAuBP;AAC5C,UAAA,CAAOQ,KAAgBC,GAAAA,IAAyBV;AAChD,UAAA,CAAO7D,KAAoBwE,GAAAA,IAA6BZ;AACxD,UAAA,CAAOG,KAAcU,GAAAA,IAAuBd;AAC5C,UAAA,CAAO9N,KAAa6O,GAAAA,IAAsB3C,GAAuB;MAC/D15B,GAAGi8B,IAAej2B,IAAI;MACtBrD,GAAGs5B,IAAel2B,IAAI;;AAExB,UAAMu2B,MACHnB,MAAoBC,OAAqB5N,IAAYxtB,KAAKwtB,IAAY7qB,MACtEw4B,MAAoB3N,IAAYxtB,KAAAA,CAAMwtB,IAAY7qB,KAClDy4B,MAAoB5N,IAAY7qB,KAAAA,CAAM6qB,IAAYxtB;AACrD,UAAMu8B,MACJjH,MACA1c,MACAwB,MACAgiB,OACAD,OACAH,OACAE,OACA5O,MACAP,MACAsO,MACC/hB,MAAiBpC;AACpB,UAAA,CAAOwf,KAAqB8F,GAAAA,IAA8B1C,GAA0Bvf,EAAAA;AACpF,UAAMkiB,MACJ7jB,MAAqBlI,MAAW8rB,OAA8BH,OAAsB9hB;AACtF,UAAA,CAAOmiB,KAAmBC,GAAAA,IAA4BF,MAClDvC,GAAgCzD,6BAA6BC,GAAAA,GAAsBnc,EAAAA,IACnF4f,GAAAA;AAEJ,QAAItB,MAAwBd,yBAAyBvK,KAAa9qB,EAAAA;AAElE6zB,qBAAiB,KAAA;AAEjB,QAAIgG,KAAqB;AACvB3D,+BAAyBC,GAAAA;AAEzBA,MAAAA,MAAwB+D,wBAAwBpnB,IAAWgY,GAAAA;AAE3D,UAAIyN,MAAyBH,IAAkB;AAC7CA,QAAAA,GAAiBjC,KAAuBlB,KAAoB+D,GAAAA;AAE5D9a,kBAAUpL,IAAWylB,GAAsBpC,GAAAA,CAAAA;MAC7C;IACF;AAEA,UAAA,CAAOhL,KAAegP,GAAAA,IAAwBhD,GAAyBhB,GAAAA;AAEvEnH,uBAAmBpc,IAAOP,GAAmBsC,GAAqBilB,GAAAA;AAClE5K,uBAAmBJ,IAAUqB,GAAsBtb,GAAqBilB,GAAAA;AAExEr4B,eAAWqQ,IAAqB;MAC9BqY,IAAgBkB;MAChBjO,IAAe;QACb5f,GAAG+7B,IAAa/1B;QAChBrD,GAAGo5B,IAAah2B;;MAElB2Z,IAAiB;QACf1f,GAAGi8B,IAAej2B;QAClBrD,GAAGs5B,IAAel2B;;MAEpB8mB,GAAcW;MACd3O,IAAoBie,0BAA0BJ,KAAmBT,GAAAA;;AAGnE,WAAO;MACL7P,IAAuByQ;MACvB7Q,IAAsBgQ;MACtB9P,IAAwBgQ;MACxB5P,IAA2BqQ,OAA4BT;MACvDa,IAAWN;;EACZ;AACF;AC5YI,IAAMO,uBAAwB70B,CAAAA,OAAAA;AACnC,QAAA,CAAOJ,IAAUk1B,IAAyBC,EAAAA,IAAYvO,6BAA6BxmB,EAAAA;AACnF,QAAMqO,KAA6B;IACjC8a,IAAU;MACRkD,GAAG;MACHH,GAAG;MACHI,GAAG;MACHH,GAAG;;IAELc,IAAkB;IAClBC,GAAuB;MACrBV,CAACA,CAAAA,GAAiB;MAClBC,CAACA,CAAAA,GAAkB;MACnBC,CAACA,CAAAA,GAAgB;MACjBG,CAACA,CAAAA,GAAgB;MACjBC,CAACA,CAAAA,GAAkB;MACnBC,CAACA,CAAAA,GAAmB;MACpBC,CAACA,CAAAA,GAAiB;;IAEpBvV,IAAe;MAAE5f,GAAG;MAAG2C,GAAG;;IAC1B+c,IAAiB;MAAE1f,GAAG;MAAG2C,GAAG;;IAC5BgqB,IAAgB;MACd3sB,GAAGs4B;MACH31B,GAAG21B;;IAELzL,GAAc;MACZ7sB,GAAG;MACH2C,GAAG;;IAELkc,IAAoBwb,yBAAAA;;AAEtB,QAAA,EAAMllB,IAAEC,IAAOK,IAAEC,IAAoBG,GAAEC,IAAiBO,IAAEC,GAAAA,IACxDvO;AACF,QAAA,EAAM4U,GAAE7T,IAAuB4T,GAAE7T,GAAAA,IAA8BwB,eAAAA;AAC/D,QAAM8yB,KAAAA,CACHr0B,OAA4BD,GAA0B7I,KAAK6I,GAA0BlG;AAExF,QAAMy6B,KAA2C,CAC/ChK,2BAA2BrrB,EAAAA,GAC3ByrB,2BAA2BzrB,IAAUyO,EAAAA,GACrC+e,4BAA4BxtB,IAAUyO,EAAAA,CAAAA;AAGxC,SAAO,CACLymB,IACCI,CAAAA,OAAAA;AACC,UAAM3kB,KAAyC,CAAE;AACjD,UAAM4kB,KAAqBH;AAC3B,UAAM3lB,KAAe8lB,MAAsB7lB,iBAAiB/B,EAAAA;AAC5D,UAAMgC,KAA8BF,MAAgBlB,GAAAA;AAEpD1S,SAAKw5B,IAAiBG,CAAAA,OAAAA;AACpBt5B,iBAAWyU,IAAa6kB,GAAcF,IAAY3kB,EAAAA,KAAgB,CAAA,CAAA;IAAG,CAAA;AAGvET,oBAAgBvC,IAAsB8B,EAAAA;AACtC,QAAIE,IAAAA;AACFA,MAAAA,GAAAA;;AAEF,QAAA,CAAK5B,IAAAA;AACHmC,sBAAgB7C,IAAS,CAAA;;AAG3B,WAAOsD;EAAW,GAEpBlC,IACAzO,IACAm1B,EAAAA;AACD;AClEI,IAAMM,eAAeA,CAC1Br1B,IACA5D,IACAk5B,IACAC,IACA/T,OAAAA;AAEA,MAAIgU,KAA6B;AACjC,QAAMppB,KAAmBjQ,kBAAkBC,IAAS,CAAA,CAAA;AACpD,QAAA,CACEq5B,IACAC,IACAvpB,IACAD,IACAypB,EAAAA,IACEd,qBAAqB70B,EAAAA;AACzB,QAAA,CAAO41B,IAAsBC,IAAsBtU,EAAAA,IAAuBtV,qBACxEC,IACAC,IACAC,IACC0pB,CAAAA,OAAAA;AACC57B,WAAO,CAAE,GAAE47B,EAAAA;EAAqB,CAAA;AAGpC,QAAA,CAAOC,IAAuBC,IAAyBC,EAAAA,EAAAA,IACrD3U,sBACEthB,IACA5D,IACAmlB,IACApV,IACAD,IACAsV,EAAAA;AAGJ,QAAM0U,uBAAwBC,CAAAA,OAC5B36B,KAAK26B,EAAAA,EAAO1H,KAAMpe,CAAAA,OAAAA,CAAAA,CAAU8lB,GAAM9lB,EAAAA,CAAAA;AAEpC,QAAMnW,SAASA,CACbg7B,IACAkB,OAAAA;AAEA,QAAId,GAAAA,GAAAA;AACF,aAAO;;AAGT,UAAA,EACEe,IAAiBC,IACjBlkB,IAAQmkB,IAAQC,IAChBrkB,IAAYskB,IACZC,GAAAA,IACExB;AAEJ,UAAMmB,KAAkBC,MAAqB,CAAE;AAC/C,UAAMlkB,KAAAA,CAAAA,CAAWmkB,MAAAA,CAAaf;AAC9B,UAAMmB,KAAqC;MACzCzkB,IAAc/V,kBAAkBC,IAASi6B,IAAiBjkB,EAAAA;MAC1DikB,IAAAA;MACAjkB,IAAAA;;AAGF,QAAIskB,IAAiB;AACnBV,MAAAA,GAAsBW,EAAAA;AACtB,aAAO;IACT;AAEA,UAAMC,KACJR,MACAP,GACE/5B,WAAW,CAAA,GAAI66B,IAAmB;MAChCxkB,IAAAA;;AAIN,UAAM0kB,KAAiBnB,GACrB55B,WAAW,CAAA,GAAI66B,IAAmB;MAChCzL,IAAiB3J;MACjBmC,IAAuBkT;;AAI3BZ,IAAAA,GACEl6B,WAAW,CAAE,GAAE66B,IAAmB;MAChCjT,IAAuBkT;MACvBjT,IAAuBkT;;AAI3B,UAAMC,KAAuBZ,qBAAqBU,EAAAA;AAClD,UAAMG,KAAuBb,qBAAqBW,EAAAA;AAClD,UAAMG,KACJF,MAAwBC,MAAAA,CAAyBh7B,cAAcs6B,EAAAA,KAAoBjkB;AAErFojB,IAAAA,KAA6B;AAE7B,QAAIwB,IAAAA;AACFzB,MAAAA,GAAUL,IAAY;QACpBxR,IAAuBkT;QACvBjT,IAAuBkT;;;AAI3B,WAAOG;EAAO;AAGhB,SAAO,CACL,MAAA;AACE,UAAA,EAAMC,IAAE7N,IAA4B9b,IAAEC,IAAoBW,IAAEC,GAAAA,IAC1DjC;AACF,UAAMgrB,KAAgB5nB,iBAAiB8Z,EAAAA;AACvC,UAAMtgB,KAAa,CAAC8sB,GAAAA,GAAwBH,GAAAA,GAAwBM,GAAAA,CAAAA;AACpE,UAAMxmB,KAA8BpB,GAAAA;AAEpC2B,oBAAgBvC,IAAsB2pB,EAAAA;AACtC3nB,IAAAA,GAAAA;AAEA,WAAOhQ,KAAKoE,iBAAiBmF,EAAAA;EAAW,GAE1C5O,QACA,OAAO;IACLi9B,IAAsB5V;IACtB6V,IAAsBjrB;MAExB;IACEkrB,IAAyBnrB;IACzBorB,IAA0BrB;KAE5BN,EAAAA;AACD;AC1MH,IAAM4B,KAAyD,oBAAI/0B;AAO5D,IAAMg1B,cAAcA,CAACx3B,IAAiBy3B,OAAAA;AAC3CF,KAAkB9zB,IAAIzD,IAAQy3B,EAAAA;AAAW;AAOpC,IAAMC,iBAAkB13B,CAAAA,OAAAA;AAC7Bu3B,KAAkB/zB,OAAOxD,EAAAA;AAAO;AAO3B,IAAM23B,cAAe33B,CAAAA,OAC1Bu3B,GAAkBp0B,IAAInD,EAAAA;AC+RjB,IAAM43B,oBAA6CA,CACxD53B,IACA5D,IACAy7B,OAAAA;AAEA,QAAA,EAAMC,IAAE52B,GAAAA,IAAuBgB,eAAAA;AAC/B,QAAM61B,KAAkB5jB,cAAcnU,EAAAA;AACtC,QAAMg4B,KAAiBD,KAAkB/3B,KAASA,GAAOA;AACzD,QAAMi4B,KAAoBN,YAAYK,EAAAA;AACtC,MAAI57B,MAAAA,CAAY67B,IAAmB;AACjC,QAAI31B,KAAY;AAChB,UAAMwG,KAA6B,CAAA;AACnC,UAAMovB,KAAsE,CAAE;AAC9E,UAAMC,kBAAmB/8B,CAAAA,OAAAA;AACvB,YAAMg9B,KAA6BC,0BAA0Bj9B,EAAAA;AAC7D,YAAMk9B,KAAiB5vB,8BACrB6vB,CAAAA;AAEF,aAAOD,KACHA,GAAeF,IAA4B,IAAA,IAC3CA;IAA0B;AAEhC,UAAMI,KAAkC18B,WACtC,CAAE,GACFoF,GAAAA,GACAi3B,gBAAgB/7B,EAAAA,CAAAA;AAElB,UAAA,CAAOq8B,IAAgBC,IAAoBC,EAAAA,IACzC35B,uBAAAA;AACF,UAAA,CAAO45B,IAAkBC,IAAsBC,EAAAA,IAC7C95B,uBAAuB64B,EAAAA;AACzB,UAAM94B,eAA0CA,CAACg6B,IAAMxxB,OAAAA;AACrDuxB,MAAAA,GAAqBC,IAAMxxB,EAAAA;AAC3BoxB,MAAAA,GAAmBI,IAAMxxB,EAAAA;IAAK;AAEhC,UAAA,CAAOyxB,IAAiBC,IAAcC,IAAaC,IAAgBC,EAAAA,IACjE/D,aACEr1B,IACAw4B,IACA,MAAMl2B,IACN,CAAA,EAAG+zB,IAAAA,IAAiBjkB,IAAAA,GAAAA,GAAAA,EAAYsR,IAAAA,IAAuBC,IAAAA,GAAAA,MAAAA;AACrD,YAAA,EAAMgI,IACJ3hB,IAAYoa,IACZ3T,IAAiB0a,IACjBva,IAAuBgb,IACvB3a,IAAgBshB,IAChBphB,IAAakT,IACb9b,GAAAA,IACEmb;AAEJ,YAAA,EAAME,IACJC,IAAoBC,IACpBC,IAAsBC,IACtBC,IAAqBC,IACrBC,GAAAA,IACER;AAEJ5kB,mBAAa,WAAW,CACtBs6B,IACA;QACE9oB,aAAa;UACX+oB,aAAAA,CAAAA,CAAetvB;UACfuvB,kBAAAA,CAAAA,CAAoB9oB;UACpB/E,wBAAAA,CAAAA,CAA0BkF;UAC1BijB,qBAAAA,CAAAA,CAAuBhQ;UACvBkQ,uBAAAA,CAAAA,CAAyBhQ;UACzB2Q,sBAAAA,CAAAA,CAAwBzQ;UACxBuQ,0BAAAA,CAAAA,CAA4BrQ;UAC5B2H,iBAAAA,CAAAA,CAAmB7a;UACnBuoB,cAAAA,CAAAA,CAAgBroB;UAChB3H,QAAAA,CAAAA,CAAUjB;;QAEZlM,gBAAgBg6B,MAAmB,CAAE;QACrC/5B,OAAAA,CAAAA,CAAS8V;;IAEX,GAGHqnB,CAAAA,OAAgB16B,aAAa,UAAU,CAACs6B,IAAUI,EAAAA,CAAAA,CAAAA;AAGvD,UAAMh3B,UAAWsyB,CAAAA,OAAAA;AACf2C,qBAAeM,EAAAA;AACfr0B,sBAAgBmF,EAAAA;AAEhBxG,MAAAA,KAAY;AAEZvD,mBAAa,aAAa,CAACs6B,IAAUtE,EAAAA,CAAAA;AACrC2D,MAAAA,GAAAA;AACAG,MAAAA,GAAAA;IAAsB;AAGxB,UAAMQ,KAA8B;MAClCj9B,QAAQhB,IAA6Bs+B,IAAAA;AACnC,YAAIt+B,IAAY;AACd,gBAAMu+B,KAAOD,KAAOx4B,GAAAA,IAAuB,CAAE;AAC7C,gBAAM7E,KAAiBnB,eACrBs9B,IACA18B,WAAW69B,IAAMxB,gBAAgB/8B,EAAAA,CAAAA,CAAAA;AAEnC,cAAA,CAAKW,cAAcM,EAAAA,GAAiB;AAClCP,uBAAW08B,IAAgBn8B,EAAAA;AAC3B48B,YAAAA,GAAa;cAAE5C,IAAiBh6B;;UAClC;QACF;AACA,eAAOP,WAAW,CAAE,GAAE08B,EAAAA;MACvB;MACDoB,IAAIhB;MACJiB,KAAKA,CAACd,IAAMe,OAAAA;AACV,YAAIf,MAAQe,IAAAA;AACVjB,UAAAA,GAAqBE,IAAMe,EAAAA;;MAC7B;MAEFzrB,QAAAA;AACE,cAAA,EAAM0rB,IAAE5C,IAAoB6C,IAAE5C,GAAAA,IAAyB8B,GAAAA;AACvD,cAAA,EAAM5U,GAAE/V,GAAAA,IAAoB4oB;AAC5B,cAAA,EAAM3f,IACJC,IAAaH,IACbC,IAAegN,IACfC,IAAcC,GACdC,IAAY+E,IACZN,IAAQ8Q,IACRhN,IAAgBxW,IAChBC,GAAAA,IACE0gB;AACJ,eAAOt7B,WACL,CAAA,GACA;UACE83B,cAAcnc;UACdqc,gBAAgBvc;UAChBmO,eAAelB;UACfa,aAAaX;UACb6P,mBAAmB;YACjB2F,OAAOxjB,GAAmBkY;YAC1BuL,KAAKzjB,GAAmBmY;;UAE1B/uB,SAASqpB;UACTnvB,iBAAiBizB;UACjBmN,cAAc7rB;UACdjM,WAAAA;;MAGL;MACD1C,WAAAA;AACE,cAAA,EAAMoN,IACJC,IAAOC,IACPC,IAAKsc,IACLN,IAAQ/b,GACRC,IAASG,IACTC,IAAQH,IACRC,IAAoBoV,IACpBC,GAAAA,IACEuW,GAAe9B;AACnB,cAAA,EAAMgD,IAAE7e,IAAW8e,IAAE1e,GAAAA,IAAcud,GAAe7B;AAClD,cAAMiD,8BACJniB,CAAAA,OAAAA;AAEA,gBAAA,EAAM8D,IAAEhF,IAAO+E,IAAElB,IAAMhB,IAAE1B,GAAAA,IAAeD;AACxC,iBAAO;YACLsC,WAAWrC;YACXsC,OAAOI;YACPF,QAAQ3D;;QACT;AAEH,cAAMsjB,kCACJC,CAAAA,OAAAA;AAEA,gBAAA,EAAMC,IAAEjf,IAAoBkf,IAAEjf,GAAAA,IAAW+e;AACzC,gBAAMG,KAAsBL,4BAA4B9e,GAAqB,CAAA,CAAA;AAE7E,iBAAO3f,WAAW,CAAE,GAAE8+B,IAAqB;YACzCC,OAAOA,MAAAA;AACL,oBAAM78B,KAASu8B,4BAA4B7e,GAAAA,CAAAA;AAC3Cud,cAAAA,GAAa;gBAAEvC,IAAiB;;AAChC,qBAAO14B;YAAM;;QAEf;AAEJ,eAAOlC,WACL,CAAA,GACA;UACEkE,QAAQiN;UACRpN,MAAMsN;UACNrN,SAASqpB,MAAY9b;UACrBtN,UAAUsN;UACVnN,SAASuN,MAAYJ;UACrB2b,qBAAqBzb;UACrB0b,oBAAoBrG;UACpBkY,qBAAqBN,gCAAgChf,EAAAA;UACrDuf,mBAAmBP,gCAAgC5e,EAAAA;;MAGxD;MACD1hB,QAASkY,CAAAA,OAAqB6mB,GAAa;QAAE7mB,IAAAA;QAAQD,IAAc;;MACnE1P,SAASlD,KAAKkD,SAAS,KAAA;MACvBu4B,QAAmCA,CAAAA,OACjC9C,GAA8B18B,KAAKw/B,EAAAA,EAAQ,CAAA,CAAA;;AAK/Ct3B,SAAKoF,IAAY,CAACswB,EAAAA,CAAAA;AAGlB5B,gBAAYQ,IAAgBqB,EAAAA;AAG5B4B,kCAA8BC,GAAetD,mBAAmB,CAC9DyB,IACAZ,IACAP,EAAAA,CAAAA;AAGF,QACE9jB,qBACE+kB,GAAe9B,GAAwBxpB,IAAAA,CACtCkqB,MAAmB/3B,GAAOI,MAAAA,GAE7B;AACAqC,cAAQ,IAAA;AACR,aAAO42B;IACT;AAEA31B,SAAKoF,IAAYkwB,GAAAA,CAAAA;AAEjBj6B,iBAAa,eAAe,CAACs6B,EAAAA,CAAAA;AAE7BA,IAAAA,GAASn/B,OAAAA;AAET,WAAOm/B;EACT;AACA,SAAOpB;AAAkB;AAG3BL,kBAAkBoD,SAAUG,CAAAA,OAAAA;AAC1B,QAAMC,KAAQn/B,QAAQk/B,EAAAA;AACtB,QAAME,KACJD,KAAQD,KAAU,CAACA,EAAAA;AACrB,QAAMn9B,KAASq9B,GAAa94B,IACzBy4B,CAAAA,OAAWC,8BAA8BD,IAAQpD,iBAAAA,EAAmB,CAAA,CAAA;AAEvE0D,aAAWD,EAAAA;AACX,SAAOD,KAAQp9B,KAAUA,GAAO,CAAA;AAAU;AAE5C45B,kBAAkB2D,QAAS9D,CAAAA,OAAAA;AACzB,QAAM+D,KAAY/D,MAAeA,GAAiC73B;AAClE,QAAMA,KAAWtG,WAAWkiC,EAAAA,KAAcA,GAAAA;AAC1C,SAAOC,cAAc77B,EAAAA,KAAAA,CAAAA,CAAe+3B,YAAY/3B,GAASI,MAAAA;AAAO;AAElE43B,kBAAkBp3B,MAAM,MAAA;AACtB,QAAA,EAAMk7B,GACJj7B,IAAqB8T,GACrB7T,IAAyB8T,GACzB7T,IAAuBg7B,GACvB/6B,IAAeg7B,IACfv6B,IAA4Bw6B,IAC5Bv6B,IAAqBmT,GACrB1T,IAAyB+6B,GACzB96B,IAAyB82B,IACzB52B,IAAkB66B,IAClB56B,GAAAA,IACEe,eAAAA;AACJ,SAAOpG,WACL,CAAA,GACA;IACEkgC,gBAAgBv7B;IAChBw7B,oBAAoBv7B;IACpBw7B,kBAAkBv7B;IAClByW,gBAAgBxW;IAChBjB,6BAA6B0B;IAC7BhB,sBAAsBiB;IAEtBf,0BAA0BQ;IAC1Bo7B,0BAA0Bn7B;IAC1BV,mBAAmBY;IACnBk7B,mBAAmBj7B;;AAEtB;AAEHy2B,kBAAkBp7B,QAAQE;AAC1Bk7B,kBAAkByE,oBAAoBC;;;AnD5kBtC,IAAM,sBAAsB,MAAM;AAChC,QAAM,uBAAuB,EAAwB,EAAE,UAAU,0BAA0B,CAAC;AAE5F,MAAI,CAAC,qBAAsB;AAE3B,oBAAkB,OAAO,CAAC,IAAmB,EAAkB,CAAC;AAEhE,aAAW,WAAW,sBAAsB;AAC1C,sBAAkB,SAAS,CAAC,CAAC;AAAA,EAC/B;AACF;AAEA,EAAkB,MAAM;AACtB,sBAAoB;AACtB,CAAC;",
  "names": ["createCache", "options", "update", "o", "_initialValue", "i", "_equal", "u", "_alwaysUpdateValues", "_value", "_previous", "cacheUpdateContextual", "newValue", "force", "curr", "newVal", "changed", "cacheUpdateIsolated", "getCurrentCache", "isBrowser", "window", "HTMLElement", "document", "wnd", "mathMax", "Math", "max", "mathMin", "min", "mathRound", "round", "mathAbs", "abs", "mathSign", "sign", "cAF", "cancelAnimationFrame", "rAF", "requestAnimationFrame", "setT", "setTimeout", "clearT", "clearTimeout", "getApi", "name", "MutationObserverConstructor", "IntersectionObserverConstructor", "ResizeObserverConstructor", "scrollT", "isUndefined", "obj", "isNull", "isNumber", "isString", "isBoolean", "isFunction", "isArray", "Array", "isObject", "isArrayLike", "length", "lengthCorrectFormat", "isPlainObject", "constructor", "Object", "isHTMLElement", "isElement", "Element", "animationCurrentTime", "performance", "now", "animateNumber", "from", "to", "duration", "onFrame", "easing", "animationFrameId", "timeStart", "finalDuration", "frame", "complete", "timeNow", "timeElapsed", "stopAnimation", "percent", "progress", "animationCompleted", "each", "source", "callback", "keys", "key", "inArray", "arr", "item", "indexOf", "concat", "a", "b", "push", "array", "items", "arrayIsSingleItem", "prototype", "apply", "createOrKeepArray", "value", "isEmptyArray", "deduplicateArray", "Set", "runEachAndClear", "args", "keep", "runFn", "fn", "strPaddingTop", "strPaddingRight", "strPaddingLeft", "strPaddingBottom", "strMarginLeft", "strMarginRight", "strMarginBottom", "strOverflowX", "strOverflowY", "strWidth", "strHeight", "strVisible", "strHidden", "strScroll", "capitalizeFirstLetter", "str", "finalStr", "String", "toUpperCase", "slice", "equal", "props", "propMutation", "result", "prop", "compareA", "compareB", "equalWH", "equalXY", "equalTRBL", "bind", "selfClearTimeout", "timeout", "id", "setTFn", "clearTFn", "getDebouncer", "debounceTiming", "debounceTimingResult", "schedule", "clear", "task", "timeoutId", "_debouncer", "debounce", "functionToDebounce", "_debounceTiming", "_timeout", "_maxDebounceTiming", "_maxDelay", "S", "_leading", "m", "_mergeParams", "cancelMaxTimeoutDebouncer", "cancelTimeoutDebounder", "prevArguments", "latestArguments", "leadingInvoked", "invokeFunctionToDebounce", "this", "mergeParms", "flush", "debouncedFn", "arguments", "timeoutDebouncer", "maxDelayDebouncer", "mergeParamsResult", "invokedArgs", "boundInvoke", "undefined", "_flush", "hasOwnProperty", "call", "assignDeep", "target", "object1", "object2", "object3", "object4", "object5", "object6", "sources", "_", "copy", "copyIsArray", "src", "clone", "removeUndefinedProperties", "deep", "isEmptyObject", "noop", "capNumber", "number", "getDomTokensArray", "tokens", "split", "filter", "token", "getAttr", "elm", "attrName", "getAttribute", "hasAttr", "hasAttribute", "setAttrs", "attrNames", "setAttribute", "removeAttrs", "removeAttribute", "domTokenListAttr", "initialArr", "setElmAttr", "domTokenListOperation", "operationTokens", "operation", "initialArrSet", "join", "_remove", "removeTokens", "_add", "addTokens", "_has", "hasTokens", "tokenSet", "reduce", "boolean", "includes", "removeAttrClass", "addAttrClass", "addRemoveAttrClass", "add", "hasAttrClass", "createDomTokenListClass", "removeClass", "className", "addClass", "find", "selector", "rootElm", "querySelectorAll", "findFirst", "querySelector", "is", "matches", "isBodyElement", "contents", "childNodes", "parent", "parentElement", "closest", "getFocusedElement", "doc", "activeElement", "liesBetween", "highBoundarySelector", "deepBoundarySelector", "closestHighBoundaryElm", "closestDeepBoundaryElm", "deepBoundaryIsValid", "removeElements", "nodes", "node", "parentElm", "removeChild", "appendChildren", "children", "child", "appendChild", "trustedTypePolicy", "getTrustedTypePolicy", "setTrustedTypePolicy", "newTrustedTypePolicy", "createDiv", "classNames", "div", "createElement", "createDOM", "html", "createdDiv", "trustedTypesPolicy", "trimmedHtml", "trim", "innerHTML", "createHTML", "getCSSVal", "computedStyle", "getPropertyValue", "validFiniteNumber", "notNaN", "isFinite", "parseToZeroOrNumber", "parseFloat", "roundCssNumber", "numberToCssPx", "setStyles", "styles", "rawValue", "elmStyle", "style", "setProperty", "_unused", "getStyles", "pseudoElm", "getSingleStyle", "getStylesResult", "getComputedStyle", "topRightBottomLeft", "propertyPrefix", "propertySuffix", "finalPrefix", "finalSuffix", "top", "right", "bottom", "left", "t", "r", "l", "getTrasformTranslateValue", "isHorizontal", "x", "y", "elementHasDimensions", "offsetWidth", "offsetHeight", "getClientRects", "zeroObj", "w", "h", "getElmWidthHeightProperty", "property", "getWindowSize", "customWnd", "getOffsetSize", "getClientSize", "getScrollSize", "getFractionalSize", "cssWidth", "cssHeight", "getBoundingClientRect", "hasDimensions", "domRectHasDimensions", "rect", "domRectAppeared", "currContentRect", "prevContentRect", "rectHasDimensions", "rectHadDimensions", "removeEventListener", "eventNames", "listener", "capture", "eventName", "addEventListener", "_ref", "passive", "_passive", "_capture", "once", "_once", "nativeOptions", "map", "finalListener", "evt", "stopPropagation", "preventDefault", "stopAndPrevent", "scrollElementTo", "position", "scrollLeft", "scrollTop", "getElementScroll", "getZeroScrollCoordinates", "_start", "_end", "sanitizeScrollCoordinates", "rawScrollCoordinates", "overflowAmount", "D", "M", "sanitizeAxis", "start", "end", "amount", "newStart", "newEnd", "startAbs", "endAbs", "startX", "endX", "startY", "endY", "isDefaultDirectionScrollCoordinates", "getAxis", "getScrollCoordinatesPercent", "currentScroll", "current", "focusElement", "element", "focus", "preventScroll", "manageListener", "createEventListenerHub", "initialEventListeners", "events", "Map", "removeEvent", "eventSet", "get", "currListener", "forEach", "addEvent", "nameOrEventListeners", "listenerOrPure", "set", "eventListenerKeys", "offFns", "eventListener", "triggerEvent", "event", "pluginModules", "staticPluginModuleInstances", "addPlugins", "addedPlugin", "plugin", "registerPluginModuleInstances", "staticObj", "instanceInfo", "static", "osStatic", "instance", "osInstance", "instanceObj", "instancePluginMap", "ctor", "getStaticPluginModuleInstance", "pluginModuleName", "optionsValidationPluginModuleName", "dataAttributePrefix", "classNameEnvironment", "classNameEnvironmentScrollbarHidden", "dataAttributeInitialize", "dataValueNoClipping", "dataAttributeHtmlBody", "dataAttributeHost", "dataValueHostIsHost", "dataAttributeViewport", "dataValueViewportOverflowXPrefix", "dataValueViewportOverflowYPrefix", "dataValueViewportArrange", "dataValueViewportMeasuring", "dataValueViewportScrolling", "dataValueViewportScrollbarHidden", "dataValueViewportNoContent", "dataAttributePadding", "dataAttributeContent", "classNameSizeObserver", "classNameSizeObserverAppear", "classNameSizeObserverListener", "classNameSizeObserverListenerScroll", "classNameSizeObserverListenerItem", "classNameSizeObserverListenerItemFinal", "classNameTrinsicObserver", "classNameScrollbarThemeNone", "classNameScrollbar", "classNameScrollbarRtl", "classNameScrollbarHorizontal", "classNameScrollbarVertical", "classNameScrollbarTrack", "classNameScrollbarHandle", "classNameScrollbarVisible", "classNameScrollbarCornerless", "classNameScrollbarInteraction", "classNameScrollbarUnusable", "classNameScrollbarAutoHide", "classNameScrollbarAutoHideHidden", "classNameScrollbarWheel", "classNameScrollbarTrackInteractive", "classNameScrollbarHandleInteractive", "sizeObserverPluginName", "SizeObserverPlugin", "listenerElement", "onSizeChangedCallback", "observeAppearChange", "scrollAmount", "scrollEventName", "observerElementChildren", "observerElementChildrenRoot", "shrinkElement", "lastChild", "expandElement", "firstChild", "expandElementChild", "cacheSize", "currSize", "isDirty", "rAFId", "reset", "onResized", "appear", "onScroll", "scrollEvent", "destroyFns", "getShowNativeOverlaidScrollbars", "checkOption", "env", "k", "_nativeScrollbarsOverlaid", "showNativeOverlaidScrollbarsOption", "showNativeOverlaidScrollbarsChanged", "overflowIsVisible", "overflow", "overflowBehaviorToOverflowStyle", "overflowBehavior", "replace", "overflowCssValueToOverflowStyle", "cssValue", "hasOverflow", "finalCssValue", "getElementOverflowStyle", "overflowX", "overflowY", "scrollbarsHidingPluginName", "clickScrollPluginModuleName", "ClickScrollPlugin", "static", "moveHandleRelative", "targetOffset", "handleLength", "onClickScrollCompleted", "stopped", "stopPressAnimation", "noop", "linearScrollMs", "easedScrollMs", "setPressAnimationTimeout", "clearPressAnimationTimeout", "selfClearTimeout", "targetOffsetSign", "Math", "sign", "handleLengthWithTargetSign", "handleLengthWithTargetSignHalf", "easing", "x", "easedEndPressAnimation", "from", "to", "animateNumber", "linearPressAnimation", "linearFrom", "msFactor", "progress", "_", "completed", "stopClickAnimation", "clickAnimationProgress", "clickAnimationCompleted", "remainingScrollDistance", "continueWithPress", "remainingLinearScrollDistance", "linearBridge", "abs", "stopClick", "opsStringify", "value", "JSON", "stringify", "val", "isFunction", "getPropByPath", "obj", "path", "split", "reduce", "o", "prop", "hasOwnProperty", "defaultOptions", "paddingAbsolute", "showNativeOverlaidScrollbars", "update", "elementEvents", "debounce", "attributes", "ignoreMutation", "overflow", "y", "scrollbars", "theme", "visibility", "autoHide", "autoHideDelay", "autoHideSuspend", "dragScroll", "clickScroll", "pointers", "getOptionsDiff", "currOptions", "newOptions", "diff", "optionsKeys", "concat", "keys", "each", "optionKey", "currOptionValue", "newOptionValue", "isObject", "assignDeep", "isEmptyObject", "isDiff", "isArray", "_unused", "createOptionCheck", "options", "changedOptions", "force", "undefined", "nonce", "getNonce", "setNonce", "newNonce", "environmentInstance", "createEnvironment", "getNativeScrollbarSize", "measureElm", "measureElmChild", "clear", "appendChildren", "document", "body", "cSize", "getClientSize", "oSize", "getOffsetSize", "fSize", "getFractionalSize", "removeElements", "h", "w", "getNativeScrollbarsHiding", "testElm", "result", "revertClass", "addClass", "classNameEnvironmentScrollbarHidden", "getStyles", "envStyle", "classNameEnvironment", "envDOM", "createDOM", "envElm", "envChildElm", "firstChild", "styleElm", "lastChild", "addEvent", "triggerEvent", "createEventListenerHub", "updateNativeScrollbarSizeCache", "getNativeScrollbarSizeCache", "createCache", "_initialValue", "_equal", "equalXY", "bind", "nativeScrollbarsSize", "nativeScrollbarsHiding", "nativeScrollbarsOverlaid", "staticDefaultInitialization", "elements", "host", "padding", "viewport", "target", "isBodyElement", "content", "slot", "cancel", "staticDefaultOptions", "getDefaultOptions", "getDefaultInitialization", "env", "_nativeScrollbarsSize", "_nativeScrollbarsOverlaid", "_nativeScrollbarsHiding", "_scrollTimeline", "scrollT", "_addResizeListener", "_getDefaultInitialization", "_setDefaultInitialization", "newInitializationStrategy", "_getDefaultOptions", "_setDefaultOptions", "newDefaultOptions", "_staticDefaultInitialization", "_staticDefaultOptions", "removeAttrs", "addEventListener", "wnd", "matchMedia", "addZoomListener", "onZoom", "media", "devicePixelRatio", "_once", "updatedNativeScrollbarSize", "nativeScrollbarSizeChanged", "getEnvironment", "createEventContentChange", "callback", "eventContentChange", "destroyed", "map", "WeakMap", "destroy", "updateElements", "getElements", "eventElmList", "item", "selector", "eventNames", "find", "elm", "entries", "get", "isTargetChild", "contains", "removeListener", "event", "delete", "set", "push", "runEachAndClear", "createDOMObserver", "isContentObserver", "isConnected", "et", "_attributes", "ct", "_styleChangingAttributes", "rt", "_eventContentChange", "it", "_nestedTargetSelector", "lt", "_ignoreTargetChange", "ut", "_ignoreContentChange", "debouncedEventContentChange", "_debounceTiming", "_maxDebounceTiming", "destroyEventContentChange", "updateEventContentChangeElements", "finalAttributes", "finalStyleChangingAttributes", "observedAttributes", "observerCallback", "fromRecords", "mutations", "isEmptyArray", "ignoreTargetChange", "ignoreContentChange", "totalChangedNodes", "targetChangedAttrs", "targetStyleChanged", "contentChanged", "mutation", "attributeName", "mutationTarget", "type", "oldValue", "addedNodes", "removedNodes", "isAttributesType", "isChildListType", "targetIsMutationTarget", "isAttrChange", "newValue", "getAttr", "attributeValue", "isString", "attributeChanged", "styleChangingAttrChanged", "inArray", "contentAttrChanged", "isNestedTarget", "is", "baseAssertion", "contentFinalChanged", "node", "deduplicateArray", "arr", "args", "apply", "mutationObserver", "MutationObserverConstructor", "observe", "attributeOldValue", "attributeFilter", "subtree", "childList", "characterData", "disconnect", "_flush", "takeRecords", "resizeObserverBoxSupport", "createSizeObserver", "onSizeChangedCallback", "_appear", "observeAppearChange", "sizeObserverPlugin", "getStaticPluginModuleInstance", "sizeObserverPluginName", "updateResizeObserverContentRectCache", "_alwaysUpdateValues", "destroyFns", "polyfillElements", "classNameSizeObserver", "classNameSizeObserverListener", "polyfillRootElement", "polyfillTargetElement", "onSizeChangedCallbackProxy", "sizeChangedContext", "isResizeObserverCall", "skip", "appear", "resizeObserverEntry", "currContentRect", "prevContentRect", "contentRect", "hasDimensions", "domRectHasDimensions", "domRectAppeared", "_sizeChanged", "ResizeObserverConstructor", "isBoolean", "detectSupportResizeObserver", "box", "debouncedOnSizeChangedCallbackProxy", "resizeObserverCallback", "contentBoxResizeObserver", "borderBoxResizeObserver", "pluginAppearCallback", "pluginDestroyFns", "classNameSizeObserverAppear", "createTrinsicObserver", "onTrinsicChangedCallback", "intersectionObserverInstance", "isHeightIntrinsic", "ioEntryOrSize", "isIntersecting", "intersectionRatio", "trinsicObserver", "createDiv", "classNameTrinsicObserver", "updateHeightIntrinsicCache", "triggerOnTrinsicChangedCallback", "updateValue", "heightIntrinsic", "heightIntrinsicChanged", "intersectionObserverCallback", "pop", "IntersectionObserverConstructor", "root", "onSizeChanged", "newSize", "createObserversSetup", "structureSetupElements", "structureSetupState", "getCurrentOption", "onObserversUpdated", "debounceTimeout", "debounceMaxDelay", "updateContentMutationObserver", "destroyContentMutationObserver", "prevDirectionIsRTL", "hostSelector", "dataAttributeHost", "viewportSelector", "dataAttributeViewport", "baseStyleChangingAttrs", "dt", "_target", "vt", "_host", "L", "_viewport", "gt", "_scrollOffsetElement", "ht", "_content", "V", "_viewportIsTarget", "bt", "_isBody", "wt", "_viewportHasClass", "yt", "_viewportAddRemoveClass", "St", "_removeScrollObscuringStyles", "getDirectionIsRTL", "state", "_heightIntrinsic", "_directionIsRTL", "scrollbarsHidingPlugin", "scrollbarsHidingPluginName", "updateContentSizeCache", "equalWH", "undoViewportArrange", "_viewportArrangement", "_undoViewportArrange", "viewportIsTargetBody", "noClipping", "hasAttrClass", "dataValueNoClipping", "isArranged", "dataValueViewportArrange", "scrollOffset", "getElementScroll", "revertScrollObscuringStyles", "revertMeasuring", "dataValueViewportMeasuring", "redoViewportArrange", "viewportScroll", "getScrollSize", "fractional", "scrollElementTo", "onObserversUpdatedDebounced", "_mergeParams", "prev", "curr", "prevObj", "currObj", "key", "setDirection", "updateHints", "newDirectionIsRTL", "_directionChanged", "onTrinsicChanged", "heightIntrinsicCache", "_heightIntrinsicChanged", "exclusiveSizeChange", "updateFn", "onContentMutation", "contentChangedThroughEvent", "_contentMutation", "onHostMutation", "_hostMutation", "constructTrinsicObserver", "updateTrinsicObserver", "constructSizeObserver", "constructHostMutationObserver", "updateHostMutationObserver", "viewportIsTargetResizeObserver", "length", "onWindowResizeDebounced", "_leading", "destroySizeObserver", "destroyTrinsicObserver", "destroyHostMutationObserver", "removeResizeListener", "_scrollbarSizeChanged", "_checkOption", "_takeRecords", "_force", "attributesChanged", "elementEventsChanged", "debounceValue", "debounceChanged", "contentMutationObserverChanged", "ignoreMutationFromOptions", "construct", "ignore", "liesBetween", "closest", "classNameScrollbar", "timeout", "maxWait", "isNumber", "hostUpdateResult", "trinsicUpdateResult", "contentUpdateResult", "resolveInitialization", "staticInitializationElement", "fallbackStaticInitializationElement", "defaultStaticInitializationElement", "staticInitializationElementValue", "staticInitialization", "isUndefined", "resolvedInitialization", "dynamicInitializationElement", "fallbackDynamicInitializationElement", "defaultDynamicInitializationElement", "dynamicInitializationElementValue", "dynamicInitialization", "isHTMLElement", "cancelInitialization", "isBody", "cancelInitializationValue", "k", "U", "K", "defaultNativeScrollbarsOverlaid", "defaultbody", "resolvedNativeScrollbarsOverlaid", "resolvedDocumentScrollingElement", "finalNativeScrollbarsOverlaid", "finalDocumentScrollingElement", "isNull", "createScrollbarsSetupElements", "scrollbarsSetupEvents", "cssCustomPropViewportPercent", "cssCustomPropScrollPercent", "cssCustomPropScrollDirection", "defaultInitScrollbars", "defaultInitScrollbarsSlot", "At", "_targetIsElm", "scrollbarsInit", "initScrollbarsSlot", "horizontalScrollbars", "verticalScrollbars", "evaluatedScrollbarSlot", "generalDynamicInitializationElement", "initScrollTimeline", "axis", "currAnimation", "currAnimationTransform", "timeline", "source", "cancelAnimation", "_setScrollPercentAnimation", "structure", "Dt", "_scrollCoordinates", "defaultDirectionScroll", "isDefaultDirectionScrollCoordinates", "isHorizontal", "transformArray", "getTrasformTranslateValue", "transform", "reverse", "_handle", "animate", "scrollTimeline", "getViewportPercent", "Rt", "_overflowAmount", "Vt", "_overflowEdge", "getAxisValue", "axisViewportSize", "axisOverflowAmount", "capNumber", "scrollbarStructureAddRemoveClass", "scrollbarStructures", "classNames", "add", "action", "removeClass", "scrollbarStructure", "_scrollbar", "scrollbarStyle", "elmStyle", "styles", "setStyles", "scrollbarsAddRemoveClass", "className", "onlyHorizontal", "singleAxis", "runHorizontal", "runVertical", "refreshScrollbarsHandleLength", "viewportPercent", "createScrollbarStyleFn", "axisViewportPercent", "roundCssNumber", "refreshScrollbarsHandleOffset", "scrollPercent", "getScrollCoordinatesPercent", "axisScrollPercent", "refreshScrollbarsScrollCoordinates", "axisIsDefaultDirectionScrollCoordinates", "forEach", "refreshScrollbarsScrollbarOffset", "isDefaultDirectionScroll", "styleScrollbarPosition", "Lt", "parent", "getTranslateValue", "axisIsDefaultCoordinates", "px", "numberToCssPx", "generateScrollbarDOM", "xyKey", "scrollbarClassName", "classNameScrollbarHorizontal", "classNameScrollbarVertical", "scrollbar", "track", "classNameScrollbarTrack", "handle", "classNameScrollbarHandle", "_track", "generateHorizontalScrollbarStructure", "generateVerticalScrollbarStructure", "appendElements", "_refreshScrollbarsHandleLength", "_refreshScrollbarsHandleOffset", "_refreshScrollbarsScrollCoordinates", "_refreshScrollbarsScrollbarOffset", "_scrollbarsAddRemoveClass", "_horizontal", "_scrollbarStructures", "_clone", "_style", "_vertical", "createScrollbarsSetupEvents", "scrollbarHandlePointerInteraction", "Gt", "_documentElm", "Ut", "Mt", "wheelTimeout", "clearWheelTimeout", "scrollSnapScrollTransitionTimeout", "clearScrollSnapScrollTransitionTimeout", "scrollOffsetElementScrollBy", "coordinates", "scrollBy", "behavior", "left", "top", "createInteractiveScrollEvents", "releasePointerCaptureEvents", "clientXYKey", "widthHeightKey", "strWidth", "strHeight", "leftTopKey", "whKey", "createRelativeHandleMove", "mouseDownScroll", "invertedScale", "deltaMovement", "handleTrackDiff", "scrollDeltaPercent", "scrollDelta", "pointerdownCleanupFns", "pointerDownEvent", "isDragScroll", "pointerCaptureElement", "scrollbarOptions", "dragClickScrollOption", "button", "isPrimary", "pointerType", "continuePointerDown", "includes", "instantClickScroll", "shiftKey", "getHandleRect", "getBoundingClientRect", "getTrackRect", "getHandleOffset", "handleRect", "trackRect", "axisScale", "mathRound", "pointerDownOffset", "handleCenter", "relativeTrackPointerOffset", "startOffset", "releasePointerCapture", "pointerUpEvent", "pointerupCleanupFns", "pointerId", "nonAnimatedScroll", "preventDefault", "_passive", "pointerMoveEvent", "withoutSnapScrollOffset", "withSnapScrollOffset", "snapScrollDiff", "mathAbs", "setPointerCapture", "animateClickScroll", "stopClickScrollAnimation", "wheelScrollBy", "classNameScrollbarInteraction", "focusedElement", "getFocusedElement", "hasAttr", "setT", "focusElement", "wheelEvent", "deltaX", "deltaY", "deltaMode", "classNameScrollbarWheel", "_capture", "removeClickEvent", "clickEvent", "removePointerEvents", "stopAndPrevent", "setTimeout", "createScrollbarsSetup", "observersSetupState", "onScroll", "mouseInHost", "autoHideIsMove", "autoHideIsLeave", "autoHideIsNever", "prevTheme", "instanceAutoHideSuspendScrollDestroyFn", "instanceAutoHideDelay", "hoverablePointerTypes", "isHoverablePointerType", "requestScrollAnimationFrame", "cancelScrollAnimationFrame", "autoHideInstantInteractionTimeout", "clearAutoHideInstantInteractionTimeout", "autoHideSuspendTimeout", "clearAutoHideSuspendTimeout", "auotHideTimeout", "clearAutoHideTimeout", "manageScrollbarsAutoHideInstantInteraction", "Kt", "_scrollEventElement", "Ft", "Pt", "Nt", "qt", "Bt", "manageScrollbarsAutoHide", "removeAutoHide", "delayless", "classNameScrollbarAutoHideHidden", "hide", "manageAutoHideSuspension", "classNameScrollbarAutoHide", "onHostMouseEnter", "_observersUpdateHints", "_structureUpdateHints", "tn", "_overflowEdgeChanged", "nn", "_overflowAmountChanged", "sn", "_overflowStyleChanged", "en", "_scrollCoordinatesChanged", "$t", "ft", "B", "cn", "_overflowStyle", "j", "_hasOverflow", "showNativeOverlaidScrollbarsOption", "showNativeOverlaidScrollbarsChanged", "themeChanged", "visibilityChanged", "autoHideChanged", "autoHideSuspendChanged", "dragScrollChanged", "clickScrollChanged", "overflowChanged", "trulyAppeared", "hasOverflow", "updateScrollbars", "updateVisibility", "setScrollbarVisibility", "overflowBehavior", "overflowStyle", "isVisible", "strScroll", "strVisible", "classNameScrollbarVisible", "classNameScrollbarThemeNone", "classNameScrollbarHandleInteractive", "classNameScrollbarTrackInteractive", "xVisible", "yVisible", "hasCorner", "classNameScrollbarCornerless", "classNameScrollbarUnusable", "classNameScrollbarRtl", "createStructureSetupElements", "defaultInitElements", "defaultPaddingInitialization", "defaultViewportInitialization", "defaultContentInitialization", "targetIsElm", "targetStructureInitialization", "initElements", "paddingInitialization", "viewportInitialization", "contentInitialization", "targetElement", "ownerDocument", "docElement", "documentElement", "getDocumentWindow", "defaultView", "generalStaticInitializationElement", "createNewDiv", "generateViewportElement", "generateContentElement", "elementHasOverflow", "offsetSize", "scrollSize", "overflowX", "strOverflowX", "overflowY", "strOverflowY", "overflowIsVisible", "possibleViewportElement", "viewportIsTarget", "possibleContentElement", "viewportIsContent", "viewportElement", "hostElement", "paddingElement", "contentElement", "generatedElements", "elementIsGenerated", "originalNonBodyScrollOffsetElement", "scrollOffsetElement", "scrollEventElement", "evaluatedTargetObj", "_padding", "_originalScrollOffsetElement", "_windowElm", "viewportAttributeClassName", "addRemoveAttrClass", "dataValueViewportScrolling", "rn", "dataAttributeInitialize", "targetContents", "contents", "contentSlot", "docWnd", "initActiveElm", "unwrap", "prepareWrapUnwrapFocus", "activeElement", "tabIndexStr", "originalViewportTabIndex", "undoInitWrapUndwrapFocus", "setAttrs", "dataValueHostIsHost", "dataAttributePadding", "dataAttributeContent", "dataAttributeHtmlBody", "destroyActiveElm", "viewportIsGenerated", "destroyFocusElement", "undoDestroyWrapUndwrapFocus", "addAttrClass", "dataValueViewportScrollbarHidden", "createTrinsicUpdateSegment", "_observersState", "Ct", "Ot", "createPaddingUpdateSegment", "updatePaddingCache", "currentPaddingCache", "equalTRBL", "topRightBottomLeft", "paddingChanged", "_t", "xt", "paddingAbsoluteChanged", "contentMutation", "paddingStyleChanged", "paddingRelative", "paddingHorizontal", "r", "l", "paddingVertical", "t", "b", "paddingStyle", "strMarginRight", "strMarginBottom", "strMarginLeft", "right", "viewportStyle", "strPaddingTop", "strPaddingRight", "strPaddingBottom", "strPaddingLeft", "_paddingAbsolute", "_viewportPaddingStyle", "_paddingStyleChanged", "createOverflowUpdateSegment", "an", "max0", "mathMax", "flowDirectionCanBeNonDefaultMap", "display", "direction", "directionStyle", "flexDirection", "flexDirectionStyle", "endsWith", "writingMode", "writingModeStyle", "flowDirectionStyleArr", "whCacheOptions", "partialXYOptions", "setMeasuringMode", "active", "getMeasuredScrollCoordinates", "flowDirectionStyles", "flowDirectionCanBeNonDefault", "some", "styleName", "styleValue", "_start", "_end", "originalScrollOffset", "removeNoContent", "dataValueViewportNoContent", "removeScrollBlock", "scrollEventScrollOffset", "isTrusted", "stopPropagation", "tmp", "rAF", "getOverflowAmount", "viewportScrollSize", "viewportClientSize", "tollerance", "amount", "getViewportOverflowStyle", "getAxisOverflowStyle", "axisBehavior", "axisHasOverflow", "perpendicularBehavior", "perpendicularOverflow", "behaviorStyle", "strHidden", "overflowBehaviorToOverflowStyle", "axisOverflowVisible", "perpendicularOverflowVisible", "nonPerpendicularOverflow", "nonOverflow", "setViewportOverflowStyle", "viewportOverflowStyle", "createAllOverflowStyleClassNames", "style", "createViewportOverflowStyleClassName", "overflowCssValueToOverflowStyle", "allOverflowStyleClassNames", "join", "updateSizeFraction", "getCurrentSizeFraction", "updateViewportScrollSizeCache", "getCurrentViewportScrollSizeCache", "updateOverflowAmountCache", "getCurrentOverflowAmountCache", "updateHasOverflowCache", "updateOverflowEdge", "getCurrentOverflowEdgeCache", "updateOverflowStyleCache", "updateFlowDirectionStyles", "currVal", "newValu", "equal", "updateMeasuredScrollCoordinates", "getCurrentMeasuredScrollCoordinates", "newVal", "getZeroScrollCoordinates", "prefix", "dataValueViewportOverflowXPrefix", "dataValueViewportOverflowYPrefix", "capitalizeFirstLetter", "Ht", "Et", "scrollbarsHidingPluginViewportArrangement", "X", "_arrangeViewport", "Y", "W", "_hideNativeScrollbars", "getShowNativeOverlaidScrollbars", "overflowXVisible", "overflowYVisible", "viewportChanged", "sizeFractionCache", "viewportScrollSizeCache", "overflowAmuntCache", "overflowEdgeCache", "sizeFraction", "windowInnerSize", "getWindowSize", "overflowAmountScrollSize", "overflowAmountClientSize", "overflowEdge", "overflowEdgeChanged", "overflowAmount", "overflowAmountChanged", "viewportScrollSizeChanged", "sizeFractionChanged", "hasOverflowChanged", "removeClipping", "adjustViewportStyle", "flowDirectionStylesChanged", "adjustMeasuredScrollCoordinates", "scrollCoordinates", "scrollCoordinatesChanged", "getElementOverflowStyle", "overflowStyleChanged", "sanitizeScrollCoordinates", "_scrolled", "createStructureSetup", "appendStructureElements", "canceled", "doViewportArrange", "updateSegments", "updateInfo", "adjustScrollOffset", "updateSegment", "createSetups", "isDestroyed", "onUpdated", "cacheAndOptionsInitialized", "structureSetupCreate", "structureSetupUpdate", "structureSetupCanceled", "observersSetupCreate", "observersSetupUpdate", "observersUpdateHints", "scrollbarsSetupCreate", "scrollbarsSetupUpdate", "scrollbarsSetupElements", "updateHintsAreTruthy", "hints", "observerUpdateHints", "_changedOptions", "rawChangedOptions", "rawForce", "Tt", "vn", "_cloneScrollbar", "baseUpdateInfoObj", "observersHints", "structureHints", "truthyObserversHints", "truthyStructureHints", "changed", "ln", "initialScroll", "_observersSetupState", "_structureSetupState", "_structureSetupElements", "_scrollbarsSetupElements", "targetInstanceMap", "addInstance", "osInstance", "removeInstance", "getInstance", "OverlayScrollbars", "eventListeners", "tt", "targetIsElement", "instanceTarget", "potentialInstance", "instancePluginModuleInstances", "validateOptions", "newOptionsWithoutUndefined", "removeUndefinedProperties", "pluginValidate", "optionsValidationPluginModuleName", "currentOptions", "addPluginEvent", "removePluginEvents", "triggerPluginEvent", "addInstanceEvent", "removeInstanceEvents", "triggerInstanceEvent", "name", "setupsConstruct", "setupsUpdate", "setupsState", "setupsElements", "setupsCanceled", "instance", "sizeChanged", "directionChanged", "hostMutation", "scrollEvent", "pure", "base", "on", "off", "listener", "gn", "hn", "fn", "start", "end", "directionRTL", "jt", "Jt", "translateScrollbarStructure", "translateScrollbarsSetupElement", "scrollbarsSetupElement", "Xt", "Yt", "translatedStructure", "clone", "scrollbarHorizontal", "scrollbarVertical", "plugin", "registerPluginModuleInstances", "pluginModules", "plugins", "isArr", "pluginsToAdd", "addPlugins", "valid", "hasElmsFn", "isPlainObject", "P", "J", "ot", "st", "Z", "nt", "scrollbarsSize", "scrollbarsOverlaid", "scrollbarsHiding", "setDefaultInitialization", "setDefaultOptions", "trustedTypePolicy", "setTrustedTypePolicy"]
}
